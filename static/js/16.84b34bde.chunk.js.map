{"version":3,"sources":["axios/ajax.js","axios/index.js","axios/config.js","components/ProgressBar/ProgressBarView.js","axios/api.js","components/Upload/UploadPannel.js","constant/imageUrl.js","constant/config.js","components/Generate/Components/ButtonBox/ButtonBoxView.js","components/Generate/Components/Spining/SpiningView.js","components/Generate/Components/commonSlot/CommonSlotView.js","components/Generate/ToFactsheet/ToFactsheet.js","constant/Color.js","components/Generate/GeneratePannel.js","pages/Homepage/PannelView/PannelView.js"],"names":["ajax","url","data","type","config","axios","get","params","JSON","stringify","post","findInsightUrl","uploadFile","formData","processFile","path","start","end","variable","aggregate","parsingFile","fileurl","generateSequence","file_path","time_col","task","findInsight","file_url","fields","time_field","location","generateSingleInsight","insights","generateRecommendList","previous","current","generateSubsequent","existing_insights","applicationUrl","urlPrefix","uploadDataPrefix","generationUrlPrefix","activitiesPrefix","accountIp","uploadFileUrl","publicPrefix","loginadmintest","loginRedirectUrl","logoutRedirectUrl","authenUrl","accessToken","userImage","checkToken","logout","logoutAuthSystem","users","activitiesApi","uploadData","share","fetch","factScoring","generate","ProgressBarView","this","props","percent","isActive","status","showInfo","strokeColor","style","position","top","zIndex","display","React","Component","generatePDF","method","param","Dragger","UploadPannel","state","originFileOb","operateState","errorMessage","initDone","intl","uploadDataToCloud","Promise","reslove","reject","then","response","setState","OperationType","GENERATING","FAILED","options","currentLocale","message_zh","message_en","catch","error","processData","schema","filename","fileURL","fileName","numericalFields","numerical","filter","d","map","field","_that","d3","forEach","i","key","indexOf","parseFloat","updateOperation","UPLOADED","console","log","onUploadChange","info","UPLOADIND","event","updateProgress","total","loaded","file","fileObj","originFileObj","FormData","append","beforeUpload","resolve","size","FILE_LARGE","getPannelClassName","BEFORE_UPLOAD","isShowProgressbar","PannelContentView","generateProgress","ClickToUploadView","className","height","flex","onChange","showUploadList","accept","AliCloud","ConvertForms","name","ConvertType","TIMESEIRES","iconUrl","generateIconUrl","ButtonBoxView","text","onClick","onClickListener","backgroundImage","SpiningView","isSpining","tip","spinning","CommonSlotView","columnCount","form","pdfName","split","FileTypeAndNameView","justifyContent","marginBottom","myClassName","children","padding","href","target","rel","ToFactsheet","isDownloading","download","api","reUpload","reGnerate","editPage","history","push","click","supportedButton","length","button","index","GREEN","YELLOW","BLUE","GRAY","BAR_BACK","BAR","BAR_HIGHTLIGHT","AREA","LINE","BG_ABOVE","BG_BELOW","CONVERT","GeneratePannel","convertingType","generateStory","maxStoryLength","count","max_iteration","timer","setInterval","clearInterval","GENERATED","storyParameter","file_name","max_story_length","fail","clickGenerate","typeForm","originFileUrl","result","setParsedFileData","columns","granularity","originData","timeColumns","timeValues","nextProps","ConvertingArrow","FileNameView","Math","ceil","idx","backgroundColor","Color","visibility","PUBLISHED","GeneratedPannel","Loading","width","marginTop","FACTSHEET","flexDirection","alignItems","fallback","PannelView"],"mappings":"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","file":"static/js/16.84b34bde.chunk.js","sourcesContent":["/*\r\n发送异步ajax请求的模块\r\n封装axios库\r\n函数的返回值是promise对象\r\n */\r\nimport axios from 'axios'\r\nexport default function ajax(url,data={},type='GET',config={}){\r\n    if(type==='GET'){\r\n        return axios.get(url,{\r\n            params:data\r\n        });\r\n    }else{\r\n        if(JSON.stringify(config)==='{}'){\r\n            return axios.post(url,data);\r\n        }\r\n        return axios.post(url,data,config);\r\n    }\r\n}","/*\r\n包含应用中所有接口请求函数的模块\r\n每个函数的返回值都是promise\r\n */\r\nimport ajax from './ajax'\r\nimport config from './config';\r\n// let uploadUrl = 'http://localhost:6038/upload'\r\n// let parseFileUrl = 'http://localhost:6038/metadata'\r\n// let generateSequenceUrl = 'http://localhost:6040/generate/story'\r\n// let findInsightUrl = 'http://localhost:6040/generate/insight'\r\n// let fileProcess = 'http://localhost:6038/preprocess'\r\n// let genertateRecommendList = 'http://localhost:6040/generate/recommend'\r\n//zerotier:172.30.249.157\r\n// let uploadUrl = 'http://172.30.249.157:6038/upload'\r\n// let parseFileUrl = 'http://172.30.249.157:6038/metadata'\r\n// let generateSequenceUrl = 'http://172.30.249.157:6040/generate/story'\r\n// let findInsightUrl = 'http://172.30.249.157:6040/generate/insight'\r\n// let fileProcess = 'http://172.30.249.157:6038/preprocess'\r\n// let genertateRecommendList = 'http://172.30.249.157:6040/generate/recommend'\r\n// vasta-api.idvxlab.com\r\nlet uploadUrl = 'https://vasta-api.idvxlab.com:8008/upload'\r\nlet parseFileUrl = 'https://vasta-api.idvxlab.com:8008/metadata'\r\nlet generateSequenceUrl = 'https://vasta-api.idvxlab.com:8008/generate/story'\r\nlet findInsightUrl = 'https://vasta-api.idvxlab.com:8008/generate/insight'\r\nlet fileProcess = 'https://vasta-api.idvxlab.com:8008/preprocess'\r\nlet genertateRecommendList = 'https://vasta-api.idvxlab.com:8008/generate/recommend'\r\n//upload file\r\nexport const uploadFile = (formData) => ajax(uploadUrl, formData, 'POST',\r\n    {\r\n        \"headers\": {\r\n            'Content-Type': 'multipart/form-data' //application/json; charset=utf-8\r\n        },\r\n    });\r\n\r\nexport const processFile = (path, start, end, variable, aggregate) => ajax(fileProcess,\r\n    {\r\n        'path': path,\r\n        'start': start,\r\n        'end': end,\r\n        'variable': variable,\r\n        'aggregate': aggregate\r\n    },\r\n    'POST',\r\n    {\r\n        \"headers\": {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n);\r\n\r\n//analysis file's columns、time column、granularity and so on\r\nexport const parsingFile = (fileurl) => ajax(\r\n    parseFileUrl,\r\n    {\r\n        'path': fileurl\r\n    },\r\n    'GET'\r\n);\r\n\r\n\r\n//------------generate sequence-----------\r\nexport const generateSequence = (file_path, time_col, task) => ajax(generateSequenceUrl,\r\n    {\r\n        'path': file_path,\r\n        'time_field': time_col,\r\n        'task': task\r\n    },\r\n    'POST',\r\n    {\r\n        \"headers\": {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n);\r\n//---find insights-------\r\nexport const findInsight = (file_url, fields, time_field, location) => ajax(findInsightUrl,\r\n    {\r\n        'file_url': file_url,\r\n        'fields': fields,\r\n        'time_field': time_field,\r\n        'location': location\r\n    },\r\n    'POST',\r\n    {\r\n        \"headers\": {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n);\r\n//-------generate single insight-------\r\nexport const generateSingleInsight = (file_url, fields, time_field, location, insights) => ajax(findInsightUrl,\r\n    {\r\n        'file_url': file_url,\r\n        'fields': fields,\r\n        'time_field': time_field,\r\n        'location': location,\r\n        'insights': insights\r\n    },\r\n    'POST',\r\n    {\r\n        \"headers\": {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n);\r\n//------request recommendList-------\r\nexport const generateRecommendList = (file_url, time_field, task, previous, current) => ajax(genertateRecommendList,\r\n    {\r\n        'file_url': file_url,\r\n        'time_field': time_field,\r\n        'task': task,\r\n        'previous': previous,\r\n        'current': current\r\n    },\r\n    'POST',\r\n    {\r\n        \"headers\": {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n);\r\n//------generate update story-------\r\nexport const generateSubsequent = (path, time_field, existing_insights, task) => ajax(generateSequenceUrl,\r\n    {\r\n        'path': path,\r\n        'time_field': time_field,\r\n        'existing_insights': existing_insights,\r\n        'task': task\r\n    },\r\n    'POST',\r\n    {\r\n        \"headers\": {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n);","//let calliopeService = 'service.datacalliope.com';\nlet calliopeService = 'calliope-service.idvxlab.com';\n//let calliopeLiteService = 'calliope-service.idvxlab.com:8004';\nlet calliopeLiteService = 'calliope-service.idvxlab.com:8002';\n// let applicationUrl='https://datacalliope.com';\nlet applicationUrl = 'http://calliope-dev.idvxlab.com';\n\nlet urlPrefix = process.env.NODE_ENV === 'production' ? `https://${calliopeService}:8002/api/v1` : 'http://localhost:7001/api/v1';\nlet uploadDataPrefix = process.env.NODE_ENV === 'production' ? `https://${calliopeLiteService}` : 'http://localhost:6038';//todo  7001\nlet generationUrlPrefix = process.env.NODE_ENV === 'production' ? `https://${calliopeLiteService}` : 'http://localhost:6040';//todo  7001\nlet activitiesPrefix = process.env.NODE_ENV === 'production' ? `https://${calliopeService}:8002/log/v1` : 'http://localhost:7001/log/v1';\nlet publicPrefix = process.env.NODE_ENV === 'production' ? applicationUrl : 'http://localhost:3000';\n//let client_id = '033338f2-02a8-44d4-8d54-5173b4a864f9';\nlet client_id = '6dcd0f8b-6990-4d69-9018-29b3351aa6ff';\nlet accountIp = `https://account.datacalliope.com`\nlet logoutRedirectUrlIp = `https://service.datacalliope.com:8001`\n\n\n//sequence API\n// let generateSequencePrefic='http://192.168.1.82:6040/'\n// let fileServerPrefix='http://172.30.138.189:6038'\n// let generateServerPrefix='http://172.30.138.189:6040'\n// setupPoxy.js进行跨域配置\n// let fileServerPrefix='http://172.30.138.189:6038'\nlet fileServerPrefix = 'http://localhost:6038'\nconst config = {\n    url: {\n        //sequence\n        uploadFileUrl: `${fileServerPrefix}/upload`,\n        // generateSequenceUrl:`${generateServerPrefix}/generate/story`,\n\n\n        applicationUrl: applicationUrl,\n        //share\n        publicPrefix: publicPrefix,\n        //login\n        loginadmintest: `${urlPrefix}/loginadmintest`,\n        loginRedirectUrl: `${accountIp}/#/login?response_type=code&client_id=${client_id}&grant_type=authorization_code&redirect_uri=${applicationUrl}`,\n        logoutRedirectUrl: `${applicationUrl}/#/logout`,\n        authenUrl: accountIp,\n        accessToken: `${urlPrefix}/accesstoken`,\n        userImage: `${logoutRedirectUrlIp}/img`,\n        checkToken: `${urlPrefix}/checktoken`,\n        //logout\n        logout: `${urlPrefix}/logout`,\n        logoutAuthSystem: `${logoutRedirectUrlIp}/logout`,\n        //activities\n        users: `${urlPrefix}/users`,\n        activitiesApi: `${activitiesPrefix}/users`,\n        //upload\n        uploadDataPrefix: uploadDataPrefix,\n        uploadData: `${uploadDataPrefix}/upload`,\n        share: `${uploadDataPrefix}/share`,\n        fetch: `${uploadDataPrefix}/data/share`,\n        //story generation\n        factScoring: `${generationUrlPrefix}/fact`,\n        generate: `${generationUrlPrefix}/generate`,\n\n\n        //sequence:\n        // generateSequence:`${generateSequencePrefic}/generate/story`\n    }\n}\nexport default config","import React from 'react';\nimport { Progress } from \"antd\";\n\nexport default class ProgressBarView extends React.Component {\n\n    render() {\n        const { percent, isActive } = this.props\n        return (<Progress\n            percent={percent}\n            status={isActive ? \"active\" : \"\"}\n            showInfo={false}\n            strokeColor=\"#EB6331\"\n            style={{\n                position: \"absolute\", top: \"-10px\", zIndex: \"9999\",\n                display: isActive ? \"block\" : \"none\"\n            }} />)\n    }\n}","import config from '@/axios/config';\nimport axios from 'axios';\n\nexport async function uploadData(formData) {\n    return new Promise((reslove, reject) => {\n        axios({\n            method: \"post\",\n            url: `${config.url.uploadData}`,\n            config: {\n                \"headers\": {\n                    'Content-Type': 'multipart/form-data' //application/json; charset=utf-8\n                },\n            },\n            data: formData\n        }).then((response) => {\n            if (response.status >= 400) {\n                reject();\n            } else if (response.status === 200 || response.status === 201 || response.status === 204) {\n                reslove(response.data);\n            } else {\n                reject();\n            }\n        }).catch(error => {\n            reject();\n            //  message.error('error message');\n        })\n    })\n}\n\n\nexport function generate(url, data) {\n    return axios({\n        method: \"post\",\n        url: url,\n        config: {\n            \"headers\": {\n                'Content-Type': 'application/json; charset=utf-8'\n            },\n        },\n        data: data\n    })\n}\n\n\n\nexport function factScoring(filename, fact, method) {\n    return axios({\n        \"method\": \"POST\",\n        \"url\": config.url.factScoring,\n        \"headers\": {\n            \"Content-Type\": \"application/json; charset=utf-8\"\n        },\n        \"data\": {\n            \"file_name\": filename,\n            \"fact\": fact,\n            \"method\": method,\n        }\n    })\n}\n\nexport async function shareStory(jsonstring) {\n    return new Promise((reslove, reject) => {\n        axios({\n            method: \"post\",\n            url: `${config.url.share}`,\n            config: {\n                \"headers\": {\n                    'Content-Type': 'application/json; charset=utf-8'\n                },\n            },\n            data: {\n                \"share_json\": jsonstring\n            }\n        }).then((response) => {\n            if (response.status >= 400) {\n                reject();\n            } else if (response.status === 200 || response.status === 201 || response.status === 204) {\n                reslove(response.data);\n            } else {\n                reject();\n            }\n        }).catch(error => {\n            reject();\n            //  message.error('error message');\n        })\n    })\n}\n\nexport async function fetchStory(id) {\n    return axios({\n        method: \"get\",\n        \"url\": `${config.url.fetch}/${id}.json`,\n        config: {\n            \"headers\": {\n                'Content-Type': 'application/json; charset=utf-8'\n            },\n        }\n    })\n}\n/*****\n *技术栈：\n ssr(后端渲染)，koa(koa-views)：模板渲染，渲染出要生成pdf的页面)\n node.js 生成pdf插件 puppeteer：将渲染的页面生成PDF\n koa-send：将生成的PDF返回给前端页面下载 \n * \n data是后端用于渲染页面的数据\n */\nexport function generatePDF(data) {\n    return axios({\n        method: 'post',\n        url: `/generatePDF`,\n        param: {},\n        data: data\n    })\n}\n","import React from 'react';\nimport { Upload } from 'antd';\nimport ProgressBarView from '@/components/ProgressBar/ProgressBarView'\nimport OperationType from '@/constant/OperationType'\nimport config from '@/axios/config';\nimport * as api from '@/axios/api';\nimport * as d3 from 'd3';\nimport { uploadFile } from '../../axios';\n\nimport \"./UploadPannel.less\";\n\nconst { Dragger } = Upload;\n\nexport default class UploadPannel extends React.Component {\n    state = {\n        originFileOb: {},\n        operateState: this.props.operateState,\n        errorMessage: this.props.initDone && this.props.intl.get(\"upload failed\")\n    }\n\n    uploadDataToCloud = (formData) => {\n        return new Promise((reslove, reject) => {\n            uploadFile(formData).then(response => {\n               \n                this.setState({ operateState: OperationType.GENERATING }); //加快页面交互的响应\n                    if (response.status === 'error') {\n                        let { intl } = this.props\n                        this.setState({\n                            operateState: OperationType.FAILED,\n                            errorMessage: intl.options.currentLocale === 'zh-CN' ? response.message_zh : response.message_en\n                        })\n                        reject();\n                        return null;\n                    }\n                    reslove(response);\n                \n            }).catch(error => {\n                this.setState({\n                    operateState: OperationType.FAILED,\n                    errorMessage: this.props.initDone && this.props.intl.get(\"upload failed\")\n                })\n                reject();\n            })\n            // api.uploadData(formData, config.url.uploadData).then((response) => {\n            //     this.setState({ operateState: OperationType.GENERATING }); //加快页面交互的响应\n            //     if (response.status === 'error') {\n            //         let { intl } = this.props\n            //         this.setState({\n            //             operateState: OperationType.FAILED,\n            //             errorMessage: intl.options.currentLocale === 'zh-CN' ? response.message_zh : response.message_en\n            //         })\n            //         reject();\n            //         return null;\n            //     }\n            //     reslove(response);\n            // }, fail => {\n            //     this.setState({\n            //         operateState: OperationType.FAILED,\n            //         errorMessage: this.props.initDone && this.props.intl.get(\"upload failed\")\n            //     })\n            //     reject();\n            // })\n        })\n    }\n\n    processData = (response) => {\n        if (!response.data.schema || !response.data.file_url || !response.data.filename) {\n            this.props.updateOperation(OperationType.UPLOADED)//更新UI\n            return\n        }\n        let schema = response.data.schema\n        let fileURL = response.data.file_url\n        let fileName = response.data.filename\n        let numericalFields = []\n        let numerical = schema.filter(d => d.type === \"numerical\")\n        numericalFields = numerical.map(d => d.field)\n        let _that = this\n        d3.csv(fileURL)\n            .then(function (data) {\n                data.forEach((d, i) => {\n                    for (let key in d) {\n                        if (numericalFields.indexOf(key) !== -1) {\n                            d[key] = parseFloat(d[key])\n                        }\n                    }\n                })\n                _that.props.uploadData(fileName, schema, data,fileURL); //更新数据到redux中\n                _that.props.updateOperation(OperationType.UPLOADED)//更新UI\n            }).catch(function (error) {\n                console.log(error)\n            })\n    }\n\n    onUploadChange = (info) => {\n        /**** update UI ****/\n        this.setState({\n            operateState: OperationType.UPLOADIND,\n        })\n        if (info.event) {\n            this.props.updateProgress(info.event.total, (info.event.total - info.event.loaded));\n        }\n        /**** update UI  the end ****/\n\n        const { status } = info.file;\n        if (status !== 'uploading') {\n            \n            let fileObj = info.file.originFileObj;\n            let formData = new FormData();\n            formData.append(\"file\", fileObj);\n            //step:1 upload data\n            this.uploadDataToCloud(formData)\n                //step 2:process data\n                .then((response) => this.processData(response))\n        }\n    }\n    beforeUpload = (info) => {\n        return new Promise((resolve, reject) => {\n            if (info.size <= 1048576 * 5) {\n                return resolve(true);\n            } else {\n                this.setState({\n                    operateState: OperationType.FILE_LARGE\n                })\n                reject(false);\n            }\n        });\n    }\n\n    getPannelClassName = () => {\n        const { operateState } = this.state;\n        switch (operateState) {\n            case OperationType.BEFORE_UPLOAD:\n                return \"draggerPannelCommon yellowPannel\";\n            case OperationType.UPLOADED:\n                return \"pannelWithConvertType whitePannel\";\n\n            default:\n                return \"\";\n        }\n    }\n\n    isShowProgressbar = () => {\n        const { operateState } = this.state;\n        if (operateState === OperationType.UPLOADIND || operateState === OperationType.GENERATING) {\n            return true;\n        }\n        return false;\n    }\n\n\n    render() {\n        const { intl, initDone, generateProgress } = this.props;\n        const { operateState } = this.state;\n\n\n        /***\n            上传失败或者文件过大的情况下，点击此按钮可以重新上传\n            ***/\n        const ClickToUploadView = () => {\n            return (\n                <div className=\"ClickToUpload\">\n                    <div ></div>\n                    <p> {initDone && intl.get(\"Click to upload\")}</p>\n                </div>\n            )\n        };\n\n        let PannelContentView;\n        switch (operateState) {\n            case OperationType.BEFORE_UPLOAD:\n                PannelContentView = <>\n                    <div className=\"CSVFileImage\">\n                        <div className='csvIconWhite'></div>\n                    </div>\n                    <div className=\"uploadView\">\n                        <div className=\"uploadBtn\">\n                            <div></div>\n                            {initDone && intl.get(\"Click to upload\")}\n                        </div>\n                        <span>{initDone && intl.get(\"or drag a csv file here\")} </span>\n                    </div>\n                </>\n                break;\n            case OperationType.UPLOADIND:\n                PannelContentView = <div className=\"uploading\">\n                    <div className='uploadImage'></div>\n                    <span>{initDone && intl.get(\"Uploading file\")}</span>\n                    <div className='dot'>...</div>\n                </div>\n                break;\n            case OperationType.FAILED:\n                PannelContentView = <>\n                    <div className='errorFailImage'>\n                        <div className=\"iconFailed\"></div>\n                        <p className=\"hintText\">{this.state.errorMessage}</p>\n                    </div>\n                    <ClickToUploadView />\n                </>\n                break;\n            case OperationType.FILE_LARGE: //large than 5MB\n                PannelContentView = <>\n                    <div className=\"largeFileView\">\n                        <div></div>\n                        <span>{initDone && intl.get(\"larger than 5MB\")}</span>\n                    </div>\n                    <ClickToUploadView />\n                </>\n                break;\n            default:\n                break;\n        }\n\n        return (\n            <div className={this.getPannelClassName()} style={{ position: 'relative' }}>\n                <ProgressBarView percent={generateProgress} isActive={this.isShowProgressbar()} />\n                <div style={{ height: \"340px\", flex: 1 }}>\n                    <Dragger\n                        beforeUpload={this.beforeUpload}\n                        onChange={this.onUploadChange}\n                        showUploadList={false}\n                        accept=\".csv, .json\">\n                        <div className=\"pannelContent\">\n                            {\n                                PannelContentView\n                            }\n                        </div>\n                    </Dragger>\n                </div>\n            </div >\n        )\n    }\n}","const AliCloud = 'http://calliope-dev.oss-cn-shanghai.aliyuncs.com/image/images'\nexport default AliCloud","import ConvertType from './ConvertType'\nimport AliCloud from '@/constant/imageUrl'\n\nlet ConvertForms = [\n    {\n        name: ConvertType.TIMESEIRES,\n        iconUrl: `${AliCloud}/convertType/factsheet.png`,\n        generateIconUrl: `${AliCloud}/convertType/factsheet_black.png`\n    },\n    // {\n    //     name: ConvertType.FACTSHEET,\n    //     iconUrl: `${AliCloud}/convertType/factsheet.png`,\n    //     generateIconUrl: `${AliCloud}/convertType/factsheet_black.png`\n    // },\n    // {\n    //     name: ConvertType.H5,\n    //     iconUrl: '${AliCloud}/convertType/H5.png',\n    //     generateIconUrl: '${AliCloud}/convertType/H5_black.png'\n    // }\n]\nexport default ConvertForms;","\nimport React from 'react'\nimport './ButtonBoxView.less'\n\n\nexport default class ButtonBoxView extends React.Component {\n\n    render() {\n        const { iconUrl, text } = this.props\n        return <div className='button-box' onClick={() => this.props.onClickListener()}>\n            <div style={{ backgroundImage: `url(${iconUrl})` }}></div>\n            <p>{text}</p>\n        </div>\n\n    }\n}","\nimport React from 'react'\nimport { Spin } from 'antd';\nimport './SpiningView.less'\n\nexport default class SpiningView extends React.Component {\n\n    render() {\n        const { isSpining, initDone, intl } = this.props\n        return <>\n            <Spin tip={initDone && intl.get(\"downloading\")} spinning={isSpining} />\n        </>\n    }\n}","\nimport React from 'react'\nimport SpiningView from '../Spining/SpiningView';\nimport './CommonSlotView.less'\nimport '../../common.less'\n\n\n/**** 定义组件的外观***/\nexport default class CommonSlotView extends React.Component {\n    render() {\n        const { fileName, initDone, intl, columnCount, form, isSpining } = this.props\n        let pdfName = fileName && fileName.split(\".csv\")[0]\n\n        const FileTypeAndNameView = () => {\n            return <div className='fileTypeAndNameView' style={{ justifyContent: isSpining ? \"flex-start\" : \"center\" }}>\n                <div className='fileType-icon'></div>\n                <span style={{ marginBottom: \"0px\" }} >{form === \"H5\" ? '' : `${pdfName}.pdf`}</span>\n            </div>\n        }\n\n        return <div className={this.props.myClassName ? `generated-view-dox ${this.props.myClassName}` : 'generated-view-dox'}>\n            <span >{initDone && intl.get(form === \"H5\" ? \"convertedTxtH5\" : \"convertedTxt\")}</span>\n            <FileTypeAndNameView />\n            <div className=\"FuntionView\" style={{ columnCount }}>\n                <div className='download-box'>\n                    <SpiningView isSpining={isSpining} {...this.props} />\n                </div>\n                {\n                    this.props.children\n                }\n            </div>\n            <span >{initDone && intl.get(\"Visit\")}<a style={{ padding: '0px 5px' }} href='https://datacalliope.com' target=\"_blank\" rel=\"noopener noreferrer\">Calliope · Data</a>{initDone && intl.get(\"VisitCalliope\")}</span>\n        </div>\n    }\n}","import React from 'react'\nimport ConvertForms from '@/constant/config'\nimport OperationType from '@/constant/OperationType'\nimport ButtonBoxView from '../Components/ButtonBox/ButtonBoxView'\nimport CommonSlotView from '../Components/commonSlot/CommonSlotView'\nimport AliCloud from '@/constant/imageUrl'\nimport * as api from '@/axios/api'\nimport './ToFactsheet.less'\nimport '../common.less'\n\n\nexport default class ToFactsheet extends React.Component {\n\n    state = {\n        isDownloading: false\n    }\n\n    download = () => {\n        this.setState({\n            isDownloading: true\n        })\n        //pdf下载功能\n        let data = {\n\n        }\n        api.generatePDF(data).then(() => { })\n    }\n\n    reUpload = () => {\n        this.props.updateOperation(OperationType.BEFORE_UPLOAD)\n    }\n    reGnerate = () => {\n        this.props.reGnerate(ConvertForms[0])\n    }\n    editPage = () => {\n        this.props.history.push('/edit/factsheet')\n    }\n    click = (text) => {\n        const { intl, initDone } = this.props;\n        switch (text) {\n            case initDone && intl.get(\"Upload\"):\n                this.reUpload()\n                break;\n            case initDone && intl.get(\"Regnerate\"):\n                this.reGnerate()\n                break;\n            case initDone && intl.get(\"Download\"):\n                this.download()\n                break;\n            case initDone && intl.get(\"Edit\"):\n                this.editPage()\n                break;\n            default:\n                break;\n        }\n    }\n\n    render() {\n        const { intl, initDone, fileName } = this.props;\n        const { isDownloading } = this.state\n        //add your button here\n        const supportedButton = [\n            {\n                iconUrl: `${AliCloud}/upload_white.png`,\n                text: initDone && intl.get(\"Upload\")\n            },\n            {\n                iconUrl: `${AliCloud}/download/regenerate.png`,\n                text: initDone && intl.get(\"Regnerate\")\n            },\n            {\n                iconUrl: `${AliCloud}/download/download.png`,\n                text: initDone && intl.get(\"Download\")\n            },\n            {\n                iconUrl: `${AliCloud}/download/edit.png`,\n                text: initDone && intl.get(\"Edit\")\n            }\n        ]\n        return (\n            <CommonSlotView myClassName={\"toFactsheet\"} fileName={fileName} isSpining={isDownloading} columnCount={supportedButton.length} {...this.props}>\n                {\n                    supportedButton.map((button, index) => {\n                        return <ButtonBoxView key={\"index_\" + index} iconUrl={button.iconUrl} text={button.text} onClickListener={() => this.click(button.text)} />\n                    })\n                }\n            </CommonSlotView >\n        )\n    }\n}\n","export default {\n    GREEN: 'rgb(51, 111, 185)',\n    YELLOW: 'yellow',\n    BLUE: '#336fb9',\n    GRAY: 'lightgray',\n    BAR_BACK: '#222f3d',\n    BAR: '#6CD4FF',\n    BAR_HIGHTLIGHT: '#F6C02A',\n    AREA: '#ffce54',\n    LINE: '#ffce54',\n    BG_ABOVE: '#a1d469',\n    BG_BELOW: '#ed5463',\n    CONVERT: [\"#064969\", \"#E19788\", \"#D33346\", \"#96A7CE\", \"#B1CC70\", \"#4ECBC4\"]\n}","import React, { Suspense } from 'react'\nimport { Spin } from 'antd';\nimport OperationType from '@/constant/OperationType'\nimport ConvertType from '@/constant/ConvertType'\nimport ConvertForms from '@/constant/config'\nimport Fact from '@/model/fact'\nimport ToFactsheet from '@/components/Generate/ToFactsheet/ToFactsheet'\nimport Color from '@/constant/Color'\nimport ProgressBarView from '@/components/ProgressBar/ProgressBarView'\nimport config from '@/axios/config';\nimport * as api from '@/axios/api';\nimport './GeneratePannel.less';\nimport { parsingFile } from '../../axios';\n\n\nexport default class GeneratePannel extends React.Component {\n\n    state = {\n        operateState: this.props.operateState,\n        convertingType: ConvertForms[0]\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) {\n        if (nextProps.operateState !== this.props.operateState) {\n            this.setState({\n                operateState: nextProps.operateState\n            })\n        }\n    }\n    generate = (fileurl) => {\n        return new Promise(async (resolve, reject) => {\n            let fileName = this.props.fileName;\n            this.props.generateStory([], [], '');\n            this.props.updateProgress(this.props.maxStoryLength, this.props.maxStoryLength);//reset progress bar\n            //setTimeout 8s\n            let max_iteration = 8,\n                count = max_iteration;//inital\n\n            let timer = setInterval(() => {\n                if (count === 0) {\n                    clearInterval(timer)\n                    this.setState({\n                        operateState: OperationType.GENERATED\n                    })\n                    this.props.history.push('/edit')\n                }\n                count--;\n                this.props.updateProgress(max_iteration, count < 0 ? 0 : count);\n            }, 1500)\n\n            const { storyParameter } = this.props;\n\n            let data = {\n                file_name: fileName,\n                max_story_length: storyParameter.maxStoryLength\n            }\n            // const response = await api.generate(url, data)\n            const response = await parsingFile(fileurl)\n            clearInterval(timer);\n            if (response.data.fail) {\n                this.setState({\n                    operateState: OperationType.FAILED,\n                    errorMessage: response.data.fail\n                })\n                reject();\n            }\n            if (response.data.error) {\n                this.setState({\n                    operateState: OperationType.FAILED,\n                    errorMessage: response.data.error\n                })\n                reject();\n            }\n            this.props.updateProgress(max_iteration, 0);//100%\n            this.setState({\n                operateState: OperationType.GENERATED\n            })\n            resolve(response)\n        })\n    }\n\n    getPannelClassName = () => {\n        const { operateState } = this.state;\n        switch (operateState) {\n            case OperationType.UPLOADED:\n                return \"pannelWithConvertType whitePannel\"\n            case OperationType.GENERATING:\n            case OperationType.GENERATED:\n                return \"draggerPannelCommon whitePannel\"\n            default:\n                return \"\";\n        }\n    }\n\n    isShowProgressbar = () => {\n        const { operateState } = this.state\n        if (operateState === OperationType.GENERATING) {\n            return true;\n        }\n        return false;\n    }\n\n    clickGenerate = (typeForm) => {\n        this.setState({\n            convertingType: typeForm,\n            operateState: OperationType.GENERATING\n        })\n        let type = typeForm.name\n        // console.log()\n        this.generate(this.props.originFileUrl).then(response => {\n\n            let result=response.data\n            //set columnList,granularity,dataRange,timeCol,timeValue\n            this.props.setParsedFileData(result.columns,\n                                         result.granularity,\n                                         [0,this.props.originData.length-1],\n                                         result.timeColumns,\n                                         result.timeValues)\n            //设置一个\n            this.props.history.push('/edit')\n            // const facts = response.data.story.facts;\n            // let tempFacts = [];\n            // switch (type) {\n            //     default:\n            //         for (let factDict of facts) {\n            //             let fact = new Fact(\n            //                 factDict['type'],\n            //                 factDict['measure'],\n            //                 factDict['subspace'],\n            //                 factDict['groupby'],\n            //                 factDict['focus'],\n            //                 factDict['parameter'],\n            //                 \"\", // chart\n            //                 factDict['score'],\n            //                 factDict['information'],\n            //                 factDict['significance']\n            //             )\n            //             tempFacts.push(fact);\n            //         }\n            //         this.props.generateStory(tempFacts.slice(), [\n            //             \"none\",\n            //             \"similarity\",\n            //             \"similarity\",\n            //             \"similarity\",\n            //             \"similarity\",\n            //             \"similarity\"\n            //         ], 1);\n            //         this.props.history.push('/edit')\n            //         break;\n            // }\n        })\n    }\n\n    render() {\n        const { intl, initDone, generateProgress } = this.props;\n        const { operateState, convertingType } = this.state\n\n\n        const ConvertingArrow = ({ operateState }) => {\n            return (<div className=\"arrowLineDiv\" >\n                <p> {this.props.generateProgress + \"%\"}</p>\n                <div className=\"arrowLine\"></div>\n                {\n                    operateState === OperationType.GENERATED ?\n                        <p> {initDone && intl.get(\"Success\")}</p>\n                        :\n                        <p> {initDone && intl.get(\"Coverting\")}</p>\n                }\n            </div>)\n        }\n\n        const FileNameView = ({ fileName }) => {\n            return <div className='CSVFileImage'>\n                <div className='csvIconBlack'></div>\n                <span className=\"fileName\">{fileName}</span>\n            </div>\n        }\n\n        let PannelContentView;\n        switch (operateState) {\n            case OperationType.UPLOADED:\n                PannelContentView = <>\n                    <div style={{ height: \"340px\", flex: 1 }}>\n                        <div className='pannel-box'>\n                            <FileNameView fileName={this.props.fileName} />\n                        </div>\n                    </div>\n                    <div className='ConvertFormsDiv' style={{ columnCount: Math.ceil(ConvertForms.length / 2) }}>\n                        {\n                            ConvertForms.map((type, idx) => {\n                                return <div className='convert-box'\n                                    key={idx}\n                                    style={{ height: ConvertForms.length === 1 ? \"100%\" : \"50%\", backgroundColor: Color.CONVERT[idx] }}\n                                    onClick={() => this.clickGenerate(type)}>\n                                    <div className='icon'\n                                        style={{ backgroundImage: `url(${type.iconUrl})` }}\n                                    />\n                                    <span>{initDone && intl.get(`To${type.name}`)}</span>\n                                </div>\n                            })\n                        }\n                        {\n                            ConvertForms.length !== 1 && ConvertForms.length % 2 !== 0 ?\n                                <div style={{ height: \"50%\", visibility: \"none\", backgroundColor: \"transparent\" }}></div>\n                                : null\n                        }\n                    </div>\n                </>\n                break;\n            case OperationType.GENERATING:\n                PannelContentView = <div style={{ height: \"340px\", flex: 1 }}>\n                    <div className='pannel-box'>\n                        <div style={{ display: 'flex' }}>\n                            <FileNameView fileName={this.props.fileName} />\n                            <div className='VHCenter'>\n                                <ConvertingArrow operateState={operateState} {...this.props} />\n                                <div className='CSVFileImage'>\n                                    <div className='GenerateIcon'\n                                        style={{ backgroundImage: `url(${convertingType.generateIconUrl})` }}\n                                    />\n                                    <span className='fileName'>{initDone && intl.get(`To${convertingType.name}`)}</span>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div >\n                break;\n            case OperationType.PUBLISHED:\n                const Loading = () => {\n                    return (<div style={{ width: '100%', height: '100%', display: 'flex', justifyContent: 'center', marginTop: \"50px\" }}>\n                        <Spin />\n                    </div>)\n                }\n                //dynamic load the supported button view according to the convert type\n                let GeneratedPannel;\n                switch (convertingType.name) {\n                    case ConvertType.FACTSHEET:\n                        GeneratedPannel = <ToFactsheet reGnerate={this.clickGenerate}  {...this.props} />\n                        break;\n                    default:\n                        break;\n                }\n\n                PannelContentView = <div style={{ height: \"340px\", flex: 1 }}>\n                    <div className='pannel-box'>\n                        <div style={{ display: 'flex', flexDirection: \"column\", alignItems: \"center\", height: \"100%\" }}>\n                            <Suspense fallback={<Loading />}>\n                                {GeneratedPannel}\n                            </Suspense>\n                        </div>\n                    </div>\n                </div >\n                break;\n            default:\n                break;\n        }\n        return <div className={this.getPannelClassName()}>\n            <ProgressBarView percent={generateProgress} isActive={this.isShowProgressbar()} />\n            {\n                PannelContentView\n            }\n        </div>\n    }\n}","import React, { Component } from 'react'\nimport OperationType from '@/constant/OperationType'\n\nimport UploadPannel from '@/components/Upload/UploadPannel'\nimport GeneratePannel from '@/components/Generate/GeneratePannel'\nimport './PannelView.less'\n\n/***上传与生成组件****/\nexport default class PannelView extends Component {\n    render() {\n        const { intl, initDone, operateState } = this.props;\n        let PannelView;\n        switch (operateState) {\n            //upload module\n            case OperationType.BEFORE_UPLOAD:\n            case OperationType.UPLOADIND:\n            case OperationType.FAILED:\n            case OperationType.FILE_LARGE:\n                PannelView = <UploadPannel operateState={operateState} {...this.props} />\n                break;\n            //generate module\n            case OperationType.UPLOADED:\n            case OperationType.GENERATING:\n            case OperationType.PUBLISHED:\n                PannelView = <GeneratePannel operateState={operateState} {...this.props} />\n                break;\n            default:\n                break;\n        }\n\n        return <div>\n            <div className='UploadTxtDiv'><div></div> <span>{initDone && intl.get(\"UploadDescription\")}</span></div>\n            {\n                PannelView\n            }\n        </div>\n    }\n}\n"],"sourceRoot":""}