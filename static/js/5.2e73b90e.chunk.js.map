{"version":3,"sources":["constant/ChartSize.js","insight_charts/vis/data.js","insight_charts/vis/visualization/aggregationtype.js","insight_charts/vis/fact.js","insight_charts/vis/visualization/charttype.js","insight_charts/vis/chart.js","insight_charts/vis/charts/constant/timeConstant.js","insight_charts/vis/charts/multivariateOutlier/index.js","insight_charts/vis/charts/constant/getPosition.js","insight_charts/vis/charts/univariateDistribution/index.js","insight_charts/vis/charts/constant/getContainer.js","insight_charts/vis/charts/trend/index.js","insight_charts/vis/charts/constant/uuid.js","insight_charts/vis/charts/seasonality/index.js","insight_charts/vis/charts/multivariateDistribution/index.js","insight_charts/vis/charts/frequentPattern/index.js","insight_charts/vis/charts/clustering/index.js","insight_charts/vis/charts/forecasting/index.js","insight_charts/vis/charts/univariateOutlier/index.js","insight_charts/vis/charts/similarity/index.js","insight_charts/vis/charts/origin/index.js","insight_charts/vis/charts/outstanding/index.js","insight_charts/vis/charts/autocorrelation/index.js","insight_charts/vis/visualization.js","insight_charts/vis/display.js","insight_charts/vis/autovis.js","insight_charts/Chart.js"],"names":["originChartSize","Data","this","_table","_schema","spec","Promise","resolve","reject","numericalFields","numerical","schema","filter","d","type","map","field","data","values","forEach","i","key","indexOf","parseFloat","d3","url","then","bind","catch","error","aggregationtype","SUM","MAX","MIN","AVG","COUNT","NONE","Fact","_factdata","_type","_measure","_subspace","_breakdown","_parameter","_focus","value","measure","subspace","breakdown","focus","parameter","length","schemaDict","column","subtype","pictype","isPostCode","x","parseInt","toString","factdata","aggregate","console","log","fact","filteredData","slice","hasOwnProperty","item","Math","abs","includes","value1","value2","max","min","valueNoRange1","valueNoRange2","max1","min1","sub","measures","breakdowns","aggdata","columns","concat","push","Object","keys","measureField","y","AggregationType","sum","avg","count","seriesData","entries","series","calculateData","sumData","Array","fill","categoryData","sumRows","assign","agg","index","a","b","countData","countRows","ChartType","FREQUENT_PATTERN","UNIVARIATE_OUTLIER","MULTIVARIATE_OUTLIER","TREND","FORECASTING","UNIVARIATE_DISTRIBUTION","MULTIVARIATE_DISTRIBUTION","SEASONALITY","CLUSTERING","SIMILARITY","ORIGIN","AUTOCORRELATION","OUTSTANDING","Chart","_container","document","createElement","_width","_height","_duration","_showTooltip","_showSuggestion","selectAll","remove","_style","_size","parseTime","date","formatTick","formatTicksCount","DAY","HOUR","SERIES_COLORS","MultivariateOutlier","_x","_y","factData","sort","chartSize","margin","width","height","svg","container","append","attr","lineLayer","range","domain","format_TicksCount","tick_format","axisX","tickFormat","ticks","tooltipLayer","tickValues","yAxisLayer","ys","oneYLength","outlier","start","end","cluster","enter","style","other","lineGen","curve","centerPts","o","forecastPts","call","g","domainD","replace","select","title","text","node","getBBox","tooltip","tooltipText","score","toFixed","textWidth","textHeight","textY","outlierX","nodes","getPosition","posX","posY","event","window","pageX","pageY","clientX","clientY","documentElement","scrollLeft","body","scrollTop","UnivariateDistribution","factResult","parseFact","_data","measureName","_measureName","chartResult","setChartStandard","_chartSize","_margin","initSvg","xAxisResult","drawXAxis","_axisX","_tick_format","drawYAxis","xLeft","xRight","uniDistributionResult","drawUnivariateDistribution","mean","_mean","x_mean","_x_mean","y_mean","_y_mean","_tooltipLayer","originLineResult","drawBackLine","rawPath","_rawPath","_lineGen","drawInsightText","renderDetailValue","left","right","top","bottom","std","distr","yVal","name","tooltipLayer2","tooltip2","containerSelector","detailValueTooltip","detailValueTitle","detailValueContent","detailValueColor","detailValueText","on","transition","duration","detailValue","elementFromPoint","detailValueCircle","result","x0","invert","currentIndex","bisectDate","time0","time1","currentTime","currentValue","html","detailValueLine","Trend","drawTrend","pattern","scope","scale","yTop","regressionData","j","tmp","increasing","arrowImage","uuid","s","substr","floor","random","join","Seasonality","startIndex","endIndex","seasonality","interval","seasonal","tooltipPathList","drawSeasonality","renderTooltip","extendYAxis","tooltipPeriod","tooltipPeriodStart","tooltipPeriodEnd","xPos","tooltipId","hoverTooltip","hoverTooltipTitle","hoverTooltipContent","tooltipX","tooltipY","tooltipLenGen","tooltipAvgY","average","tooltipAvgLenGen","intervalString","SECOND","MINUTE","periodLeft","periodRight","previousSvg","getElementsByTagName","getAttribute","currentPeriod","tooltipData","dataLeft","dataRight","newAvgData","legendLayer","minValue","undefined","maxValue","MultivariateDistribution","focusMeasure","means","stds","rxs","rys","rads","mins","maxs","tempList","oneChartWidth","oneChartHeight","startX","startY","lineLayer2","cutTitle","xAxisLayer","FrequentPattern","drawFrequentPattern","patterns","tooltipPath","tooltipAvgData","normalized","Clustering","scatterData","clusterCounter","outlierCounter","point","symbolList","size","symbol","valueline","positions","polygon","centroid","textSpan","lineSpan1","lineSpan2","position","p_x","p_y","outlierText","tableContainer","overviewTableContainer","updateOverviewTable","clusterTable","headerTd","tdWidth","getBoundingClientRect","clusterRows","row","clusterUnit","outlierTable","outlierRows","outlierUnit","outlierName","clusterNumber","overviewTable","overviewTitleUnit","overviewTitle","overviewRows","variableName","overviewTd","overviewUnit","seriesInClusterIndex","Map","set","lineX","lineY","has","Forecasting","pred","timeDelta","current","Date","getTime","up","low","areaGen","y0","y1","lineGenPred","UnivariateOutlier","conf_data","conf_int","forecastLineGen","outlierY","endX","middle","ptIndex","BLOCK_COLOR","COLOR_LEGEND","TICK_VALUE","Similarity","props","parsrFact","drawLegend","baseLineMaxMin","baseStart","baseEnd","baseLineField","simiBlockLayer","seriesColor","setSeriesColor","tooltipPathData","currentMeasureName","backColor","drawSimiPart","linear","compute","similarity_slice","tag","similarity_value","minmax","baseline_local","ymin","ymax","tooltipBaslineGen","tooltipCompareGen","tooltipSvg","drawMultiBlock","Origin","yTextToolitip","yText","pointer","chart","id","isPopInsightCard","setPopInsightCardState","blockHeight","content","Outstanding","stars","star","symbolGen","round","Autocorrelation","correlation","Visualization","origin","_fact","VERTICAL_BAR_CHART","_chart","_caption","showSuggestion","showTooltip","_type2chart","table","Display","_paragraph","_vis","vis","display","animate","prefact","nextfact","update","caption","AutoVis","_display","_spec","_shouldShowCaption","dataspec","factspec","chartspec","load","paragraph","render","shouldShowCaption","showCaption","reason","autovis","generate","preProps","a_height","a_width","Component"],"mappings":"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","file":"static/js/5.2e73b90e.chunk.js","sourcesContent":["export const originChartSize = {\r\n    \"trend\": {\"width\":600,\"height\":280},\r\n    \"forecasting\": {\"width\":600,\"height\":280},\r\n    \"frequent_pattern\": {\"width\":600,\"height\":280},\r\n    \"seasonality\": {\"width\":600,\"height\":280},\r\n    \"univariate_outlier\":{\"width\":600,\"height\":280},\r\n    \"univariate_distribution\": {\"width\":600,\"height\":280},\r\n    \"similarity\": {\"width\":600,\"height\":360},\r\n    \"multivariate_outlier\": {\"width\":600,\"height\":360},\r\n    \"multivariate_distribution\": {\"width\":550,\"height\":420},\r\n    \"clustering\": {\"width\":314,\"height\":216},\r\n    \"origin\": {\"width\":600,\"height\":360},\r\n    \"outstanding\": {\"width\":600,\"height\":280},\r\n    \"autocorrelation\": {\"width\":600,\"height\":280},\r\n}","import * as d3 from 'd3';\n\nclass Data {\n    constructor() {\n        this._table = [];\n        this._schema = [];\n    }\n\n    table() {\n        return this._table;\n    }\n\n    schema() {\n        return this._schema;\n    }\n\n    load(spec) {\n        return new Promise((resolve, reject) => {\n            let numericalFields = [];\n            let numerical = spec.schema.filter(d => d.type === \"numerical\");\n            numericalFields = numerical.map(d => d.field);\n            if ('values' in spec) {\n                let data = spec.values;\n                data.forEach((d, i) => {\n                    for (let key in d) {\n                        if (numericalFields.indexOf(key) !== -1) {\n                            d[key] = parseFloat(d[key])\n                        }\n                    }\n                })\n                this._table = data;\n                this._schema = spec.schema;\n                resolve(this);\n            } else {\n                d3.csv(spec.url)\n                .then(function (data) {\n                    data.forEach((d, i) => {\n                        for (let key in d) {\n                            if (numericalFields.indexOf(key) !== -1) {\n                                d[key] = parseFloat(d[key])\n                            }\n                        }\n                    })\n                    this._table = data;\n                    this._schema = spec.schema;\n                    resolve(this);\n                }.bind(this)).catch(function (error) {\n                    reject(error);\n                })\n            }\n        });\n    }\n}\n\nexport default Data;","const aggregationtype = {\n    SUM: 'sum',\n    MAX: 'max',\n    MIN: 'min',\n    AVG: 'avg',\n    COUNT: 'count',\n    NONE: 'none'\n}\n\nexport default aggregationtype","import * as d3 from 'd3';\nimport AggregationType from './visualization/aggregationtype';\n\nclass Fact {\n    constructor() {\n        // table, factspec\n        this._table = [];\n        this._schema = [];\n        this._factdata = [];\n        this._type = \"\";\n        this._measure = [];\n        this._subspace = [];\n        this._breakdown = [];\n        this._parameter = \"\";\n        this._focus = [];\n    }\n\n    table(value) {\n        if (!value) {\n            return this._table;\n        }\n        this._table = value;\n        this._factdata = value;\n    }\n\n    schema(value) {\n        this._schema = value;\n    }\n\n    factdata() {\n        return this._factdata;\n    }\n\n    fact() {\n        return {\n            type: this._type,\n            measure: this._measure,\n            subspace: this._subspace,\n            breakdown: this._breakdown,\n            focus: this._focus,\n            parameter: this._parameter\n        }\n    }\n\n    load(spec) {\n        this._type = spec.type;\n        this._measure = spec.measure ? spec.measure : [];\n        if (this._measure.length === 0) {\n            this._measure = [{ 'aggregate': 'count' }];\n        }\n        this._subspace = spec.subspace ? spec.subspace : [];\n        this._breakdown = spec.breakdown ? spec.breakdown : [];\n        this._focus = spec.focus ? spec.focus : [];\n\n        let schemaDict = {};\n        for (const column of this._schema) {\n            schemaDict[column.field] = {};\n            schemaDict[column.field]['subtype'] = column.subtype;\n            schemaDict[column.field]['pictype'] = column.pictype;\n            schemaDict[column.field]['type'] = column.type;\n            schemaDict[column.field]['values'] = column.values;\n            schemaDict[column.field]['isPostCode'] = column.isPostCode;\n        }\n        this._measure = this._measure.map(x => {\n            if ('field' in x) {\n                x['type'] = schemaDict[x.field]['type'];\n                if (schemaDict[x.field]['subtype']) {\n                    x['subtype'] = schemaDict[x.field]['subtype'];\n                }\n                if (schemaDict[x.field]['pictype']) {\n                    x['pictype'] = schemaDict[x.field]['pictype'];\n                }\n            }\n            return x;\n        });\n        this._subspace = this._subspace.map(x => {\n            if (parseInt(x).toString !== \"NaN\") {\n                return x\n            }\n            x['type'] = schemaDict[x.field]['type'];\n            if (schemaDict[x.field]['subtype']) {\n                x['subtype'] = schemaDict[x.field]['subtype'];\n            }\n            if (schemaDict[x.field]['pictype']) {\n                x['pictype'] = schemaDict[x.field]['pictype'];\n            }\n            if (schemaDict[x.field]['isPostCode']) {\n                x['isPostCode'] = schemaDict[x.field]['isPostCode'];\n            }\n            return x;\n        });\n        this._breakdown = this._breakdown.map(x => {\n            x['type'] = schemaDict[x.field]['type'];\n            if (schemaDict[x.field]['subtype']) {\n                x['subtype'] = schemaDict[x.field]['subtype'];\n            }\n            if (schemaDict[x.field]['pictype']) {\n                x['pictype'] = schemaDict[x.field]['pictype'];\n            }\n            if (schemaDict[x.field]['values']) {\n                x['values'] = schemaDict[x.field]['values'];\n            }\n            if (schemaDict[x.field]['isPostCode']) {\n                x['isPostCode'] = schemaDict[x.field]['isPostCode'];\n            }\n            return x;\n        });\n        this._focus = this._focus.map(x => {\n            x['type'] = schemaDict[x.field]['type'];\n            if (schemaDict[x.field]['subtype']) {\n                x['subtype'] = schemaDict[x.field]['subtype'];\n            }\n            if (schemaDict[x.field]['pictype']) {\n                x['pictype'] = schemaDict[x.field]['pictype'];\n            }\n            return x;\n        });\n\n        /** subspace **/\n        if (this._subspace.length > 0) {\n            this._factdata = this.filter(this.factdata(), this._subspace);\n        }\n        /** aggregate **/\n        if (this._measure.length > 0) {\n            let measure = this._measure;\n            let breakdown = this._breakdown;\n            this._factdata = this.aggregate(this._factdata, measure, breakdown);\n        }\n\n        /** parameter **/\n        try {\n            this._parameter = this.parameter()\n        } catch (error) {\n            console.log('parameter is wrong')\n        }\n\n        return new Promise((resolve, reject) => {\n            resolve(this);\n        });\n    }\n\n    parameter() {\n        /* eslint-disable no-unused-vars */\n        let data = this.factdata();\n        let fact = this.fact();\n        let breakdown = fact.breakdown;\n        let focus = fact.focus;\n        let measure = fact.measure;\n        /* eslint-enable no-unused-vars */\n    }\n\n    filter(data, subspace) {\n        let filteredData = data;\n        // for time series insights\n        if (parseInt(subspace[0]).toString() !== \"NaN\") {\n            if (subspace.length === 2) {\n                return data.slice(subspace[0], subspace[1] + 1)\n            } else {\n                return data\n            }\n        }\n        //只有subspace有数据才会进入到该函数\n        //先提取出subspace中的第一个内容，观察是否有\"operator\"选项\n        //如果有\"operator\":那么按照新的过滤方式处理\n        //如果没有\"operator\":那么遵循原来的过滤方式\n        let wayFlag = subspace[0].hasOwnProperty(\"operator\");\n        if (wayFlag) {\n            //多个subspace\n            //一个subspace对应多个value\n            //要根据operator选项判断清楚进行何种操作\n            subspace.forEach((item) => {\n                let operator = item[\"operator\"];\n                switch (operator) {\n                    case \"EQ\":\n                        //表示==某个值，这里的值仅为某个数值类型的值\n                        filteredData = filteredData.filter((x) => {\n                            //比较浮点数的大小\n                            return Math.abs(x[item.field] - parseFloat(item.value[0])) < 1e-2;\n                        });\n                        break;\n                    case \"IN\":\n                        //表示==某个值\n                        filteredData = filteredData.filter((x) => {\n                            return item.value.includes(x[item.field]);\n                        });\n                        break;\n                    case \"RANGE\":\n                        //表示在某个值的范围内，value中会有两个值\n                        //需要将两个值都取出来,转化为数值形式\n                        let value1 = parseFloat(item.value[0]);\n                        let value2 = parseFloat(item.value[1]);\n                        let max = value1;\n                        let min = value2;\n                        // 比较大小，确定边界范围\n                        if (value1 < value2) {\n                            max = value2;\n                            min = value1;\n                        }\n                        filteredData = filteredData.filter((x) => {\n                            return x[item.field] >= min && x[item.field] <= max;\n                        });\n                        break;\n                    case \"NOT RANGE\":\n                        //表示在某个值的范围内，value中会有两个值\n                        //需要将两个值都取出来,转化为数值形式\n                        let valueNoRange1 = parseFloat(item.value[0]);\n                        let valueNoRange2 = parseFloat(item.value[1]);\n                        let max1 = valueNoRange1;\n                        let min1 = valueNoRange2;\n                        // 比较大小，确定边界范围\n                        if (valueNoRange1 < valueNoRange2) {\n                            max1 = valueNoRange2;\n                            min1 = valueNoRange1;\n                        }\n                        filteredData = filteredData.filter((x) => {\n                            return x[item.field] < min1 || x[item.field] > max1;\n                        });\n                        break;\n                    case \"GT\":\n                        //表示大于某个值，所以这里的值仅有一个\n                        //需要将其进行转化为数值形式\n                        filteredData = filteredData.filter((x) => {\n                            return x[item.field] > parseFloat(item.value[0]);\n                        });\n                        break;\n                    case \"LT\":\n                        //表示小于某个值，所以这里的值仅有一个\n                        //需要将其进行转化为数值形式\n                        filteredData = filteredData.filter((x) => {\n                            return x[item.field] < parseFloat(item.value[0]);\n                        });\n                        break;\n                    default:\n                        console.log(\"operator error!not in [GT,IN,LT,NOT RANGE,RANGE,EQ]\");\n\n                }\n            });\n            return filteredData;\n\n        } else {\n\n            /** filter rows **/\n            for (const sub of subspace) {\n                filteredData = filteredData.filter((x) => x[sub.field] === sub.value)\n            }\n            return filteredData\n        }\n    }\n\n    aggregate(data, measures, breakdowns) {\n        return data\n        // let aggdata = [];\n        // if (measures.length <= 1) {\n        //     aggdata = data;\n        // } else if (measures.length === 2) {\n        //     // over one measure\n        //     let aggdata1 = [];\n        //     let aggdata2 = [];\n        //     if (breakdowns.length > 0) {\n        //         aggdata1 = this.agg(data, measures[0], breakdowns);\n        //         aggdata2 = this.agg(data, measures[1], breakdowns);\n        //     } else {\n        //         aggdata1 = JSON.parse(JSON.stringify(data));\n        //         aggdata2 = JSON.parse(JSON.stringify(data));\n        //     }\n        //     let breakdownfields = breakdowns.map(x => x.field)\n        //     for (let index = 0; index < aggdata1.length; index++) {\n        //         const element1 = aggdata1[index];\n        //         for (const key in element1) {\n        //             if (!breakdownfields.includes(key)) {\n        //                 element1[\"measure0:\" + key] = element1[key];\n        //                 delete element1[key];\n        //             }\n        //         }\n        //         const element2 = aggdata2[index];\n        //         for (const key in element2) {\n        //             if (!breakdownfields.includes(key)) {\n        //                 element2[\"measure1:\" + key] = element2[key];\n        //                 delete element2[key];\n        //             }\n        //         }\n        //         aggdata.push(Object.assign(element1, element2));\n        //     }\n        // } else {\n        //     aggdata = data\n        // }\n        // return aggdata;\n    }\n\n    agg(data, measure, breakdowns) {\n        let aggdata = {};\n        /**\n         * filter columns\n         */\n        let columns = [];\n        columns = columns.concat(breakdowns.map(x => x.field));\n        if (measure.aggregate !== \"count\") {\n            columns.push(measure.field);\n        }\n        for (let measureField of Object.keys(measure)) {\n            columns.push(measure[measureField])\n        }\n        aggdata = data.map(x => {\n            let y = {};\n            for (const column of columns) {\n                y[column] = x[column];\n            }\n            return y;\n        });\n        switch (measure.aggregate) {\n            case AggregationType.SUM:\n                aggdata = this.sum(aggdata, measure, breakdowns);\n                break;\n            case AggregationType.AVG:\n                aggdata = this.avg(aggdata, measure, breakdowns);\n                break;\n            case AggregationType.MAX:\n                aggdata = this.max(aggdata, measure, breakdowns);\n                break;\n            case AggregationType.MIN:\n                aggdata = this.min(aggdata, measure, breakdowns);\n                break;\n            case AggregationType.COUNT:\n                aggdata = this.count(aggdata, measure, breakdowns)\n                break;\n\n            default:\n                aggdata = this.max(aggdata, measure, breakdowns);\n                break;\n        }\n        return aggdata;\n    }\n\n    sum(data, measure, breakdowns) {\n        let factdata = [];\n        if (breakdowns.length > 1) {\n            /** has series **/\n            let seriesData = d3.nest().key(d => d[breakdowns[1].field]).entries(data);\n            for (const series of seriesData) {\n                let calculateData = d3.nest().key(d => d[breakdowns[0].field]).entries(series.values);\n                let sumData = new Array(calculateData.length).fill(0);\n                let categoryData = calculateData.map(function (d, i) {\n                    d.values.forEach(d => {\n                        sumData[i] += d[measure.field]\n                    })\n                    let sumRows = Object.assign({}, d.values[0])\n                    sumRows[measure.field] = sumData[i]\n                    return sumRows\n                });\n                factdata = factdata.concat(categoryData);\n            }\n\n        } else if (breakdowns.length === 1) {\n            /** no series **/\n            let calculateData = d3.nest().key(d => d[breakdowns[0].field]).entries(data);\n            let sumData = new Array(calculateData.length).fill(0);\n            factdata = calculateData.map(function (d, i) {\n                d.values.forEach(d => {\n                    sumData[i] += d[measure.field]\n                })\n                let sumRows = Object.assign({}, d.values[0])\n                sumRows[measure.field] = sumData[i]\n                return sumRows\n            });\n        } else {\n            /** no breakdown **/\n            let agg = {};\n            agg[measure.field] = 0;\n            for (let index = 0; index < data.length; index++) {\n                agg[measure.field] += data[index][measure.field];\n            }\n            factdata.push(agg);\n        }\n        return factdata;\n    }\n\n    avg(data, measure, breakdowns) {\n        let factdata = [];\n        if (breakdowns.length > 1) {\n            /** has series **/\n            let seriesData = d3.nest().key(d => d[breakdowns[1].field]).entries(data);\n            for (const series of seriesData) {\n                let calculateData = d3.nest().key(d => d[breakdowns[0].field]).entries(series.values);\n                let sumData = new Array(calculateData.length).fill(0);\n                let categoryData = calculateData.map(function (d, i) {\n                    d.values.forEach(d => {\n                        sumData[i] += d[measure.field]\n                    })\n                    let sumRows = Object.assign({}, d.values[0])\n                    sumRows[measure.field] = sumData[i] / d.values.length;\n                    return sumRows;\n                });\n                factdata = factdata.concat(categoryData);\n            }\n\n        } else if (breakdowns.length === 1) {\n            /** no series **/\n            let calculateData = d3.nest().key(d => d[breakdowns[0].field]).entries(data);\n            let sumData = new Array(calculateData.length).fill(0);\n            factdata = calculateData.map(function (d, i) {\n                d.values.forEach(d => {\n                    sumData[i] += d[measure.field]\n                })\n                let sumRows = Object.assign({}, d.values[0])\n                sumRows[measure.field] = sumData[i] / d.values.length;\n                return sumRows;\n            });\n        } else {\n            /** no breakdown **/\n            let agg = {};\n            agg[measure.field] = 0;\n            for (let index = 0; index < data.length; index++) {\n                agg[measure.field] += data[index][measure.field];\n            }\n            agg[measure.field] /= data.length;\n            factdata.push(agg);\n        }\n        return factdata;\n    }\n\n    max(data, measure, breakdowns) {\n        let factdata = [];\n        if (breakdowns.length > 1) {\n            /** has series **/\n            let seriesData = d3.nest().key(d => d[breakdowns[1].field]).entries(data);\n            for (const series of seriesData) {\n                let calculateData = d3.nest().key(d => d[breakdowns[0].field]).entries(series.values);\n                let categoryData = calculateData.map(function (d, i) {\n                    let index = d3.scan(d.values, function (a, b) {\n                        if (a[measure.field] && b[measure.field])\n                            return b[measure.field] - a[measure.field];\n                    });\n                    if (index >= 0) {\n                        return d.values[index]\n                    } else {\n                        return d.values[0];\n                    }\n                });\n                factdata = factdata.concat(categoryData);\n            }\n\n        } else if (breakdowns.length === 1) {\n            /** no series **/\n            let calculateData = d3.nest().key(d => d[breakdowns[0].field]).entries(data);\n            factdata = calculateData.map(function (d, i) {\n                let index = d3.scan(d.values, function (a, b) {\n                    if (a[measure.field] && b[measure.field])\n                        return b[measure.field] - a[measure.field];\n                });\n                if (index >= 0) {\n                    return d.values[index]\n                } else {\n                    return d.values[0];\n                }\n            });\n        } else {\n            /** no breakdown **/\n            let agg = {};\n            agg[measure.field] = data[0][measure.field];\n            for (let index = 0; index < data.length; index++) {\n                if (agg[measure.field] < data[index][measure.field]) {\n                    agg[measure.field] = data[index][measure.field];\n                }\n            }\n            factdata.push(agg);\n        }\n        return factdata;\n    }\n\n    min(data, measure, breakdowns) {\n        let factdata = [];\n        if (breakdowns.length > 1) {\n            /** has series **/\n            let seriesData = d3.nest().key(d => d[breakdowns[1].field]).entries(data);\n            for (const series of seriesData) {\n                let calculateData = d3.nest().key(d => d[breakdowns[0].field]).entries(series.values);\n                let categoryData = calculateData.map(function (d) {\n                    let index = d3.scan(d.values, function (a, b) {\n                        if (a[measure.field] && b[measure.field])\n                            return a[measure.field] - b[measure.field];\n                    });\n                    if (index >= 0) {\n                        return d.values[index]\n                    } else {\n                        return d.values[0]\n                    }\n                });\n                factdata = factdata.concat(categoryData);\n            }\n\n        } else if (breakdowns.length === 1) {\n            /** no series **/\n            let calculateData = d3.nest().key(d => d[breakdowns[0].field]).entries(data);\n            factdata = calculateData.map(function (d) {\n                let index = d3.scan(d.values, function (a, b) {\n                    if (a[measure.field] && b[measure.field])\n                        return a[measure.field] - b[measure.field];\n                });\n                if (index >= 0) {\n                    return d.values[index]\n                } else {\n                    return d.values[0]\n                }\n            });\n        } else {\n            /** no breakdown **/\n            let agg = {};\n            agg[measure.field] = data[0][measure.field];\n            for (let index = 0; index < data.length; index++) {\n                if (agg[measure.field] > data[index][measure.field]) {\n                    agg[measure.field] = data[index][measure.field];\n                }\n            }\n            factdata.push(agg);\n        }\n        return factdata;\n    }\n\n    count(data, measure, breakdowns) {\n        let factdata = [];\n        if (breakdowns.length > 1) {\n            /** has series **/\n            let seriesData = d3.nest().key(d => d[breakdowns[1].field]).entries(data);\n            for (const series of seriesData) {\n                let calculateData = d3.nest().key(d => d[breakdowns[0].field]).entries(series.values);\n                let countData = new Array(calculateData.length).fill(0);\n                let categoryData = calculateData.map(function (d, i) {\n                    d.values.forEach(() => {\n                        countData[i] += 1;\n                    })\n                    let countRows = d.values[0];\n                    countRows['COUNT'] = countData[i];\n                    return countRows;\n                });\n                factdata = factdata.concat(categoryData);\n            }\n\n        } else if (breakdowns.length === 1) {\n            /** no series **/\n            let calculateData = d3.nest().key(d => d[breakdowns[0].field]).entries(data);\n            let countData = new Array(calculateData.length).fill(0);\n            factdata = calculateData.map(function (d, i) {\n                d.values.forEach(() => {\n                    countData[i] += 1\n                })\n                let countRows = d.values[0];\n                countRows['COUNT'] = countData[i];\n                return countRows;\n            });\n        } else {\n            /** no breakdown **/\n            let agg = { 'COUNT': data.length };\n            factdata.push(agg);\n        }\n        return factdata;\n    }\n}\n\nexport default Fact;\n","const ChartType = {\n    FREQUENT_PATTERN: 'frequent_pattern',\n    UNIVARIATE_OUTLIER: 'univariate_outlier',\n    MULTIVARIATE_OUTLIER: 'multivariate_outlier',\n    TREND: 'trend',\n    FORECASTING: 'forecasting',\n    UNIVARIATE_DISTRIBUTION: 'univariate_distribution',\n    MULTIVARIATE_DISTRIBUTION: 'multivariate_distribution',\n    SEASONALITY: 'seasonality',\n    CLUSTERING: 'clustering',\n    SIMILARITY:'similarity',\n    ORIGIN:'origin',\n    AUTOCORRELATION:'autocorrelation',\n    OUTSTANDING:'outstanding'\n}\n\nexport default ChartType","import * as d3 from 'd3';\n\nclass Chart {\n    constructor() {\n        this._container = document.createElement(\"div\");\n        this._width = 0;\n        this._height = 0;\n        this._table = [];\n        this._factdata = [];\n        this._subspace = [];\n        this._measure = [];\n        this._breakdown = [];\n        this._focus = [];\n        this._duration = 0;\n        this._showTooltip=false;\n        this._showSuggestion = false; // When true, it will show the suggestion that whether the chart supports the data.\n    }\n\n    container(value) {\n        if (!value) {\n            d3.select(this._container).selectAll(\"*\").remove();\n            return this._container;\n        }\n        this._container = value;\n    }\n   \n    style(value) {\n        if (!value) {\n            return this._style;\n        }\n        this._style = value;\n    }\n\n    size(value) {\n        if (!value) {\n            return this._size;\n        }\n        this._size = value;\n    }\n\n    width(value) {\n        if (!value) {\n            if (this._width !== 0) {\n                return this._width;\n            } else {\n                return 640;\n            }\n        }\n        this._width = value;\n    }\n\n    height(value) {\n        if (!value) {\n            if (this._height !== 0) {\n                return this._height;\n            } else {\n                return 400;\n            }\n        }\n        this._height = value;\n    }\n\n    table(value) {\n        if (!value) {\n            return this._table;\n        }\n        this._table = value;\n    }\n\n    factdata(value) {\n        if (!value) {\n            return this._factdata;\n        }\n        this._factdata = value;\n    }\n\n    subspace(value) {\n        if (!value) {\n            return this._subspace;\n        }\n        this._subspace = value;\n    }\n\n    measure(value) {\n        if (!value) {\n            return this._measure;\n        }\n        this._measure = value;\n    }\n\n    breakdown(value) {\n        if (!value) {\n            return this._breakdown;\n        }\n        this._breakdown = value;\n    }\n\n    focus(value) {\n        if (!value) {\n            return this._focus;\n        }\n        this._focus = value\n    }\n\n    duration(value) {\n        if (!value) {\n            return this._duration;\n        }\n        this._duration = value;\n    }\n\n    showSuggestion(value) {\n        if (!value) {\n            return this._showSuggestion;\n        }\n        this._showSuggestion = value;\n    }\n    showTooltip(value) {\n        if (!value) {\n            return this._showTooltip;\n        }\n        this._showTooltip = value;\n    }\n\n    toSVG() { }\n\n    toJPG() { }\n}\n\nexport default Chart;","import * as d3 from \"d3\";\r\nconst parseTime = (date) => {\r\n    if (d3.timeParse(\"%Y-%m-%d\")(date))\r\n        return d3.timeParse(\"%Y-%m-%d\")(date);\r\n    else if (d3.timeParse(\"%Y/%m/%d\")(date))\r\n        return d3.timeParse(\"%Y/%m/%d\")(date);\r\n    else if (d3.timeParse(\"%Y-%m\")(date))\r\n        return d3.timeParse(\"%Y-%m\")(date);\r\n    else if (d3.timeParse(\"%Y/%m\")(date))\r\n        return d3.timeParse(\"%Y/%m\")(date);\r\n    else if (d3.timeParse(\"%Y\")(date))\r\n        return d3.timeParse(\"%Y\")(date);\r\n    else if (d3.timeParse(\"%Y-%m-%dT%H:%M:%S.%fZ\")(date))\r\n        return d3.timeParse(\"%Y-%m-%dT%H:%M:%S.%fZ\")(date)\r\n    else if (d3.timeParse(\"%Y-%m-%d %H:%M:%S\")(date))\r\n        return d3.timeParse(\"%Y-%m-%d %H:%M:%S\")(date)\r\n    else if (d3.timeParse(\"%Y-%m-%d %H:%M:%S.%f\")(date))\r\n        return d3.timeParse(\"%Y-%m-%d %H:%M:%S.%f\")(date)\r\n    else \r\n    {   \r\n        return date\r\n    }\r\n\r\n}\r\nconst formatTick = (date) => {\r\n    if (d3.timeParse(\"%Y-%m-%d\")(date))\r\n        return d3.timeFormat(\"%Y-%-m-%-d\");\r\n\r\n    else if (d3.timeParse(\"%Y/%m/%d\")(date)){\r\n        return d3.timeFormat(\"%Y/%-m/%-d\")\r\n    }\r\n\r\n    else if (d3.timeParse(\"%Y-%m\")(date))\r\n        return d3.timeFormat(\"%Y%-m\")\r\n\r\n    else if (d3.timeParse(\"%Y/%m\")(date))\r\n        return d3.timeFormat(\"%Y/%m\")\r\n\r\n    else if (d3.timeParse(\"%Y\")(date))\r\n        return d3.timeFormat(\"%Y\")\r\n\r\n    else if (d3.timeParse(\"%Y-%m-%dT%H:%M:%S.%fZ\")(date))\r\n        return d3.timeFormat(\"%Y-%m-%dT%H:%M:%S.%fZ\")\r\n\r\n    else if (d3.timeParse(\"%Y-%m-%d %H:%M:%S\")(date))\r\n        return d3.timeFormat(\"%Y-%m-%d %H:%M:%S\")\r\n\r\n    else if (d3.timeParse(\"%Y-%m-%d %H:%M:%S.%f\")(date)){\r\n        return d3.timeFormat(\"%Y-%m-%d %H:%M:%S.%f\")\r\n    }\r\n\r\n    else{\r\n        return \"\"\r\n}\r\n}\r\nconst formatTicksCount = (date) => {\r\n    if (d3.timeParse(\"%Y-%m-%d\")(date))\r\n        return d3.timeDay\r\n    else if (d3.timeParse(\"%Y/%m/%d\")(date))\r\n        return d3.timeDay\r\n    else if (d3.timeParse(\"%Y-%m\")(date))\r\n        return d3.timeMonth\r\n    else if (d3.timeParse(\"%Y/%m\")(date))\r\n        return d3.timeMonth\r\n    else if (d3.timeParse(\"%Y\")(date))\r\n        return d3.timeYear\r\n    else if (d3.timeParse(\"%Y-%m-%dT%H:%M:%S.%fZ\")(date))\r\n        return d3.timeFormat(\"%Y-%m-%dT%H:%M:%S.%fZ\")\r\n    else if (d3.timeParse(\"%Y-%m-%d %H:%M:%S\")(date))\r\n        return d3.timeFormat(\"%Y-%m-%d %H:%M:%S\")\r\n    else if (d3.timeParse(\"%Y-%m-%d %H:%M:%S.%f\")(date))\r\n        return d3.timeFormat(\"%Y-%m-%d %H:%M:%S.%f\")\r\n}\r\nconst SECOND = 1000\r\nconst MINUTE = SECOND * 60\r\nconst HOUR = MINUTE * 60\r\nconst DAY = HOUR * 24\r\nconst WEEK = DAY * 7\r\nconst MONTH = DAY * 30\r\nconst YEAR = DAY * 365\r\nconst parseIntervalString = (interval) => {\r\n    if (interval / SECOND < 1) {\r\n        return interval + ' ms'\r\n    } else if (interval / MINUTE < 1) {\r\n        return (interval / SECOND).toFixed(1) + ' s'\r\n    } else if (interval / HOUR < 1) {\r\n        return (interval / MINUTE).toFixed(1) + ' min(s)'\r\n    } else if (interval / DAY < 1) {\r\n        return (interval / HOUR).toFixed(1) + ' hour(s)'\r\n    } else if (interval / WEEK < 1) {\r\n        return (interval / DAY).toFixed(1) + ' day(s)'\r\n    } else if (interval / MONTH < 1) {\r\n        return (interval / WEEK).toFixed(1) + ' week(s)'\r\n    } else if (interval / YEAR < 1) {\r\n        return (interval / MONTH).toFixed(1) + ' month(s)'\r\n    } else {\r\n        return (interval / YEAR).toFixed(1) + ' year(s)'\r\n    }\r\n}\r\nexport {parseTime,formatTick,formatTicksCount,parseIntervalString}","import * as d3 from 'd3';\nimport Chart from '../../chart';\nimport { parseTime, formatTick, formatTicksCount } from '../constant/timeConstant'\nconst ENGFONT = \"OPPOSans\";\nconst COLOR_AXIS = \"#000000\";\nconst COLOR_REGULAR = \"#808080\";\nconst COLOR_OUTLIER = \"#F72D35\"\nconst COLOR_GRID = \"#E6E6E6\";\nconst SERIES_COLORS = [\"#6C8EF2\", \"#E1944E\", \"#8B65BA\", \"#4B8384\"]\n\nclass MultivariateOutlier extends Chart {\n    constructor() {\n        super();\n        this._x = '';\n        this._y = '';\n    }\n\n    display() {\n        let factData = this.factdata()\n        let measure = this.measure();\n        let breakdown = this.breakdown();\n        let focus = this.focus();\n        // set data\n        factData = factData.sort((a, b) => parseTime(a[breakdown[0].field]) - parseTime(b[breakdown[0].field]))\n\n        let data = factData\n        if (focus.length === 0) return\n\n        // set the dimensions and margins of the graph\n        let chartSize = { width: 600, height: 360 }\n        let margin = {\n            \"top\": 15,\n            \"right\": 20,\n            \"bottom\": 15,\n            \"left\": 5\n        }\n        let tickSize = 10\n        let tickWidth = 2\n\n        let width = chartSize.width - margin.left - margin.right,\n            height = chartSize.height - margin.top - margin.bottom;\n\n        let containerSelector = this.container()\n        let svg = d3.select(this.container())\n            .append(\"svg\")\n            .attr(\"width\", chartSize.width)\n            .attr(\"height\", chartSize.height)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + (margin.left + 10) + \",\" + margin.top + \")\")\n            .attr(\"font-family\", ENGFONT);\n\n        let lineLayer = svg.append(\"g\").attr('class', 'lineLayer')\n\n        // set the ranges\n        let x = d3.scaleTime()\n            .range([30, width - 10])\n        // Scale the range of the data in the domains\n        x.domain(d3.extent(data, function (d) { return parseTime(d[breakdown[0].field]); }));\n        // .padding(0.1);\n\n        // add the x Axis\n        let format_TicksCount = formatTicksCount(data[0][breakdown[0].field]);\n        let tick_format = formatTick(data[0][breakdown[0].field]);\n        let axisX = d3.axisBottom(x).tickFormat(tick_format)\n        if (format_TicksCount === d3.timeYear) {\n            axisX.ticks(format_TicksCount)\n        }\n\n        let tooltipLayer = svg.append('g').attr('class', 'tooltip')\n        let tickValues = [];\n\n        let yAxisLayer = svg.append(\"g\").attr(\"class\", \"yAxis\")\n        let ys = []\n        let oneYLength = (height - 20 + 15) / focus[0][\"clusters\"].length\n        for (let outlier of focus) {\n            let start = Math.max(0, outlier.start - 1)\n            let end = Math.min(data.length - 1, outlier.end + 1)\n            tickValues.push(parseTime(data[start][breakdown[0].field]))\n            tickValues.push(parseTime(data[end][breakdown[0].field]))\n\n            for (let i = 0; i < outlier[\"clusters\"].length; i++) {\n                let cluster = outlier[\"clusters\"][i]\n                let y = d3.scaleLinear().range([oneYLength * (i + 1) - 15, oneYLength * i])\n\n                // lineLayer\n                lineLayer.append('g').selectAll('line.line')\n                    .data(y.ticks(5)).enter().append('line')\n                    .attr('x1', 30)\n                    .attr('x2', chartSize.width)\n                    .attr('y1', function (d) { return y(d) })\n                    .attr('y2', function (d) { return y(d) })\n                    .attr('stroke', COLOR_GRID)\n                    .attr('stroke-width', '2px')\n\n                tooltipLayer.append(\"rect\")\n                    .attr(\"width\", x(parseTime(data[end][breakdown[0].field])) - x(parseTime(data[start][breakdown[0].field])))\n                    .attr(\"height\", oneYLength - 15)\n                    .style(\"fill\", \"rgb(100%,\" + (1 - cluster[\"center\"][\"score\"]) * 100 + \"%,\" + (1 - cluster[\"center\"][\"score\"]) * 100 + \"%, 50%)\")\n                    .attr(\"x\", x(parseTime(data[start][breakdown[0].field])))\n                    .attr(\"y\", oneYLength * i)\n                if (i === outlier[\"clusters\"].length - 1) {\n                    tooltipLayer.append(\"rect\")\n                        .attr(\"width\", x(parseTime(data[end][breakdown[0].field])) - x(parseTime(data[start][breakdown[0].field])))\n                        .attr(\"height\", 10)\n                        .style(\"fill\", \"red\")\n                        .attr(\"x\", x(parseTime(data[start][breakdown[0].field])))\n                        .attr(\"y\", oneYLength * (i + 1) - 15)\n                }\n\n                y.domain([0, 1])\n                for (let other of cluster[\"other\"]) {\n                    y.domain(d3.extent([].concat(\n                        data.map(function (d) {\n                            return d[other[\"field\"]]\n                        })\n                    )))\n                    let lineGen = d3.line().curve(d3.curveMonotoneX)\n                        .x(function (d) {\n                            return x(parseTime(d[breakdown[0].field]));\n                        })\n                        .y(function (d) {\n                            return y(d[other[\"field\"]]);\n                        })\n                    lineLayer.append('path')\n                        .attr('d', lineGen(data))\n                        .attr('stroke', COLOR_REGULAR)\n                        .attr('stroke-width', '2px')\n                        .attr('fill', 'none')\n                        .attr('opacity', 0.5)\n                }\n\n                y.domain([0, 1])\n                let lineGen = d3.line().curve(d3.curveMonotoneX)\n                    .x(function (d) {\n                        return x(parseTime(d.x));\n                    })\n                    .y(function (d) {\n                        return y(d.y);\n                    })\n\n                let centerPts = []\n                for (let o = 0; o < cluster[\"center\"][\"value\"].length; o++) {\n                    centerPts.push({ x: data[start + o][breakdown[0].field], y: cluster[\"center\"][\"value\"][o] })\n                }\n                tooltipLayer.append(\"path\")\n                    .attr(\"d\", lineGen(centerPts))\n                    .attr(\"stroke\", SERIES_COLORS[i])\n                    .attr(\"stroke-width\", \"2px\")\n                    .attr(\"fill\", \"none\")\n\n                let forecastPts = []\n                forecastPts.push({ x: data[start][breakdown[0].field], y: cluster[\"center\"][\"value\"][0] })\n                for (let o = 0; o < cluster[\"center\"][\"forecast\"].length; o++) {\n                    forecastPts.push({ x: data[start + 1 + o][breakdown[0].field], y: cluster[\"center\"][\"forecast\"][o] })\n                }\n                forecastPts.push({ x: data[end][breakdown[0].field], y: cluster[\"center\"][\"value\"][cluster[\"center\"][\"value\"].length - 1] })\n\n                tooltipLayer.append(\"path\")\n                    .attr(\"d\", lineGen(forecastPts))\n                    .attr(\"stroke\", SERIES_COLORS[i])\n                    .attr(\"stroke-width\", \"2px\")\n                    .attr(\"stroke-dasharray\", \"6, 3\")\n                    .attr(\"fill\", \"none\")\n\n                if (outlier[\"clusters\"].length <= 3) {\n                    y.domain(d3.extent([].concat(\n                        data.map(function (d) {\n                            return d[cluster[\"other\"][0][\"field\"]]\n                        })\n                    )))\n                }\n                // add the y Axis\n                yAxisLayer.append(\"g\")\n                    .attr(\"transform\", \"translate(30, 0)\")\n                    .call(d3.axisLeft(y).ticks(5).tickFormat(function (d) {\n                        if ((d / 1000000) >= 1) {\n                            d = d / 1000000 + \"M\";\n                        } else if ((d / 1000) >= 1) {\n                            d = d / 1000 + \"K\";\n                        }\n                        return d;\n                    }))\n                    .call(g => {\n                        g.attr(\"font-size\", '10px')\n                        g.attr(\"font-weight\", 'light')\n                        g.attr(\"font-family\", ENGFONT)\n\n                        let domainD = g.selectAll(\".domain\").attr(\"d\");\n                        domainD = domainD.replace(\"M-6\", \"M-\" + (6 * chartSize.width / 640))\n                        domainD = domainD.replace(\"H-6\", \"H-\" + (6 * chartSize.width / 640))\n                        g.selectAll(\".domain\").attr(\"d\", domainD).attr(\"stroke-width\", tickWidth);\n                        g.selectAll(\".tick\")\n                            .select(\"line\")\n                            .attr(\"stroke\", COLOR_AXIS)\n                            .attr(\"stroke-width\", tickWidth)\n                            .attr(\"x2\", -6 * chartSize.width / 640);\n\n                        g.selectAll(\"text\")\n                            .attr(\"x\", -9 * chartSize.width / 640);\n                    });\n\n                // add y axis label\n                let title = yAxisLayer.append(\"text\")\n                    .attr(\"transform\", \"rotate(-90)\")\n                    .attr(\"y\", -5)\n                    .attr(\"x\", 0 - (oneYLength * (2 * i + 1) - 15) / 2)\n                    .style(\"text-anchor\", \"middle\")\n                    .style(\"font-size\", \"10px\")\n                    .text(cluster[\"other\"][0][\"field\"])\n                yAxisLayer.append(\"rect\")\n                    .attr(\"transform\", \"rotate(-90)\")\n                    .style(\"text-anchor\", \"middle\")\n                    .attr(\"x\", title.node().getBBox().x)\n                    .attr(\"y\", title.node().getBBox().y)\n                    .attr(\"width\", title.node().getBBox().width + 2)\n                    .attr(\"height\", title.node().getBBox().height)\n                    .attr(\"fill\", SERIES_COLORS[i])\n                title.node().remove()\n                yAxisLayer.append(\"text\")\n                    .attr(\"transform\", \"rotate(-90)\")\n                    .attr(\"y\", -5)\n                    .attr(\"x\", 0 - (oneYLength * (2 * i + 1) - 15) / 2)\n                    .style(\"text-anchor\", \"middle\")\n                    .style(\"font-size\", \"10px\")\n                    .text(cluster[\"other\"][0][\"field\"])\n                ys.push(y)\n            }\n\n            let tooltip = tooltipLayer.append(\"g\")\n            let tooltipText = tooltip.append(\"text\")\n                .attr(\"font-size\", \"10px\")\n                .attr(\"font-family\", ENGFONT)\n                .attr(\"stroke\", COLOR_OUTLIER)\n            tooltipText.append(\"tspan\")\n                .text(\"Anomaly score: \" + outlier.score.toFixed(4))\n                .attr(\"dy\", tooltipText.selectAll(\"tspan\").node().getBBox().height * 0.9)\n            let textWidth = tooltip.node().getBBox().width;\n            let textHeight = tooltip.node().getBBox().height;\n            let textY = height\n\n            let outlierX = (x(parseTime(data[start][breakdown[0].field])) + x(parseTime(data[end + 1][breakdown[0].field]))) / 2\n            tooltip.append(\"image\")\n                .attr(\"xlink:href\", \"./alert.svg\")\n                .attr(\"width\", \"15px\")\n                .attr(\"height\", \"13px\")\n                .attr(\"x\", (outlierX - (textWidth + 17) / 2))\n                .attr(\"y\", textY + 2);\n            tooltipText.attr(\"width\", textWidth)\n                .attr(\"height\", textHeight)\n                .attr(\"x\", (outlierX - (textWidth + 17) / 2) + 17)\n                .attr(\"y\", textY);\n        }\n\n        axisX.tickValues(tickValues)\n\n\n        svg.append(\"g\")\n            .attr(\"class\", \"xAxis\")\n            .attr(\"transform\", \"translate(0,\" + (height - 20) + \")\")\n            .call(axisX)\n            .attr(\"font-family\", ENGFONT)\n            .call(g => {\n                g.attr(\"font-size\", tickSize);\n                g.attr(\"font-family\", ENGFONT);\n\n                let domainD = g.selectAll(\".domain\").attr(\"d\");\n                domainD = domainD.replace(\"6V\", (6 * chartSize.height / 320) + \"V\")\n                domainD = domainD.replace(\"V6\", \"V\" + (6 * chartSize.height / 320))\n                g.selectAll(\".domain\").attr(\"d\", domainD).attr(\"stroke-width\", tickWidth);\n                g.selectAll(\".tick\")\n                    .selectAll(\"line\")\n                    .attr(\"stroke\", COLOR_AXIS)\n                    .attr(\"stroke-width\", tickWidth)\n                    .attr(\"y2\", 6 * chartSize.height / 320);\n\n                g.selectAll(\"text\")\n                    .attr(\"y\", 9 * chartSize.height / 320)\n\n                let nodes = g.selectAll(\"text\").nodes()\n                d3.select(nodes[0]).attr(\"x\", - nodes[0].getBBox().width / 2 + 5)\n                d3.select(nodes[1]).attr(\"x\", nodes[0].getBBox().width / 2 - 5)\n\n            });\n\n        // let tableContainer = d3.select(containerSelector).append(\"div\")\n        //     .style(\"position\", \"absolute\")\n        //     .style(\"left\", \"50px\")\n        //     .style(\"top\", oneYLength * (focus[0][\"clusters\"].length + 1))\n        //     .style(\"font-size\", \"8px\")\n        //     .style(\"font-family\", ENGFONT)\n        //     .style(\"border\", \"1px solid #000000\")\n        //     .style(\"overflow-y\", \"auto\")\n        //     .style(\"height\", \"100px\")\n        // let clusterTable = tableContainer.append(\"table\")\n        //     .style(\"border-collapse\", \"collapse\")\n        //     .style(\"border-spacing\", 0)\n        //     .attr(\"width\", width)\n        //     .style(\"position\", \"relative\")\n        // let headerTd = clusterTable.append(\"thead\")\n        //     .style(\"background\", \"#eeee\")\n        //     .style(\"position\", \"sticky\")\n        //     .style(\"top\", 0)\n        //     .append(\"tr\")\n        //     .style(\"table-layout\", \"fixed\")\n        //     .selectAll(\"th\")\n        //     .data([\"Rank\", \"Value\", \"Lane\", \"Cluster\", \"Anomaly score\"])\n        //     .enter()\n        //     .append(\"th\")\n        //     .style(\"text-align\", \"center\")\n        //     .style(\"padding\", \"5px 15px\")\n        //     .text(function (d) {\n        //         return d\n        //     })\n        // let tdWidth = headerTd.node().getBoundingClientRect().width + 30 // 30: padding\n        // let clusterRows = clusterTable.append(\"tbody\")\n        // var count = 1;\n        // for (let i = 0; i < focus[0][\"clusters\"].length; i++) {\n        //     let cluster = focus[0][\"clusters\"][i]\n        //     let row = clusterRows.append(\"tr\")\n        //         .style(\"table-layout\", \"fixed\")\n        //     for (let other of cluster[\"other\"]) {\n        //         let row = clusterRows.append(\"tr\")\n        //             .style(\"text-align\", \"center\")\n        //         row.append(\"td\")\n        //             .text(count)\n        //             .style(\"text-align\", \"center\")\n        //         count++\n        //         row.append(\"td\")\n        //             .style(\"text-align\", \"center\")\n        //             .text(other[\"field\"])\n        //         let lane = row.append(\"td\")\n        //             .style(\"text-align\", \"center\")\n        //             .append(\"svg\")\n        //             .attr(\"width\", tdWidth)\n        //             .attr(\"height\", 12)\n        //             .append(\"g\")\n        //         for (let j = 0; j < focus[0][\"clusters\"].length; j++) {\n        //             lane.append(\"rect\")\n        //                 .style(\"width\", 10)\n        //                 .style(\"height\", 10)\n        //                 .style(\"fill\", SERIES_COLORS[j])\n        //                 .style(\"x\", tdWidth / 2 - focus[0][\"clusters\"].length * 5 + 10 * j)\n        //                 .style(\"y\", 0)\n        //         }\n        //         lane.append(\"circle\")\n        //             .attr(\"cx\", tdWidth / 2 - focus[0][\"clusters\"].length * 5 + 5 + 10 * i)\n        //             .attr(\"cy\", 5)\n        //             .attr(\"r\", \"3px\")\n        //             .attr(\"stroke\", \"black\")\n        //             .attr(\"fill\", \"black\")\n        //         row.append(\"td\")\n        //             .style(\"text-align\", \"center\")\n        //             .text(\"C\" + i)\n        //         row.append(\"td\")\n        //             .style(\"text-align\", \"center\")\n        //             .text(other[\"score\"].toFixed(2))\n        //     }\n        // }\n        // tableContainer.style(\"height\", Math.min(15 * count + 15, 100) + \"px\")\n        return svg;\n    }\n}\n\n// const parseTime = (date) => {\n//     if (d3.timeParse(\"%Y-%m-%d\")(date))\n//         return d3.timeParse(\"%Y-%m-%d\")(date);\n//     else if (d3.timeParse(\"%Y/%m/%d\")(date))\n//         return d3.timeParse(\"%Y/%m/%d\")(date);\n//     else if (d3.timeParse(\"%Y-%m\")(date))\n//         return d3.timeParse(\"%Y-%m\")(date);\n//     else if (d3.timeParse(\"%Y/%m\")(date))\n//         return d3.timeParse(\"%Y/%m\")(date);\n//     else if (d3.timeParse(\"%Y\")(date))\n//         return d3.timeParse(\"%Y\")(date);\n//     else if (d3.timeParse(\"%Y-%m-%dT%H:%M:%S.%fZ\")(date))\n//         return d3.timeParse(\"%Y-%m-%dT%H:%M:%S.%fZ\")(date)\n//     else if (d3.timeParse(\"%Y-%m-%d %H:%M:%S\")(date))\n//         return d3.timeParse(\"%Y-%m-%d %H:%M:%S\")(date)\n//     else return date\n// }\n// const formatTick = (date) => {\n//     if (d3.timeParse(\"%Y-%m-%d\")(date))\n//         return d3.timeFormat(\"%Y-%-m-%-d\")\n//     else if (d3.timeParse(\"%Y/%m/%d\")(date))\n//         return d3.timeFormat(\"%Y/%-m/%-d\")\n//     else if (d3.timeParse(\"%Y-%m\")(date))\n//         return d3.timeFormat(\"%Y-%m\")\n//     else if (d3.timeParse(\"%Y/%m\")(date))\n//         return d3.timeFormat(\"%Y/%m\")\n//     else if (d3.timeParse(\"%Y\")(date))\n//         return d3.timeFormat(\"%Y\")\n//     else if (d3.timeParse(\"%Y-%m-%dT%H:%M:%S.%fZ\")(date))\n//         return d3.timeFormat(\"%Y/%m/%d/%H\")\n//     else if (d3.timeParse(\"%Y-%m-%d %H:%M:%S\")(date))\n//         return d3.timeFormat(\"%Y/%m/%d/%H\")\n//     else {\n//         return \"\"\n//     }\n// }\n\n// const formatTicksCount = (date) => {\n//     if (d3.timeParse(\"%Y-%m-%d\")(date))\n//         return d3.timeDay\n//     else if (d3.timeParse(\"%Y/%m/%d\")(date))\n//         return d3.timeDay\n//     else if (d3.timeParse(\"%Y-%m\")(date))\n//         return d3.timeMonth\n//     else if (d3.timeParse(\"%Y/%m\")(date))\n//         return d3.timeMonth\n//     else if (d3.timeParse(\"%Y\")(date))\n//         return d3.timeYear\n// }\n\nexport default MultivariateOutlier;","export function getPosition() {\r\n    var posX = 0, posY = 0;\r\n    var event = event || window.event;\r\n    if (event.pageX || event.pageY) {\r\n        posX = event.pageX;\r\n        posY = event.pageY;\r\n    } else if (event.clientX || event.clientY) {\r\n        posX = event.clientX + document.documentElement.scrollLeft + document.body.scrollLeft;\r\n        posY = event.clientY + document.documentElement.scrollTop + document.body.scrollTop;\r\n    }\r\n    return {posX:posX,posY:posY}\r\n}","import * as d3 from 'd3';\r\nimport Chart from '../../chart';\r\nimport { tooltipContainerId } from '../constant/getContainer';\r\nimport { getPosition } from '../constant/getPosition';\r\nimport { parseTime, formatTick, formatTicksCount } from '../constant/timeConstant'\r\nconst ENGFONT = \"OPPOSans\";\r\nconst COLOR_AXIS = \"#000000\";\r\nconst COLOR_REGULAR = \"#6C8EF2\";\r\nconst COLOR_STD = \"#8ED9AB\";\r\nconst COLOR_TEXT = \"#000000\";\r\nconst TRANSPARENCY_STD = 0.3;\r\nconst COLOR_GRID = \"#E6E6E6\";\r\nconst TICK_WIDTH = 2;\r\n\r\nclass UnivariateDistribution extends Chart {\r\n    constructor() {\r\n        super();\r\n        this._x = '';\r\n        this._y = '';\r\n    }\r\n    display() {\r\n        /**\r\n         * The main drawing function\r\n         */\r\n        //---------------parse fact-------------------------\r\n        let factResult = this.parseFact()\r\n        let data = factResult._data\r\n        let measure = factResult._measure\r\n        let breakdown = factResult._breakdown\r\n        let focus = factResult._focus\r\n        let measureName = factResult._measureName\r\n        if (focus.length === 0) return\r\n        if (breakdown[1] && breakdown[1].field) return;\r\n\r\n        //---------------init chart size--------------------\r\n        let chartResult = this.setChartStandard()\r\n        let chartSize = chartResult._chartSize\r\n        let width = chartResult._width\r\n        let height = chartResult._height\r\n        let margin = chartResult._margin\r\n\r\n        //------------------init---------------------------\r\n        let containerSelector = tooltipContainerId\r\n        //init svg\r\n        let svg = this.initSvg(chartSize, margin)\r\n        //init layer\r\n        let tooltipLayer = svg.append('g').attr('class', 'tooltip');\r\n\r\n        //------------------draw x axis-------------------\r\n        let xAxisResult = this.drawXAxis(svg, data, breakdown, width, height, chartSize)\r\n        let x = xAxisResult._x\r\n        let axisX = xAxisResult._axisX\r\n        let tick_format = xAxisResult._tick_format\r\n\r\n        //------------------draw y axis-------------------\r\n        let y = this.drawYAxis(svg, data, measure, chartSize, height)\r\n\r\n        //------------------draw univariate distribution---------------\r\n        let xLeft = x(parseTime(data[0][breakdown[0].field]));\r\n        let xRight = x(parseTime(data[data.length - 1][breakdown[0].field]));\r\n        let uniDistributionResult = this.drawUnivariateDistribution(y, data, xLeft, xRight, breakdown, focus, svg, tooltipLayer, axisX)\r\n        let mean = uniDistributionResult._mean\r\n        let x_mean = uniDistributionResult._x_mean\r\n        let y_mean = uniDistributionResult._y_mean\r\n        tooltipLayer = uniDistributionResult._tooltipLayer\r\n\r\n        //-------------------draw original line--------------------\r\n        let lineLayer = svg.append(\"g\").attr('class', 'lineLayer')\r\n        let originLineResult = this.drawBackLine(x, y, data, lineLayer, breakdown, measureName, width)\r\n        let rawPath = originLineResult._rawPath\r\n        let lineGen = originLineResult._lineGen\r\n\r\n        //--------------------draw insight text--------------------\r\n        this.drawInsightText(svg, y, xLeft, xRight, mean, x_mean, y_mean)\r\n        if (this._showTooltip) {\r\n            renderDetailValue(containerSelector, rawPath, x, y, height, data, breakdown, measureName, tick_format, tooltipLayer)\r\n        }\r\n        return svg;\r\n    }\r\n    parseFact() {\r\n        /**\r\n         * Parse fact json\r\n         * return:The contents of each field in fact\r\n         */\r\n        let factData = this.factdata()\r\n        let measure = this.measure();\r\n        let breakdown = this.breakdown();\r\n        let focus = this.focus();\r\n        // set data\r\n        let data = factData\r\n        let measureName = measure[0].aggregate === 'count' ? \"COUNT\" : measure[0].field\r\n        return { _data: data, _measure: measure, _breakdown: breakdown, _focus: focus, _measureName: measureName }\r\n    }\r\n    setChartStandard() {\r\n        /** \r\n         * calculate size of the chart\r\n         * return chart size parameters\r\n         */\r\n        // set the dimensions and margins of the graph\r\n        let chartSize = { width: 600, height: 280 }\r\n        let margin = {\r\n            \"top\": 15,\r\n            \"right\": 20,\r\n            \"bottom\": 15,\r\n            \"left\": 20\r\n        }\r\n        let width = chartSize.width - margin.left - margin.right,\r\n            height = chartSize.height - margin.top - margin.bottom;\r\n        return { _width: width, _height: height, _chartSize: chartSize, _margin: margin }\r\n    }\r\n    initSvg(chartSize, margin) {\r\n        /**\r\n         * Initialize SVG based on the drawing area size\r\n         * return :svg \r\n         */\r\n        let svg = d3.select(this.container())\r\n            .append(\"svg\")\r\n            .attr(\"width\", chartSize.width)\r\n            .attr(\"height\", chartSize.height)\r\n            .append(\"g\")\r\n            .attr(\"transform\", \"translate(\" + (margin.left + 10) + \",\" + margin.top + \")\")\r\n            .attr(\"font-family\", ENGFONT);\r\n        return svg\r\n    }\r\n    drawXAxis(svg, data, breakdown, width, height, chartSize) {\r\n        /**\r\n         * Draw the X axis\r\n         */\r\n        // set the ranges\r\n        let x = d3.scaleTime()\r\n            .range([0, width - 20])\r\n        // Scale the range of the data in the domains\r\n        x.domain(d3.extent(data, function (d) { return parseTime(d[breakdown[0].field]); }));\r\n        // add the x Axis\r\n        let format_TicksCount = formatTicksCount(data[0][breakdown[0].field]);\r\n        let tick_format = formatTick(data[0][breakdown[0].field]);\r\n        let axisX = d3.axisBottom(x).tickFormat(tick_format)\r\n        if (format_TicksCount === d3.timeYear) {\r\n            axisX.ticks(format_TicksCount)\r\n        }\r\n        svg.append(\"g\")\r\n            .attr(\"class\", \"xAxis\")\r\n            .attr(\"transform\", \"translate(0,\" + (height - 20) + \")\")\r\n            .call(axisX)\r\n            .call(g => {\r\n                g.attr(\"font-size\", '10px');\r\n                g.attr(\"font-family\", ENGFONT);\r\n                g.attr(\"font-weight\", 'light')\r\n\r\n                let domainD = g.selectAll(\".domain\").attr(\"d\");\r\n                domainD = domainD.replace(\"6V\", (6 * chartSize.height / 320) + \"V\")\r\n                domainD = domainD.replace(\"V6\", \"V\" + (6 * chartSize.height / 320))\r\n                g.selectAll(\".domain\").attr(\"d\", domainD).attr(\"stroke-width\", TICK_WIDTH);\r\n                g.selectAll(\".tick\")\r\n                    .selectAll(\"line\")\r\n                    .attr(\"stroke\", COLOR_AXIS)\r\n                    .attr(\"stroke-width\", TICK_WIDTH)\r\n                    .attr(\"y2\", 5);\r\n\r\n                g.selectAll(\"text\")\r\n                    .attr(\"y\", 10)\r\n                // .attr(\"transform\", 'rotate(-20)')\r\n                // .attr(\"style\", 'text-anchor: end')\r\n            });\r\n        return { _x: x, _axisX: axisX, _tick_format: tick_format }\r\n    }\r\n    drawYAxis(svg, data, measure, chartSize, height) {\r\n        /**\r\n         * Draw the Y axis\r\n         */\r\n        // .padding(0.1);\r\n        let y = d3.scaleLinear()\r\n            .range([height - 20, 0]);\r\n        y.domain(d3.extent([].concat(\r\n            // lower boundary minus margin\r\n            data.map(function (d) { return d[measure[0].field] * 0.85 }),\r\n            // upper boundary add margin\r\n            data.map(function (d) { return d[measure[0].field] * 1.15 })\r\n        )));\r\n        // add the y Axis\r\n        svg.append(\"g\")\r\n            .attr(\"class\", \"yAxis\")\r\n            // .attr(\"transform\", `translate(,0)`)\r\n            .call(d3.axisLeft(y).ticks(5).tickFormat(function (d) {\r\n                if ((d / 1000000) >= 1) {\r\n                    d = d / 1000000 + \"M\";\r\n                } else if ((d / 1000) >= 1) {\r\n                    d = d / 1000 + \"K\";\r\n                }\r\n                return d;\r\n            }))\r\n            .call(g => {\r\n                g.attr(\"font-size\", '10px')\r\n                g.attr(\"font-weight\", 'light')\r\n                g.attr(\"font-family\", ENGFONT)\r\n                let domainD = g.selectAll(\".domain\").attr(\"d\");\r\n                domainD = domainD.replace(\"M-6\", \"M-\" + (6 * chartSize.width / 640))\r\n                domainD = domainD.replace(\"H-6\", \"H-\" + (6 * chartSize.width / 640))\r\n                g.selectAll(\".domain\").attr(\"d\", domainD).attr(\"stroke-width\", TICK_WIDTH);\r\n                g.selectAll(\".tick\")\r\n                    .select(\"line\")\r\n                    .attr(\"stroke\", COLOR_AXIS)\r\n                    .attr(\"stroke-width\", TICK_WIDTH)\r\n                    .attr(\"x2\", -5);\r\n\r\n                g.selectAll(\"text\")\r\n                    .attr(\"x\", -10);\r\n            })\r\n        return y\r\n    }\r\n    drawBackLine(x, y, data, lineLayer, breakdown, measureName, width) {\r\n        /**\r\n         * draw series line and back grid\r\n         */\r\n        lineLayer.append('g').selectAll('line.line')\r\n            .data(y.ticks(5)).enter().append('line')\r\n            .attr('x1', 0)\r\n            .attr('x2', width - 20)\r\n            .attr('y1', function (d) { return y(d) })\r\n            .attr('y2', function (d) { return y(d) })\r\n            .attr('stroke', COLOR_GRID)\r\n            .attr('stroke-width', '2px')\r\n\r\n        let lineGen = d3.line().curve(d3.curveMonotoneX)\r\n            .x(function (d) {\r\n                return x(parseTime(d[breakdown[0].field]));\r\n            })\r\n            .y(function (d) {\r\n                return y(d[measureName]);\r\n            })\r\n        let rawPath = lineLayer.append('path')\r\n            .attr('d', lineGen(data))\r\n            .attr('stroke', COLOR_REGULAR)\r\n            .attr('stroke-width', '3px')\r\n            .attr('fill', 'none')\r\n        return { _rawPath: rawPath, _lineGen: lineGen }\r\n    }\r\n    drawUnivariateDistribution(y, data, xLeft, xRight, breakdown, focus, svg, tooltipLayer, axisX) {\r\n        let tickValues = [];\r\n        let std = [0, 0];\r\n        let mean = 0;\r\n        let x_mean = 0;\r\n        let y_mean = 0;\r\n\r\n        for (let distr of focus) {\r\n            let yVal = y(distr.value);\r\n            if (distr.name === \"mean\") {\r\n                mean = distr.value;\r\n                x_mean = xRight;\r\n                y_mean = yVal;\r\n\r\n            } else if (distr.name === \"mean-2std\") {\r\n                std[0] = distr.value;\r\n            } else if (distr.name === \"mean+2std\") {\r\n                std[1] = distr.value;\r\n            } else if (distr.name === \"min\") {\r\n                tooltipLayer.append('line')\r\n                    .attr('x1', xLeft)\r\n                    .attr('y1', y(distr.value))\r\n                    .attr('x2', xRight)\r\n                    .attr('y2', y(distr.value))\r\n                    .attr('stroke-width', '1px')\r\n                    .attr('stroke', 'black')\r\n                    .attr('stroke-dasharray', '6px');\r\n\r\n                let tooltip = tooltipLayer.append(\"text\")\r\n                    .attr(\"font-size\", '10px')\r\n                    .attr(\"font-family\", ENGFONT)\r\n                    .attr(\"fill\", COLOR_TEXT);\r\n                tooltip.append(\"tspan\")\r\n                    .text(\"Min: \" + distr.value)\r\n                    .attr(\"dy\", tooltip.selectAll(\"tspan\").node().getBBox().height * 0.9);\r\n                let textWidth = tooltip.node().getBBox().width;\r\n                let textHeight = tooltip.node().getBBox().height * 1.5;\r\n                tooltip.attr(\"width\", textWidth)\r\n                    .attr(\"height\", textHeight)\r\n                    .attr(\"x\", xRight - textWidth)\r\n                    .attr(\"y\", yVal - textHeight);\r\n            } else if (distr.name === \"max\") {\r\n                //std[1] = Math.min(distr.value, std[1])\r\n                tooltipLayer.append('line')\r\n                    .attr('x1', xLeft)\r\n                    .attr('y1', y(distr.value))\r\n                    .attr('x2', xRight)\r\n                    .attr('y2', y(distr.value))\r\n                    .attr('stroke-width', '1px')\r\n                    .attr('stroke', 'black')\r\n                    .attr('stroke-dasharray', '6px');\r\n\r\n                let tooltip = tooltipLayer.append(\"text\")\r\n                    .attr(\"font-size\", '10px')\r\n                    .attr(\"font-family\", ENGFONT)\r\n                    .attr(\"fill\", COLOR_TEXT);\r\n                tooltip.append(\"tspan\")\r\n                    .text(\"Max: \" + distr.value)\r\n                    .attr(\"dy\", tooltip.selectAll(\"tspan\").node().getBBox().height * 0.9);\r\n                let textWidth = tooltip.node().getBBox().width;\r\n                let textHeight = tooltip.node().getBBox().height * 1.5;\r\n                tooltip.attr(\"width\", textWidth)\r\n                    .attr(\"height\", textHeight)\r\n                    .attr(\"x\", xRight - textWidth)\r\n                    .attr(\"y\", yVal - textHeight);\r\n            }\r\n        }\r\n        // std color block\r\n        svg.append('rect')\r\n            .attr('x', 0)\r\n            .attr('y', y(std[1]))\r\n            .attr('width', xRight - xLeft)\r\n            .attr(\"height\", y(std[0]) - y(std[1]))\r\n            .attr('fill', COLOR_STD)\r\n            .attr('opacity', TRANSPARENCY_STD);\r\n\r\n        tickValues.push(parseTime(data[10][breakdown[0].field]))\r\n        tickValues.push(parseTime(data[data.length - 10][breakdown[0].field]))\r\n        axisX.tickValues(tickValues)\r\n        return { _tooltipLayer: tooltipLayer, _mean: mean, _x_mean: x_mean, _y_mean: y_mean }\r\n    }\r\n    drawInsightText(svg, y, xLeft, xRight, mean, x_mean, y_mean) {\r\n        let tooltipLayer2 = svg.append('g').attr('class', 'tooltip').style('background-color', 'white').style('opacity', 0.8);\r\n        tooltipLayer2.append('line')\r\n            .attr('x1', xLeft)\r\n            .attr('y1', y(mean))\r\n            .attr('x2', xRight)\r\n            .attr('y2', y(mean))\r\n            .attr('stroke-width', '1px')\r\n            .attr('stroke', 'black');\r\n        let tooltip = tooltipLayer2.append(\"text\")\r\n            .attr(\"font-size\", '10px')\r\n            .attr(\"font-family\", ENGFONT)\r\n            .attr(\"fill\", COLOR_TEXT);\r\n        tooltip.append(\"tspan\")\r\n            .text(\"Avg: \" + mean)\r\n            .attr(\"dy\", tooltip.selectAll(\"tspan\").node().getBBox().height * 0.9);\r\n\r\n        let textWidth = tooltip.node().getBBox().width;\r\n        let textHeight = tooltip.node().getBBox().height * 1.5;\r\n\r\n        svg.append('rect')\r\n            .attr('x', x_mean - textWidth)\r\n            .attr('y', y_mean - textHeight * 1.15)\r\n            .attr('width', textWidth)\r\n            .attr(\"height\", textHeight)\r\n            .attr('fill', 'white')\r\n            .attr('opacity', 0.8);\r\n\r\n        tooltip.attr(\"width\", textWidth)\r\n            .attr(\"height\", textHeight)\r\n            .attr(\"x\", x_mean - textWidth)\r\n            .attr(\"y\", y_mean - textHeight);\r\n\r\n\r\n        let tooltipLayer3 = svg.append('g').attr('class', 'tooltip').style('background-color', 'white').style('opacity', 0.8);\r\n        let tooltip2 = tooltipLayer3.append(\"text\")\r\n            .attr(\"font-size\", '10px')\r\n            .attr(\"font-family\", ENGFONT)\r\n            .attr(\"fill\", COLOR_TEXT);\r\n        tooltip2.append(\"tspan\")\r\n            .text(\"Avg: \" + mean)\r\n            .attr(\"dy\", tooltip2.selectAll(\"tspan\").node().getBBox().height * 0.9);\r\n\r\n        tooltip2.attr(\"width\", textWidth)\r\n            .attr(\"height\", textHeight)\r\n            .attr(\"x\", x_mean - textWidth)\r\n            .attr(\"y\", y_mean - textHeight);\r\n    }\r\n}\r\nlet renderDetailValue = (containerSelector, rawPath, x, y, height,\r\n    data, breakdown, measureName, tick_format, tooltipLayer) => {\r\n    let detailValueTooltip = d3.select(containerSelector)\r\n        .append(\"div\")\r\n        .attr(\"id\", \"value-tooltip\")\r\n        .style(\"z-index\", 2000)\r\n        .style(\"width\", \"95px\")\r\n        .style(\"width\", \"fit-content\")\r\n        .style(\"opacity\", 0)\r\n        .style(\"position\", \"absolute\")\r\n        .style(\"pointer-events\", \"none\")\r\n        .style(\"border-radius\", \"4px\")\r\n        .style(\"background\", \"#FFFFFF\")\r\n        .style(\"box-shadow\", \"0 0 5px #888888\")\r\n        .style(\"padding\", \"5px\")\r\n    let detailValueTitle = detailValueTooltip.append(\"span\")\r\n        .style(\"font\", `9px ${ENGFONT}`)\r\n        .style(\"font-weight\", \"bold\")\r\n        .style(\"display\", \"block\")\r\n        .style(\"color\", \"#000000\")\r\n    let detailValueContent = detailValueTooltip.append(\"svg\")\r\n        .attr(\"width\", \"95px\")\r\n        .attr(\"height\", \"30px\")\r\n    let detailValueColor = detailValueContent.append(\"circle\")\r\n        .attr(\"r\", 4)\r\n        .attr(\"cx\", \"5px\")\r\n        .attr(\"cy\", \"12px\")\r\n    let detailValueText = detailValueContent.append(\"text\")\r\n        .style(\"font\", `8px ${ENGFONT}`)\r\n        .style(\"color\", \"#000000\")\r\n        .attr(\"x\", \"14px\")\r\n        .attr(\"y\", \"14px\")\r\n\r\n    rawPath.on(\"mouseover\", function (d) {\r\n        detailValueTooltip.transition()\r\n            .duration(200)\r\n            .style(\"opacity\", .9)\r\n        detailValue.transition()\r\n            .duration(200)\r\n            .style(\"opacity\", 1)\r\n    })\r\n        .on(\"mouseout\", function (d) {\r\n            // If the mouse is exactly on the data point, \r\n            // then the mouse will on the circle instead of the path\r\n            // So here we should keep the tooltip shown when the mouse is still on the circle\r\n            let currentElement = document.elementFromPoint(d3.event.pageX, d3.event.pageY)\r\n            if (currentElement !== detailValueCircle.node()) {\r\n                detailValueTooltip.transition()\r\n                    .duration(500)\r\n                    .style(\"opacity\", 0)\r\n                detailValue.transition()\r\n                    .duration(500)\r\n                    .style(\"opacity\", 0)\r\n            }\r\n        })\r\n        .on(\"mousemove\", function (d) {\r\n            let result = getPosition()\r\n            let x0 = x.invert(d3.mouse(this)[0])\r\n            let currentIndex = bisectDate(data, x0, 1)\r\n            let time0 = parseTime(data[currentIndex - 1][breakdown[0].field])\r\n            let time1 = parseTime(data[currentIndex][breakdown[0].field])\r\n            let currentTime = x0 - time0 > time1 - x0 ? time1 : time0\r\n            let currentValue = currentTime === time0 ? data[currentIndex - 1][measureName] : data[currentIndex][measureName]\r\n            let title = tick_format(currentTime)\r\n            detailValueTooltip.style(\"left\", (result.posX + 30) + \"px\")\r\n                .style(\"top\", (result.posY + 20) + \"px\")\r\n            detailValueTitle.html(title)\r\n            detailValueColor.style(\"fill\", COLOR_REGULAR)\r\n            detailValueText.html(measureName + \": \" + currentValue.toFixed(2))\r\n\r\n            detailValueLine.attr(\"x1\", x(currentTime))\r\n            detailValueLine.attr(\"x2\", x(currentTime))\r\n            detailValueCircle.attr(\"cx\", x(currentTime))\r\n            detailValueCircle.attr(\"cy\", y(currentValue))\r\n            detailValueCircle.attr(\"stroke\", COLOR_REGULAR)\r\n        })\r\n\r\n    let bisectDate = d3.bisector(function (d) { return parseTime(d[breakdown[0].field]) }).left\r\n    let detailValue = tooltipLayer.append(\"g\")\r\n        .style(\"opacity\", 0)\r\n    let detailValueLine = detailValue.append(\"line\")\r\n        .attr(\"y1\", height - 20)\r\n        .attr(\"y2\", 0)\r\n        .attr(\"stroke-width\", \"2px\")\r\n        .attr(\"stroke\", COLOR_GRID)\r\n        .attr(\"stroke-dasharray\", \"6, 3\")\r\n    let detailValueCircle = detailValue.append(\"circle\")\r\n        .attr(\"r\", 3)\r\n        .attr(\"fill\", \"#FFFFFF\")\r\n        .attr(\"stroke-width\", \"2\")\r\n        .style(\"box-shadow\", \"0 0 5px #888888\")\r\n        .on(\"mouseover\", function (d) {\r\n            // FIXME: This is a nit\r\n            // Even mouse is not on the path, the tooltip will still be shown \r\n            // but the error area is small\r\n            detailValueTooltip.transition()\r\n                .duration(200)\r\n                .style(\"opacity\", .9)\r\n            detailValue.transition()\r\n                .duration(200)\r\n                .style(\"opacity\", 1)\r\n        }).on(\"mouseout\", function (d) {\r\n            // If the mouse is exactly on the data point, \r\n            // then the mouse will on the circle instead of the path\r\n            // So here we should hide all the tooltip when moving mouse out of the circle\r\n            detailValueTooltip.transition()\r\n                .duration(500)\r\n                .style(\"opacity\", 0)\r\n            detailValue.transition()\r\n                .duration(500)\r\n                .style(\"opacity\", 0)\r\n        })\r\n}\r\nexport default UnivariateDistribution;","export var tooltipContainerId=\"#whole-container\"","import * as d3 from \"d3\";\nimport Chart from \"../../chart\";\nimport { tooltipContainerId } from \"../constant/getContainer\";\nimport { getPosition } from \"../constant/getPosition\";\nimport { parseTime, formatTick, formatTicksCount } from '../constant/timeConstant'\nconst ENGFONT = \"OPPOSans\";\nconst COLOR_REGULAR = \"#6C8EF2\";\nconst COLOR_FREQUENT = \"#FFC111\";\nconst COLOR_GRID = \"#E6E6E6\";\nconst COLOR_AXIS = \"#000000\";\nconst TICK_WIDTH = 2;\n\nclass Trend extends Chart {\n    constructor() {\n        super();\n        this._x = \"\";\n        this._y = \"\";\n    }\n    display() {\n        /**\n        * The main drawing function\n        */\n        //---------------parse fact-------------------------\n        let factResult = this.parseFact()\n        let data = factResult._data\n        let measure = factResult._measure\n        let breakdown = factResult._breakdown\n        let focus = factResult._focus\n        let measureName = factResult._measureName\n        if (focus.length === 0) return\n        if (breakdown[1] && breakdown[1].field) return;\n\n        //---------------init chart size--------------------\n        let chartResult = this.setChartStandard()\n        let chartSize = chartResult._chartSize\n        let width = chartResult._width\n        let height = chartResult._height\n        let margin = chartResult._margin\n\n        //------------------init---------------------------\n        let containerSelector = tooltipContainerId\n        //init svg\n        let svg = this.initSvg(chartSize, margin)\n        //init layer\n        let lineLayer = svg.append(\"g\").attr(\"class\", \"lineLayer\")\n        let tooltipLayer = svg.append(\"g\").attr(\"class\", \"tooltip\");\n\n        /**\n         * Draw the X axis\n         */\n        // set the ranges\n        let x = d3.scaleTime()\n            .range([0, width])\n        // Scale the range of the data in the domains\n        x.domain(d3.extent(data, function (d) { return parseTime(d[breakdown[0].field]); }));\n        // add the x Axis\n        let format_TicksCount = formatTicksCount(data[0][breakdown[0].field]);\n        let tick_format = formatTick(data[0][breakdown[0].field]);\n        let axisX = d3.axisBottom(x).tickFormat(tick_format)\n        if (format_TicksCount === d3.timeYear) {\n            axisX.ticks(format_TicksCount)\n        }\n        //------------------draw y axis-------------------\n        let y = this.drawYAxis(svg, data, measure, chartSize, height)\n\n        //------------------draw original line------------\n        let originLineResult = this.drawBackLine(x, y, data, lineLayer, breakdown, measureName, chartSize)\n        let rawPath = originLineResult._rawPath\n        let lineGen = originLineResult._lineGen\n\n        //------------------draw trend--------------------\n        this.drawTrend(x, y, svg, data, breakdown, measure, focus, measureName, height, lineLayer, tooltipLayer, axisX, lineGen)\n        //-------------------tooltip----------------------\n        if (this._showTooltip) {\n            renderDetailValue(containerSelector, rawPath, x, y, height, data, breakdown, measureName, tick_format, tooltipLayer)\n        }\n\n\n        svg.append(\"g\")\n            .attr(\"class\", \"xAxis\")\n            .attr(\"transform\", \"translate(0,\" + (height - 20) + \")\")\n            .call(axisX)\n            .call(g => {\n                g.attr(\"font-size\", \"10px\");\n                g.attr(\"font-family\", ENGFONT);\n                g.attr(\"font-weight\", \"lighter\")\n\n                let domainD = g.selectAll(\".domain\").attr(\"d\");\n                domainD = domainD.replace(\"6V\", (6 * chartSize.height / 320) + \"V\")\n                domainD = domainD.replace(\"V6\", \"V\" + (6 * chartSize.height / 320))\n                g.selectAll(\".domain\").attr(\"d\", domainD).attr(\"stroke-width\", TICK_WIDTH);\n                g.selectAll(\".tick\")\n                    .selectAll(\"line\")\n                    .attr(\"stroke\", COLOR_AXIS)\n                    .attr(\"stroke-width\", TICK_WIDTH)\n                    .attr(\"y2\", 5);\n\n                g.selectAll(\"text\")\n                    .attr(\"y\", 10)\n                // .attr(\"transform\", \"rotate(-20)\")\n                // .attr(\"style\", \"text-anchor: end\")\n            });\n        return svg;\n    }\n    parseFact() {\n        /**\n         * Parse fact json\n         * return:The contents of each field in fact\n         */\n        let factData = this.factdata()\n        let measure = this.measure();\n        let breakdown = this.breakdown();\n        let focus = this.focus();\n        // set data\n        factData = factData.sort((a, b) => parseTime(a[breakdown[0].field]) - parseTime(b[breakdown[0].field]))\n        let data = factData;\n        let measureName = measure[0].aggregate === \"count\" ? \"COUNT\" : measure[0].field\n        return { _data: data, _measure: measure, _breakdown: breakdown, _focus: focus, _measureName: measureName }\n    }\n    setChartStandard() {\n        /** \n         * calculate size of the chart\n         * return chart size parameters\n         */\n        // set the dimensions and margins of the graph\n\n        let chartSize = { width: 600, height: 280 }\n        // eslint-disable-next-line\n        let margin = {\n            \"top\": 15,\n            \"right\": 20,\n            \"bottom\": 15,\n            \"left\": 20\n        };\n        let width = chartSize.width - margin.left - margin.right,\n            height = chartSize.height - margin.top - margin.bottom;\n        return { _width: width, _height: height, _chartSize: chartSize, _margin: margin }\n    }\n    initSvg(chartSize, margin) {\n        /**\n         * Initialize SVG based on the drawing area size\n         * return :svg \n         */\n        let svg = d3.select(this.container())\n            .append(\"svg\")\n            .attr(\"width\", chartSize.width)\n            .attr(\"height\", chartSize.height)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + (margin.left + 10) + \",\" + margin.top + \")\")\n            .attr(\"font-family\", ENGFONT);\n        return svg\n    }\n    drawYAxis(svg, data, measure, chartSize, height) {\n        /**\n         * Draw the Y axis\n         */\n        // .padding(0.1);\n        let y = d3.scaleLinear()\n            .range([height - 20, 0]);\n\n\n        y.domain(d3.extent([].concat(\n            // lower boundary minus margin\n            data.map(function (d) { return d[measure[0].field] * 0.95 }),\n            // upper boundary add margin\n            data.map(function (d) { return d[measure[0].field] * 1.05 })\n        )));\n        // add the y Axis\n        svg.append(\"g\")\n            .attr(\"class\", \"yAxis\")\n            // .attr(\"transform\", `translate(,0)`)\n            .call(d3.axisLeft(y).ticks(5).tickFormat(function (d) {\n                if ((d / 1000000) >= 1) {\n                    d = d / 1000000 + \"M\";\n                } else if ((d / 1000) >= 1) {\n                    d = d / 1000 + \"K\";\n                }\n                return d;\n            }))\n            .call(g => {\n                g.attr(\"font-size\", \"10px\")\n                g.attr(\"font-weight\", \"lighter\")\n                g.attr(\"font-family\", ENGFONT)\n                let domainD = g.selectAll(\".domain\").attr(\"d\");\n                domainD = domainD.replace(\"M-6\", \"M-\" + (6 * chartSize.width / 640))\n                domainD = domainD.replace(\"H-6\", \"H-\" + (6 * chartSize.width / 640))\n                g.selectAll(\".domain\").attr(\"d\", domainD).attr(\"stroke-width\", TICK_WIDTH);\n                g.selectAll(\".tick\")\n                    .select(\"line\")\n                    .attr(\"stroke\", COLOR_AXIS)\n                    .attr(\"stroke-width\", TICK_WIDTH)\n                    .attr(\"x2\", -5);\n\n                g.selectAll(\"text\")\n                    .attr(\"x\", -10);\n            })\n        return y\n    }\n    drawBackLine(x, y, data, lineLayer, breakdown, measureName, chartSize) {\n        /**\n         * draw series line and back grid\n         */\n        lineLayer.append(\"g\").selectAll(\"line.line\")\n            .data(y.ticks(5)).enter().append(\"line\")\n            .attr(\"x1\", 0)\n            .attr(\"x2\", chartSize.width)\n            .attr(\"y1\", function (d) { return y(d) })\n            .attr(\"y2\", function (d) { return y(d) })\n            .attr(\"stroke\", COLOR_GRID)\n            .attr(\"stroke-width\", \"2px\")\n        let lineGen = d3.line().curve(d3.curveMonotoneX)\n            .x(function (d) {\n                return x(parseTime(d[breakdown[0].field]));\n            })\n            .y(function (d) {\n                return y(d[measureName]);\n            })\n        let rawPath = lineLayer.append(\"path\")\n            .attr(\"d\", lineGen(data))\n            .attr(\"stroke\", COLOR_REGULAR)\n            .attr(\"stroke-width\", \"5px\")\n            .attr(\"fill\", \"none\")\n        return { _rawPath: rawPath, _lineGen: lineGen }\n    }\n    drawTrend(x, y, svg, data, breakdown, measure, focus, measureName, height, lineLayer, tooltipLayer, axisX, lineGen) {\n        /**\n         * draw trend insight\n         */\n        let tickValues = [];\n        for (let pattern of focus) {\n            let start = pattern.scope[0]\n            let end = pattern.scope[1]\n            let scale = pattern.value\n            let xLeft = x(parseTime(data[start][breakdown[0].field]));\n            let xRight = x(parseTime(data[end][breakdown[0].field]));\n            let yTop = y(data[end - 1][measureName])\n\n            tooltipLayer.append(\"line\")\n                .attr(\"x1\", xLeft)\n                .attr(\"y1\", y(data[start][measureName]))\n                .attr(\"x2\", xLeft)\n                .attr(\"y2\", height - 20)\n                .attr(\"stroke-width\", \"1px\")\n                .attr(\"stroke\", \"black\")\n                .attr(\"stroke-dasharray\", \"6, 3\");\n            tooltipLayer.append(\"line\")\n                .attr(\"x1\", xRight)\n                .attr(\"y1\", y(data[end][measureName]))\n                .attr(\"x2\", xRight)\n                .attr(\"y2\", height - 20)\n                .attr(\"stroke-width\", \"1px\")\n                .attr(\"stroke\", \"black\")\n                .attr(\"stroke-dasharray\", \"6, 3\");\n            let regressionData = []\n\n            for (let j = start, i = 0; j < end + 1; j++, i++) {\n                let tmp = {}\n                tmp[breakdown[0].field] = data[j][breakdown[0].field]\n                tmp[measure[0].field] = focus[0][\"regression\"][i]\n                regressionData.push(tmp)\n            }\n            lineLayer.append(\"path\")\n                .attr(\"d\", lineGen(regressionData))\n                .attr(\"stroke-width\", \"2px\")\n                .attr(\"stroke\", \"black\")\n                .attr(\"stroke-dasharray\", \"6, 3\")\n                .attr(\"fill\", \"none\")\n\n            let tooltip = tooltipLayer.append(\"text\")\n                .attr(\"font-size\", \"10px\")\n                .attr(\"font-family\", ENGFONT)\n                .attr(\"font-weight\", \"bold\")\n                .attr(\"fill\", COLOR_FREQUENT)\n            let increasing = regressionData[0][measureName] < regressionData[regressionData.length - 1][measureName]\n            tooltip.append(\"tspan\")\n                .text((increasing ? \"increasing \" + (scale * 100).toFixed(2) : \"descreasing \" + (scale * 100).toFixed(2)) + \"%\")\n                .attr(\"dy\", tooltip.selectAll(\"tspan\").node().getBBox().height * 0.9);\n            let textWidth = tooltip.node().getBBox().width;\n            let textHeight = tooltip.node().getBBox().height;\n            tooltip.attr(\"width\", textWidth)\n                .attr(\"height\", textHeight)\n                .attr(\"x\", xRight - textWidth - 10)\n                .attr(\"y\", yTop - textHeight - 80 + (increasing ? -5 : 15))\n            let arrowImage = increasing ? \"./arrow-up.png\" : \"./arrow-down.png\"\n            svg.append(\"image\")\n                .attr(\"xlink:href\", arrowImage)\n                .attr(\"width\", \"70px\")\n                .attr(\"height\", \"20px\")\n                .attr(\"x\", xRight - 40)\n                .attr(\"y\", yTop - textHeight - 80)\n\n            tickValues.push(parseTime(data[start][breakdown[0].field]))\n            tickValues.push(parseTime(data[end][breakdown[0].field]))\n        }\n        axisX.tickValues(tickValues)\n    }\n\n}\n\nlet renderDetailValue = (containerSelector, rawPath, x, y, height,\n    data, breakdown, measureName, tick_format, tooltipLayer) => {\n    let detailValueTooltip = d3.select(containerSelector)\n        .append(\"div\")\n        .attr(\"id\", \"value-tooltip\")\n        .style(\"z-index\", 2000)\n        .style(\"width\", \"fit-content\")\n        .style(\"height\", \"40px\")\n        .style(\"opacity\", 0)\n        .style(\"position\", \"absolute\")\n        .style(\"pointer-events\", \"none\")\n        .style(\"border-radius\", \"4px\")\n        .style(\"background\", \"#FFFFFF\")\n        .style(\"box-shadow\", \"0 0 5px #888888\")\n        .style(\"padding\", \"5px\")\n\n    let detailValueTitle = detailValueTooltip.append(\"span\")\n        .style(\"font\", `9px ${ENGFONT}`)\n        .style(\"font-weight\", \"bold\")\n        .style(\"display\", \"block\")\n        .style(\"color\", \"#000000\")\n    let detailValueContent = detailValueTooltip.append(\"svg\")\n        .attr(\"width\", \"95px\")\n        .attr(\"height\", \"30px\")\n    let detailValueColor = detailValueContent.append(\"circle\")\n        .attr(\"r\", 4)\n        .attr(\"cx\", \"5px\")\n        .attr(\"cy\", \"12px\")\n    let detailValueText = detailValueContent.append(\"text\")\n        .style(\"font\", `8px ${ENGFONT}`)\n        .style(\"color\", \"#000000\")\n        .attr(\"x\", \"14px\")\n        .attr(\"y\", \"14px\")\n\n    rawPath.on(\"mouseover\", function (d) {\n        detailValueTooltip.transition()\n            .duration(200)\n            .style(\"opacity\", .9)\n        detailValue.transition()\n            .duration(200)\n            .style(\"opacity\", 1)\n    })\n        .on(\"mouseout\", function (d) {\n            // If the mouse is exactly on the data point, \n            // then the mouse will on the circle instead of the path\n            // So here we should keep the tooltip shown when the mouse is still on the circle\n            let currentElement = document.elementFromPoint(d3.event.pageX, d3.event.pageY)\n            if (currentElement !== detailValueCircle.node()) {\n                detailValueTooltip.transition()\n                    .duration(500)\n                    .style(\"opacity\", 0)\n                detailValue.transition()\n                    .duration(500)\n                    .style(\"opacity\", 0)\n            }\n        })\n        .on(\"mousemove\", function (d) {\n            let result = getPosition()\n            let x0 = x.invert(d3.mouse(this)[0])\n            let currentIndex = bisectDate(data, x0, 1)\n            let time0 = parseTime(data[currentIndex - 1][breakdown[0].field])\n            let time1 = parseTime(data[currentIndex][breakdown[0].field])\n            let currentTime = x0 - time0 > time1 - x0 ? time1 : time0\n            let currentValue = currentTime === time0 ? data[currentIndex - 1][measureName] : data[currentIndex][measureName]\n            let title = tick_format(currentTime)\n            detailValueTooltip.style(\"left\", (result.posX + 30) + \"px\")\n                .style(\"top\", (result.posY + 20) + \"px\")\n            detailValueTitle.html(title)\n            detailValueColor.style(\"fill\", COLOR_REGULAR)\n            detailValueText.html(measureName + \": \" + currentValue.toFixed(2))\n            detailValueLine.attr(\"x1\", x(currentTime))\n            detailValueLine.attr(\"x2\", x(currentTime))\n            detailValueCircle.attr(\"cx\", x(currentTime))\n            detailValueCircle.attr(\"cy\", y(currentValue))\n            detailValueCircle.attr(\"stroke\", COLOR_REGULAR)\n        })\n\n    let bisectDate = d3.bisector(function (d) { return parseTime(d[breakdown[0].field]) }).left\n    let detailValue = tooltipLayer.append(\"g\")\n        .style(\"opacity\", 0)\n    let detailValueLine = detailValue.append(\"line\")\n        .attr(\"y1\", height - 20)\n        .attr(\"y2\", 0)\n        .attr(\"stroke-width\", \"2px\")\n        .attr(\"stroke\", COLOR_GRID)\n        .attr(\"stroke-dasharray\", \"6, 3\")\n    let detailValueCircle = detailValue.append(\"circle\")\n        .attr(\"r\", 3)\n        .attr(\"fill\", \"#FFFFFF\")\n        .attr(\"stroke-width\", \"2\")\n        .style(\"box-shadow\", \"0 0 5px #888888\")\n        .on(\"mouseover\", function (d) {\n            // FIXME: This is a nit\n            // Even mouse is not on the path, the tooltip will still be shown \n            // but the error area is small\n            detailValueTooltip.transition()\n                .duration(200)\n                .style(\"opacity\", .9)\n            detailValue.transition()\n                .duration(200)\n                .style(\"opacity\", 1)\n        }).on(\"mouseout\", function (d) {\n            // If the mouse is exactly on the data point, \n            // then the mouse will on the circle instead of the path\n            // So here we should hide all the tooltip when moving mouse out of the circle\n            detailValueTooltip.transition()\n                .duration(500)\n                .style(\"opacity\", 0)\n            detailValue.transition()\n                .duration(500)\n                .style(\"opacity\", 0)\n        })\n}\nexport default Trend;","export function uuid() {\r\n    var s = [];\r\n    var hexDigits = \"0123456789abcdef\";\r\n    for (var i = 0; i < 36; i++) {\r\n        s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);\r\n    }\r\n    s[14] = \"4\"; // bits 12-15 of the time_hi_and_version field to 0010\r\n    s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1); // bits 6-7 of the clock_seq_hi_and_reserved to 01\r\n    s[8] = s[13] = s[18] = s[23] = \"-\";\r\n\r\n    var uuid = s.join(\"\");\r\n    return uuid;\r\n}","import * as d3 from \"d3\";\nimport Chart from \"../../chart\";\nimport { uuid } from \"../constant/uuid\";\nimport { parseTime, formatTick, formatTicksCount, parseIntervalString } from '../constant/timeConstant'\nimport { tooltipContainerId } from \"../constant/getContainer\";\n\nconst ENGFONT = \"OPPOSans\";\nconst COLOR_REGULAR = \"#808080\";\nconst COLOR_SEASONAL = \"#6C8EF2\";\nconst COLOR_GRID = \"#E6E6E6\";\nconst COLOR_AXIS = \"#000000\";\nconst COLOR_TOOLTIP_DARK = \"#3E3A39\";\nconst COLOR_TOOLTIP_LIGHT = \"#FCFBE7\"\nconst NUM_TOOLTIP_DISPLAY_LEFT_PERIOD = 2\nconst NUM_TOOLTIP_DISPLAY_RIGHT_PERIOD = 3\nconst TICK_WIDTH = 2;\n\nclass Seasonality extends Chart {\n    constructor() {\n        super();\n        this._x = \"\";\n        this._y = \"\";\n    }\n    display() {\n        /**\n        * The main drawing function\n        */\n        //---------------parse fact-------------------------\n        let factResult = this.parseFact()\n        let data = factResult._data\n        let measure = factResult._measure\n        let breakdown = factResult._breakdown\n        let focus = factResult._focus\n        let measureName = factResult._measureName\n        if (focus.length === 0) return\n        if (breakdown[1] && breakdown[1].field) return;\n\n        //---------------init chart size--------------------\n        let chartResult = this.setChartStandard()\n        let chartSize = chartResult._chartSize\n        let width = chartResult._width\n        let height = chartResult._height\n        let margin = chartResult._margin\n\n        let startIndex = data.length\n        let endIndex = 0\n        for (let seasonality of focus) {\n            let interval = seasonality.interval\n            for (let i = 0; i < seasonality.seasonal.length; i++) {\n                startIndex = Math.max(0, Math.min(startIndex, seasonality.seasonal[i].start - Math.floor(interval / 2)))\n                endIndex = Math.min(data.length, Math.max(endIndex, seasonality.seasonal[i].end + Math.floor(interval / 2)))\n            }\n        }\n        data = data.slice(startIndex, endIndex)\n\n        //------------------init---------------------------\n        let containerSelector = tooltipContainerId\n        //init svg\n        let svg = this.initSvg(chartSize, margin)\n        //init layer\n        let lineLayer = svg.append(\"g\").attr(\"class\", \"lineLayer\")\n        let tooltipLayer = svg.append(\"g\").attr(\"class\", \"tooltip\");\n\n        //------------------draw x axis-------------------\n        let xAxisResult = this.drawXAxis(svg, data, breakdown, width, height, chartSize)\n        let x = xAxisResult._x\n        let axisX = xAxisResult._axisX\n        let tick_format = xAxisResult._tick_format\n        //------------------draw y axis-------------------\n        let y = this.drawYAxis(svg, data, measure, chartSize, height)\n\n        //------------------draw original line------------\n        let originLineResult = this.drawBackLine(x, y, data, lineLayer, breakdown, measureName, chartSize)\n        let rawPath = originLineResult._rawPath\n        let lineGen = originLineResult._lineGen\n\n        //-----------------draw seasonality insight---------\n        let tooltipPathList = this.drawSeasonality(x, data, breakdown, focus, height, tooltipLayer, axisX, lineGen, startIndex)\n        if (this._showTooltip) {\n            renderDetailValue(containerSelector, rawPath, x, y, height, data, breakdown, measureName, tick_format, tooltipLayer)\n            renderTooltip(containerSelector, tick_format, data, breakdown, tooltipPathList, focus[0], x, measureName)\n        }\n        return svg;\n    }\n    parseFact() {\n        /**\n         * Parse fact json\n         * return:The contents of each field in fact\n         */\n        let factData = this.factdata()\n        let measure = this.measure();\n        let breakdown = this.breakdown();\n        let focus = this.focus();\n        // set data\n        factData = factData.sort((a, b) => parseTime(a[breakdown[0].field]) - parseTime(b[breakdown[0].field]))\n        let data = factData;\n        let measureName = measure[0].aggregate === \"count\" ? \"COUNT\" : measure[0].field\n        return { _data: data, _measure: measure, _breakdown: breakdown, _focus: focus, _measureName: measureName }\n    }\n    setChartStandard() {\n        /** \n         * calculate size of the chart\n         * return chart size parameters\n         */\n        // set the dimensions and margins of the graph\n        let chartSize = { width: 600, height: 280 }\n        // eslint-disable-next-line\n        let margin = {\n            \"top\": 15,\n            \"right\": 20,\n            \"bottom\": 15,\n            \"left\": 20\n        };\n        let width = chartSize.width - margin.left - margin.right,\n            height = chartSize.height - margin.top - margin.bottom;\n        return { _width: width, _height: height, _chartSize: chartSize, _margin: margin }\n    }\n    initSvg(chartSize, margin) {\n        /**\n         * Initialize SVG based on the drawing area size\n         * return :svg \n         */\n        let svg = d3.select(this.container())\n            .append(\"svg\")\n            .attr(\"width\", chartSize.width)\n            .attr(\"height\", chartSize.height)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + (margin.left + 10) + \",\" + margin.top + \")\")\n            .attr(\"font-family\", ENGFONT);\n        return svg\n    }\n    drawXAxis(svg, data, breakdown, width, height, chartSize) {\n        /**\n         * Draw the X axis\n         */\n        // set the ranges\n        let x = d3.scaleTime()\n            .range([0, width])\n        // Scale the range of the data in the domains\n        x.domain(d3.extent(data, function (d) { return parseTime(d[breakdown[0].field]); }));\n        // add the x Axis\n        let format_TicksCount = formatTicksCount(data[0][breakdown[0].field]);\n        let tick_format = formatTick(data[0][breakdown[0].field]);\n        let axisX = d3.axisBottom(x).tickFormat(tick_format)\n        if (format_TicksCount === d3.timeYear) {\n            axisX.ticks(format_TicksCount)\n        }\n        svg.append(\"g\")\n            .attr(\"class\", \"xAxis\")\n            .attr(\"transform\", \"translate(0,\" + (height - 20) + \")\")\n            .call(axisX)\n            .call(g => {\n                g.attr(\"font-size\", \"10px\");\n                g.attr(\"font-family\", ENGFONT);\n                g.attr(\"font-weight\", \"lighter\")\n\n                let domainD = g.selectAll(\".domain\").attr(\"d\");\n                domainD = domainD.replace(\"6V\", (6 * chartSize.height / 320) + \"V\")\n                domainD = domainD.replace(\"V6\", \"V\" + (6 * chartSize.height / 320))\n                g.selectAll(\".domain\").attr(\"d\", domainD).attr(\"stroke-width\", TICK_WIDTH);\n                g.selectAll(\".tick\")\n                    .selectAll(\"line\")\n                    .attr(\"stroke\", COLOR_AXIS)\n                    .attr(\"stroke-width\", TICK_WIDTH)\n                    .attr(\"y2\", 5);\n\n                g.selectAll(\"text\")\n                    .attr(\"y\", 10)\n                // .attr(\"transform\", \"rotate(-20)\")\n                // .attr(\"style\", \"text-anchor: end\")\n            });\n        return { _x: x, _axisX: axisX, _tick_format: tick_format }\n    }\n    drawYAxis(svg, data, measure, chartSize, height) {\n        /**\n         * Draw the Y axis\n         */\n        // .padding(0.1);\n        let y = d3.scaleLinear()\n            .range([height - 20, 0]);\n        y.domain(extendYAxis(data, measure[0].field))\n        // add the y Axis\n        svg.append(\"g\")\n            .attr(\"class\", \"yAxis\")\n            // .attr(\"transform\", `translate(,0)`)\n            .call(d3.axisLeft(y).ticks(5).tickFormat(function (d) {\n                if ((d / 1000000) >= 1) {\n                    d = d / 1000000 + \"M\";\n                } else if ((d / 1000) >= 1) {\n                    d = d / 1000 + \"K\";\n                }\n                return d;\n            }))\n            .call(g => {\n                g.attr(\"font-size\", \"10px\")\n                g.attr(\"font-weight\", \"lighter\")\n                g.attr(\"font-family\", ENGFONT)\n                let domainD = g.selectAll(\".domain\").attr(\"d\");\n                domainD = domainD.replace(\"M-6\", \"M-\" + (6 * chartSize.width / 640))\n                domainD = domainD.replace(\"H-6\", \"H-\" + (6 * chartSize.width / 640))\n                g.selectAll(\".domain\").attr(\"d\", domainD).attr(\"stroke-width\", TICK_WIDTH);\n                g.selectAll(\".tick\")\n                    .select(\"line\")\n                    .attr(\"stroke\", COLOR_AXIS)\n                    .attr(\"stroke-width\", TICK_WIDTH)\n                    .attr(\"x2\", -5);\n\n                g.selectAll(\"text\")\n                    .attr(\"x\", -10);\n            })\n        return y\n    }\n    drawBackLine(x, y, data, lineLayer, breakdown, measureName, chartSize) {\n        /**\n         * draw series line and back grid\n         */\n        lineLayer.append(\"g\").selectAll(\"line.line\")\n            .data(y.ticks(5)).enter().append(\"line\")\n            .attr(\"x1\", 0)\n            .attr(\"x2\", chartSize.width)\n            .attr(\"y1\", function (d) { return y(d) })\n            .attr(\"y2\", function (d) { return y(d) })\n            .attr(\"stroke\", COLOR_GRID)\n            .attr(\"stroke-width\", \"2px\")\n\n        let lineGen = d3.line().curve(d3.curveMonotoneX)\n            .x(function (d) {\n                return x(parseTime(d[breakdown[0].field]));\n            })\n            .y(function (d) {\n                return y(d[measureName]);\n            })\n        let rawPath = lineLayer.append(\"path\")\n            .attr(\"d\", lineGen(data))\n            .attr(\"stroke\", COLOR_REGULAR)\n            .attr(\"stroke-width\", \"5px\")\n            .attr(\"fill\", \"none\")\n        return { _rawPath: rawPath, _lineGen: lineGen }\n    }\n    drawSeasonality(x, data, breakdown, focus, height, tooltipLayer, axisX, lineGen, startIndex) {\n        /**\n         * draw Seasonality insight\n         */\n        let tooltipPathList = []\n        let tickValues = []\n        for (let seasonality of focus) {\n            for (let i = 0; i < seasonality.seasonal.length; i++) {\n                let tooltipPeriod = seasonality.seasonal[i]\n                let tooltipPeriodStart = tooltipPeriod.start - startIndex\n                let tooltipPeriodEnd = tooltipPeriod.end - startIndex\n                if (i === 0 && tooltipPeriodStart > 0) {\n                    let xPos = x(parseTime(data[tooltipPeriodStart][breakdown[0].field]))\n                    tooltipLayer.append(\"line\")\n                        .attr(\"x1\", xPos)\n                        .attr(\"y1\", 0)\n                        .attr(\"x2\", xPos)\n                        .attr(\"y2\", height - 20)\n                        .attr(\"stroke-width\", \"1px\")\n                        .attr(\"stroke\", \"black\")\n                        .attr(\"stroke-dasharray\", \"6, 3\")\n                    tickValues.push(parseTime(data[tooltipPeriodStart][breakdown[0].field]))\n                }\n                if (i < seasonality.seasonal.length - 1 || tooltipPeriodEnd < data.length - 1) {\n                    let xPos = x(parseTime(data[tooltipPeriodEnd][breakdown[0].field]))\n                    tooltipLayer.append(\"line\")\n                        .attr(\"x1\", xPos)\n                        .attr(\"y1\", 0)\n                        .attr(\"x2\", xPos)\n                        .attr(\"y2\", height - 20)\n                        .attr(\"stroke-width\", \"1px\")\n                        .attr(\"stroke\", \"black\")\n                        .attr(\"stroke-dasharray\", \"6, 3\")\n                    tickValues.push(parseTime(data[tooltipPeriodEnd][breakdown[0].field]))\n                }\n                if (tooltipPeriod.seasonal) {\n                    tooltipPathList.push(\n                        tooltipLayer.append(\"path\")\n                            .attr(\"d\", lineGen(data.slice(tooltipPeriodStart, tooltipPeriodEnd + 1)))\n                            .attr(\"stroke\", COLOR_SEASONAL)\n                            .attr(\"stroke-width\", \"5px\")\n                            .attr(\"fill\", \"none\"))\n                }\n            }\n        }\n        axisX.tickValues(tickValues)\n        return tooltipPathList\n    }\n\n}\n\nlet renderTooltip = (containerSelector, tick_format, data, breakdown,\n    tooltipPathList, pattern, x, measureName) => {\n    let tooltipId = uuid()\n    let bisectDate = d3.bisector(function (d) { return parseTime(d[breakdown[0].field]) }).left\n    let hoverTooltip = d3.select(containerSelector)\n        .append(\"div\")\n        .attr(\"id\", \"hover-tooltip\")\n        .style(\"z-index\", 2000)\n        .style(\"width\", \"200px\")\n        .style(\"height\", \"115px\")\n        .style(\"opacity\", 0)\n        .style(\"position\", \"absolute\")\n        .style(\"pointer-events\", \"none\")\n        .style(\"padding-left\", \"10px\")\n    let hoverTooltipTitle = hoverTooltip.append(\"div\")\n        .style(\"display\", \"flex\")\n        .style(\"align-items\", \"center\")\n        .style(\"height\", \"15px\")\n        .style(\"width\", \"190px\")\n        .style(\"border\", `2px solid ${COLOR_TOOLTIP_DARK}`)\n        .style(\"border-radius\", \"4px 4px 0px 0px\")\n        .style(\"padding-left\", \"5px\")\n        .style(\"padding-right\", \"5px\")\n        .style(\"background\", COLOR_TOOLTIP_DARK)\n        .style(\"font\", `7px ${ENGFONT}`)\n        .style(\"font-weight\", \"bold\")\n        .style(\"color\", COLOR_TOOLTIP_LIGHT)\n        .style(\"text-overflow\", \"ellipsis\")\n        .style(\"overflow\", \"hidden\")\n        .style(\"white-space\", \"nowrap\")\n    let hoverTooltipContent = hoverTooltip.append(\"div\")\n        .style(\"width\", \"200px\")\n        .style(\"height\", \"100px\")\n        .style(\"border\", `2px solid ${COLOR_TOOLTIP_DARK}`)\n        .style(\"border-radius\", \"0px 4px 4px 4px\")\n        .style(\"background\", COLOR_TOOLTIP_LIGHT)\n    hoverTooltipContent.append(\"span\")\n        .style(\"position\", \"absolute\")\n        .style(\"left\", \"-10px\")\n        .style(\"top\", \"60px\")\n        .style(\"border-width\", \"10px\")\n        .style(\"border-style\", \"dashed solid dashed dashed\")\n        .style(\"border-color\", `transparent ${COLOR_TOOLTIP_DARK} transparent transparent`)\n        .style(\"font-size\", 0)\n        .style(\"line-height\", 0)\n    hoverTooltipContent.append(\"em\")\n        .style(\"position\", \"absolute\")\n        .style(\"left\", \"-4px\")\n        .style(\"top\", \"62px\")\n        .style(\"border-width\", \"8px\")\n        .style(\"border-style\", \"dashed solid dashed dashed\")\n        .style(\"border-color\", `transparent ${COLOR_TOOLTIP_LIGHT} transparent transparent`)\n        .style(\"font-size\", 0)\n        .style(\"line-height\", 0)\n    hoverTooltipContent.append(\"div\")\n        .attr(\"id\", \"tooltip-chart\" + tooltipId)\n\n    let tooltipX = d3.scaleLinear()\n        .range([10, 190])\n    let tooltipY = d3.scaleLinear()\n        .range([90, 10])\n    let tooltipLenGen = d3.line().curve(d3.curveMonotoneX)\n        .x(function (d) {\n            return tooltipX(d.x);\n        })\n        .y(function (d) {\n            return tooltipY(d.y);\n        })\n    let tooltipAvgY = d3.scaleLinear()\n        .range([90, 10])\n    tooltipAvgY.domain(extendYAxis(pattern.average))\n    let tooltipAvgLenGen = d3.line().curve(d3.curveMonotoneX)\n        .x(function (d) {\n            return tooltipX(d.x);\n        })\n        .y(function (d) {\n            return tooltipAvgY(d.y);\n        })\n    let intervalString = parseIntervalString(parseTime(data[pattern.interval][breakdown[0].field]) - parseTime(data[0][breakdown[0].field]))\n\n    for (let i = 0; i < tooltipPathList.length; i++) {\n        let tooltipPath = tooltipPathList[i]\n        tooltipPath\n            .on(\"mouseover\", function (d) {\n                hoverTooltip.transition()\n                    .duration(200)\n                    .style(\"opacity\", .9)\n            })\n            .on(\"mouseout\", function (d) {\n                hoverTooltip.transition()\n                    .duration(500)\n                    .style(\"opacity\", 0)\n            })\n            // eslint-disable-next-line\n            .on(\"mousemove\", function (d) {\n                let result = { posX: d3.mouse(this)[0], posY: d3.mouse(this)[1] }\n                let x0 = x.invert(d3.mouse(this)[0])\n                let currentIndex = bisectDate(data, x0, 1)\n                let periodLeft = Math.floor(currentIndex / pattern.interval) * pattern.interval\n                let periodRight = periodLeft + pattern.interval - 1\n                let title = tick_format(parseTime(data[periodLeft][breakdown[0].field])) + \"-\" +\n                    tick_format(parseTime(data[periodRight][breakdown[0].field]))\n                hoverTooltip.style(\"left\", (result.posX + 30) + \"px\")\n                    .style(\"top\", (result.posY - 50) + \"px\")\n                // no need to render chart\n                let previousSvg = d3.select(\"#tooltip-chart\" + tooltipId).node().getElementsByTagName(\"svg\")[0]\n                if (previousSvg && previousSvg.getAttribute(\"class\") === title) {\n                    return\n                }\n\n                // render chart\n                hoverTooltipTitle.html(title)\n                d3.select(\"#tooltip-chart\" + tooltipId).selectAll(\"*\").remove()\n\n                let currentPeriod = Math.floor(currentIndex / pattern.interval)\n                let tooltipData = []\n                let dataLeft = currentPeriod <= NUM_TOOLTIP_DISPLAY_LEFT_PERIOD ? 0 : periodLeft - NUM_TOOLTIP_DISPLAY_LEFT_PERIOD * pattern.interval\n                let dataRight = currentPeriod + NUM_TOOLTIP_DISPLAY_RIGHT_PERIOD + 1 >= data.length / pattern.interval ? data.length : periodRight + NUM_TOOLTIP_DISPLAY_RIGHT_PERIOD * pattern.interval\n                for (let i = dataLeft; i < dataRight; i++) {\n                    tooltipData.push({ x: i - dataLeft, y: data[i][measureName] })\n                }\n                tooltipX.domain([0, dataRight - dataLeft + 1])\n                tooltipY.domain(extendYAxis(tooltipData, \"y\"))\n                let tooltipLayer = d3.select(\"#tooltip-chart\" + tooltipId)\n                    .append(\"svg\")\n                    .attr(\"class\", title)\n                    .attr(\"width\", \"200\")\n                    .attr(\"height\", \"100\")\n                    .append(\"g\")\n                tooltipLayer.append(\"rect\")\n                    .style(\"width\", tooltipX(periodRight - dataLeft) - tooltipX(periodLeft - dataLeft))\n                    .style(\"height\", \"70px\")\n                    .style(\"fill\", \"#ffffff\")\n                    .style(\"x\", tooltipX(periodLeft - dataLeft))\n                    .style(\"y\", \"20px\")\n                for (let i = 0; i <= (dataRight - dataLeft) / pattern.interval; i++) {\n                    let xPos = tooltipX(i * pattern.interval)\n                    tooltipLayer.append(\"line\")\n                        .attr(\"x1\", xPos)\n                        .attr(\"y1\", 20)\n                        .attr(\"x2\", xPos)\n                        .attr(\"y2\", 90)\n                        .attr(\"stroke-width\", \"1px\")\n                        .attr(\"stroke\", \"black\")\n                }\n                tooltipLayer.append(\"path\")\n                    .attr(\"d\", tooltipLenGen(tooltipData))\n                    .attr(\"stroke\", COLOR_REGULAR)\n                    .attr(\"stroke-width\", \"2px\")\n                    .attr(\"fill\", \"none\")\n                for (let seasonal of pattern.seasonal) {\n                    let start = Math.max(seasonal.start, dataLeft) - dataLeft\n                    let end = Math.min(seasonal.end, dataRight) - dataLeft\n                    if (end < 0) {\n                        continue\n                    }\n                    for (let i = 0; i < (end - start) / pattern.interval; i++) {\n                        let newAvgData = []\n                        for (let j = 0; j < pattern.average.length; j++) {\n                            newAvgData.push({ x: start + i * pattern.interval + j, y: pattern.average[j] })\n                        }\n                        tooltipLayer.append(\"path\")\n                            .attr(\"d\", tooltipAvgLenGen(newAvgData))\n                            .attr(\"stroke\", \"#FFBB8A\")\n                            .attr(\"stroke-width\", \"2px\")\n                            .attr(\"stroke-dasharray\", \"6, 3\")\n                            .attr(\"fill\", \"none\")\n                    }\n                    tooltipLayer.append(\"path\")\n                        .attr(\"d\", tooltipLenGen(tooltipData.slice(start, end + 1)))\n                        .attr(\"stroke\", COLOR_SEASONAL)\n                        .attr(\"stroke-width\", \"3px\")\n                        .attr(\"fill\", \"none\")\n                }\n\n                let legendLayer = tooltipLayer.append(\"g\")\n                    .style(\"font-size\", \"6px\")\n                    .style(\"font-weight\", \"bold\")\n                    .style(\"font-family\", ENGFONT)\n                    .style(\"color\", COLOR_TOOLTIP_DARK)\n                legendLayer.append(\"line\")\n                    .attr(\"x1\", \"6px\")\n                    .attr(\"y1\", \"8px\")\n                    .attr(\"x2\", \"21px\")\n                    .attr(\"y2\", \"8px\")\n                    .attr(\"stroke-width\", \"2px\")\n                    .attr(\"stroke\", \"#FFBB8A\")\n                    .attr(\"stroke-dasharray\", \"6, 3\")\n                    .attr(\"fill\", \"none\")\n                legendLayer.append(\"text\")\n                    .attr(\"x\", \"25px\") // 6 + 15 + 4\n                    .attr(\"y\", \"10px\")\n                    .text(\"Seasonality\")\n                legendLayer.append(\"text\")\n                    .attr(\"x\", \"135px\")\n                    .attr(\"y\", \"10px\")\n                    .text(\"Interval \" + intervalString)\n            })\n    }\n}\n\nlet renderDetailValue = (containerSelector, rawPath, x, y, height,\n    data, breakdown, measureName, tick_format, tooltipLayer) => {\n    let detailValueTooltip = d3.select(containerSelector)\n        .append(\"div\")\n        .attr(\"id\", \"value-tooltip\")\n        .style(\"z-index\", 2000)\n        .style(\"width\", \"fit-content\")\n        .style(\"height\", \"40px\")\n        .style(\"opacity\", 0)\n        .style(\"position\", \"absolute\")\n        .style(\"pointer-events\", \"none\")\n        .style(\"border-radius\", \"4px\")\n        .style(\"background\", \"#FFFFFF\")\n        .style(\"box-shadow\", \"0 0 5px #888888\")\n        .style(\"padding\", \"5px\")\n\n    let detailValueTitle = detailValueTooltip.append(\"span\")\n        .style(\"font\", `9px ${ENGFONT}`)\n        .style(\"font-weight\", \"bold\")\n        .style(\"display\", \"block\")\n        .style(\"color\", \"#000000\")\n    let detailValueContent = detailValueTooltip.append(\"svg\")\n        .attr(\"width\", \"95px\")\n        .attr(\"height\", \"30px\")\n\n    let detailValueColor = detailValueContent.append(\"circle\")\n        .attr(\"r\", 4)\n        .attr(\"cx\", \"5px\")\n        .attr(\"cy\", \"12px\")\n    let detailValueText = detailValueContent.append(\"text\")\n        .style(\"font\", `8px ${ENGFONT}`)\n        .style(\"color\", \"#000000\")\n        .attr(\"x\", \"14px\")\n        .attr(\"y\", \"14px\")\n\n    rawPath.on(\"mouseover\", function (d) {\n        detailValueTooltip.transition()\n            .duration(200)\n            .style(\"opacity\", .9)\n        detailValue.transition()\n            .duration(200)\n            .style(\"opacity\", 1)\n    })\n        .on(\"mouseout\", function (d) {\n            // If the mouse is exactly on the data point, \n            // then the mouse will on the circle instead of the path\n            // So here we should keep the tooltip shown when the mouse is still on the circle\n            let currentElement = document.elementFromPoint(d3.event.pageX, d3.event.pageY)\n            if (currentElement !== detailValueCircle.node()) {\n                detailValueTooltip.transition()\n                    .duration(500)\n                    .style(\"opacity\", 0)\n                detailValue.transition()\n                    .duration(500)\n                    .style(\"opacity\", 0)\n            }\n        })\n        .on(\"mousemove\", function (d) {\n            let result = { posX: d3.mouse(this)[0], posY: d3.mouse(this)[1] }\n            let x0 = x.invert(d3.mouse(this)[0])\n            let currentIndex = bisectDate(data, x0, 1)\n            let time0 = parseTime(data[currentIndex - 1][breakdown[0].field])\n            let time1 = parseTime(data[currentIndex][breakdown[0].field])\n            let currentTime = x0 - time0 > time1 - x0 ? time1 : time0\n            let currentValue = currentTime === time0 ? data[currentIndex - 1][measureName] : data[currentIndex][measureName]\n            let title = tick_format(currentTime)\n            detailValueTooltip.style(\"left\", (result.posX + 30) + \"px\")\n                .style(\"top\", (result.posY + 20) + \"px\")\n            detailValueTitle.html(title)\n            detailValueColor.style(\"fill\", COLOR_REGULAR)\n            detailValueText.html(measureName + \": \" + currentValue.toFixed(2))\n\n            detailValueLine.attr(\"x1\", x(currentTime))\n            detailValueLine.attr(\"x2\", x(currentTime))\n            detailValueCircle.attr(\"cx\", x(currentTime))\n            detailValueCircle.attr(\"cy\", y(currentValue))\n            detailValueCircle.attr(\"stroke\", COLOR_REGULAR)\n        })\n\n    let bisectDate = d3.bisector(function (d) { return parseTime(d[breakdown[0].field]) }).left\n    let detailValue = tooltipLayer.append(\"g\")\n        .style(\"opacity\", 0)\n    let detailValueLine = detailValue.append(\"line\")\n        .attr(\"y1\", height - 20)\n        .attr(\"y2\", 0)\n        .attr(\"stroke-width\", \"2px\")\n        .attr(\"stroke\", COLOR_GRID)\n        .attr(\"stroke-dasharray\", \"6, 3\")\n    let detailValueCircle = detailValue.append(\"circle\")\n        .attr(\"r\", 3)\n        .attr(\"fill\", \"#FFFFFF\")\n        .attr(\"stroke-width\", \"2\")\n        .style(\"box-shadow\", \"0 0 5px #888888\")\n        .on(\"mouseover\", function (d) {\n            // FIXME: This is a nit\n            // Even mouse is not on the path, the tooltip will still be shown \n            // but the error area is small\n            detailValueTooltip.transition()\n                .duration(200)\n                .style(\"opacity\", .9)\n            detailValue.transition()\n                .duration(200)\n                .style(\"opacity\", 1)\n        }).on(\"mouseout\", function (d) {\n            // If the mouse is exactly on the data point, \n            // then the mouse will on the circle instead of the path\n            // So here we should hide all the tooltip when moving mouse out of the circle\n            detailValueTooltip.transition()\n                .duration(500)\n                .style(\"opacity\", 0)\n            detailValue.transition()\n                .duration(500)\n                .style(\"opacity\", 0)\n        })\n}\n\nlet extendYAxis = (data, measureField) => {\n    let minValue = d3.max(data.map(function (d) { return measureField === undefined ? d : d[measureField] }))\n    let maxValue = d3.min(data.map(function (d) { return measureField === undefined ? d : d[measureField] }))\n    return [maxValue + (maxValue - minValue) * 0.2, minValue - (maxValue - minValue) * 0.2]\n}\n\nexport default Seasonality;","import * as d3 from 'd3';\nimport Chart from '../../chart';\nimport { parseTime, formatTick, formatTicksCount } from '../constant/timeConstant'\n\nconst ENGFONT = \"OPPOSans\";\nconst COLOR_REGULAR = \"#6C8EF2\";\nconst COLOR_ELLIPSE = \"#E4E4E4\";\nconst COLOR_CIRCLE = \"#F28AB3\";\nconst TRANSPARENCY_ELLIPSE = 0.7;\nconst COLOR_STD = \"#8ED9AB\";\nconst COLOR_TEXT = \"#000000\";\nconst TRANSPARENCY_STD = 0.3;\nconst SERIES_COLORS = [\"#6C8EF2\", \"#E1944E\", \"#8B65BA\"]\n\nconst COLOR_GRID = \"#E6E6E6\";\nconst COLOR_AXIS = \"#000000\";\n\nclass MultivariateDistribution extends Chart {\n    constructor() {\n        super();\n        this._x = '';\n        this._y = '';\n    }\n\n    display() {\n        let factData = this.factdata();\n        let breakdown = this.breakdown();\n        let focus = this.focus();\n        let focusMeasure = []\n\n        // set data\n        let data = factData.sort((a, b) => parseTime(a[breakdown[0].field]) - parseTime(b[breakdown[0].field]))\n        if (focus.length === 0) return\n\n        // set the dimensions and margins of the graph\n        let chartSize = { width: 550, height: 440 }\n        let margin = {\n            \"top\": 15,\n            \"right\": 10,\n            \"bottom\": 15,\n            \"left\": 60\n        }\n        let tickWidth = 2\n\n        let containerSelector = this.container()\n        let svg = d3.select(containerSelector)\n            .append(\"svg\")\n            .attr(\"width\", chartSize.width)\n            .attr(\"height\", chartSize.height)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + (margin.left + 10) + \",\" + margin.top + \")\")\n            .attr(\"font-family\", ENGFONT);\n\n        var means = []\n        var stds = []\n        var rxs = []\n        var rys = []\n        var rads = []\n        var mins = []\n        var maxs = []\n        let tempList = []\n        for (let distr of focus) {\n            if (!tempList.includes(distr.field)) {\n                tempList.push(distr.field)\n                focusMeasure.push({ \"field\": distr.field })\n            }\n        }\n        let oneChartWidth = Math.floor(chartSize.width / focusMeasure.length)\n        let oneChartHeight = Math.floor(chartSize.height / focusMeasure.length)\n        for (let distr of focus) {\n            for (let j = 0; j < focusMeasure.length; j++) {\n                if (distr.field === focusMeasure[j].field) {\n                    if (distr.name === \"mean\") {\n                        means[j] = distr.value\n                    } else if (distr.name === \"std\") {\n                        stds[j] = distr.value\n                    } else if (distr.name === \"a\") {\n                        rxs[j] = distr.value\n                    } else if (distr.name === \"b\") {\n                        rys[j] = distr.value\n                    } else if (distr.name === \"rad\") {\n                        rads[j] = distr.value\n                    } else if (distr.name === 'min') {\n                        mins[j] = distr.value\n                    } else if (distr.name === 'max') {\n                        maxs[j] = distr.value\n                    }\n                }\n            }\n        }\n\n        let tooltipLayer = svg.append('g').attr('class', 'tooltip')\n        for (let i = 0; i <= focusMeasure.length - 1; i++) {\n            for (let j = 0; j <= focusMeasure.length - 1; j++) {\n                let startX = oneChartWidth * i\n                let startY = oneChartHeight * j\n                if (i === j) {\n                    let x = d3.scaleTime()\n                        .range([startX, startX + oneChartWidth / 2])\n                    // .padding(0.1);\n                    let y = d3.scaleLinear()\n                        .range([startY + oneChartWidth / 2, startY]);\n                    x.domain(d3.extent(data, function (d) { return parseTime(d[breakdown[0].field]); }));\n                    y.domain(d3.extent([].concat(\n                        // lower boundary minus margin\n                        data.map(function (d) { return d[focusMeasure[i].field] * 0.95 }),\n                        // upper boundary add margin\n                        data.map(function (d) { return d[focusMeasure[i].field] * 1.05 })\n                    )));\n\n                    // add the x Axis\n                    let format_TicksCount = formatTicksCount(data[0][breakdown[0].field]);\n                    let tick_format = formatTick(data[0][breakdown[0].field]);\n                    let axisX = d3.axisBottom(x).tickFormat(tick_format)\n                    if (format_TicksCount === d3.timeYear) {\n                        axisX.ticks(format_TicksCount)\n                    }\n\n                    let mean = means[i]\n                    let std = [mean - 2 * stds[i], mean + 2 * stds[i]]\n                    let min = mins[i]\n                    let max = maxs[i]\n                    let xLeft = x(parseTime(data[0][breakdown[0].field]));\n                    let xRight = x(parseTime(data[data.length - 1][breakdown[0].field]));\n\n                    // std\n                    svg.append('rect')\n                        .attr('x', xLeft)\n                        .attr('y', y(std[1]))\n                        .attr('width', xRight - xLeft)\n                        .attr(\"height\", y(std[0]) - y(std[1]))\n                        .attr('fill', COLOR_STD)\n                        .attr('opacity', TRANSPARENCY_STD);\n\n                    let lineLayer = svg.append(\"g\").attr('class', 'lineLayer')\n                    // line\n                    lineLayer.append('g').selectAll('line.line')\n                        .data(y.ticks(5)).enter().append('line')\n                        .attr('x1', startX)\n                        .attr('x2', startX + oneChartWidth / 2)\n                        .attr('y1', function (d) { return y(d) })\n                        .attr('y2', function (d) { return y(d) })\n                        .attr('stroke', COLOR_GRID)\n                        .attr('stroke-width', '2px')\n                    // min\n                    tooltipLayer.append('line')\n                        .attr('x1', xLeft)\n                        .attr('y1', y(min))\n                        .attr('x2', xRight)\n                        .attr('y2', y(min))\n                        .attr('stroke-width', '1px')\n                        .attr('stroke', 'black')\n                        .attr('stroke-dasharray', '6px');\n\n                    // max\n                    tooltipLayer.append('line')\n                        .attr('x1', xLeft)\n                        .attr('y1', y(max))\n                        .attr('x2', xRight)\n                        .attr('y2', y(max))\n                        .attr('stroke-width', '1px')\n                        .attr('stroke', 'black')\n                        .attr('stroke-dasharray', '6px');\n\n                    let lineLayer2 = svg.append(\"g\").attr('class', 'lineLayer')\n                    let lineGen = d3.line().curve(d3.curveMonotoneX)\n                        .x(function (d) {\n                            return x(parseTime(d[breakdown[0].field]));\n                        })\n                        .y(function (d) {\n                            return y(d[focusMeasure[i].field]);\n                        })\n                    lineLayer2.append('path')\n                        .attr('d', lineGen(data))\n                        .attr('stroke', COLOR_REGULAR)\n                        .attr('stroke-width', '1px')\n                        .attr('fill', 'none')\n\n                    let tickValues = [];\n                    tickValues.push(parseTime(data[10][breakdown[0].field]))\n                    tickValues.push(parseTime(data[data.length - 10][breakdown[0].field]))\n                    axisX.tickValues(tickValues)\n\n\n                    let tooltipLayer2 = svg.append('g').attr('class', 'tooltip');\n\n                    let tooltip = tooltipLayer2.append(\"text\")\n                        .attr(\"font-size\", '5.5px')\n                        .attr(\"font-family\", ENGFONT)\n                        .attr(\"fill\", COLOR_TEXT);\n                    tooltip.append(\"tspan\")\n                        .text(\"Min: \" + min)\n                        .attr(\"dy\", tooltip.selectAll(\"tspan\").node().getBBox().height * 0.9);\n                    let textWidth = tooltip.node().getBBox().width;\n                    let textHeight = tooltip.node().getBBox().height * 1.5;\n                    tooltip.attr(\"width\", textWidth)\n                        .attr(\"height\", textHeight)\n                        .attr(\"x\", xRight - textWidth)\n                        .attr(\"y\", y(min) - textHeight);\n\n                    tooltip = tooltipLayer2.append(\"text\")\n                        .attr(\"font-size\", '5.5px')\n                        .attr(\"font-family\", ENGFONT)\n                        .attr(\"font-weight\", \"light\")\n                        .attr(\"fill\", COLOR_TEXT);\n                    tooltip.append(\"tspan\")\n                        .text(\"Max: \" + max)\n                        .attr(\"dy\", tooltip.selectAll(\"tspan\").node().getBBox().height * 0.9);\n                    textWidth = tooltip.node().getBBox().width;\n                    textHeight = tooltip.node().getBBox().height * 1.5;\n                    tooltip.attr(\"width\", textWidth)\n                        .attr(\"height\", textHeight)\n                        .attr(\"x\", xRight - textWidth)\n                        .attr(\"y\", y(max) - textHeight);\n\n\n                    tooltipLayer2.append('line')\n                        .attr('x1', xLeft)\n                        .attr('y1', y(mean))\n                        .attr('x2', xRight)\n                        .attr('y2', y(mean))\n                        .attr('stroke-width', '1px')\n                        .attr('stroke', 'black');\n                    tooltip = tooltipLayer2.append(\"text\")\n                        .attr(\"font-size\", '5.5px')\n                        .attr(\"font-family\", ENGFONT)\n                        .attr(\"font-weight\", \"light\")\n                        .attr(\"fill\", COLOR_TEXT);\n                    tooltip.append(\"tspan\")\n                        .text(\"Avg: \" + mean)\n                        .attr(\"dy\", tooltip.selectAll(\"tspan\").node().getBBox().height * 0.9);\n\n                    textWidth = tooltip.node().getBBox().width;\n                    textHeight = tooltip.node().getBBox().height * 1.5;\n\n                    svg.append('rect')\n                        .attr('x', xRight - textWidth)\n                        .attr('y', y(mean) - textHeight * 1.15)\n                        .attr('width', textWidth)\n                        .attr(\"height\", textHeight)\n                        .attr('fill', 'white')\n                        .attr('opacity', 0.8);\n\n                    tooltip.attr(\"width\", textWidth)\n                        .attr(\"height\", textHeight)\n                        .attr(\"x\", xRight - textWidth)\n                        .attr(\"y\", y(mean) - textHeight);\n\n                    let tooltipLayer3 = svg.append('g').attr('class', 'tooltip').style('background-color', 'white').style('opacity', 0.8);\n                    let tooltip2 = tooltipLayer3.append(\"text\")\n                        .attr(\"font-size\", '5.5px')\n                        .attr(\"font-family\", ENGFONT)\n                        .attr(\"fill\", COLOR_TEXT);\n                    tooltip2.append(\"tspan\")\n                        .text(\"Avg: \" + mean)\n                        .attr(\"dy\", tooltip2.selectAll(\"tspan\").node().getBBox().height * 0.9);\n\n                    tooltip2.attr(\"width\", textWidth)\n                        .attr(\"height\", textHeight)\n                        .attr(\"x\", xRight - textWidth)\n                        .attr(\"y\", y(mean) - textHeight);\n\n                    // renderDetailValue(containerSelector, rawPath, x, y, 90, data, breakdown, breakdown[i].field, tick_format, tooltipLayer)\n\n                    svg.append(\"g\")\n                        .attr(\"class\", \"xAxis\")\n                        .attr(\"transform\", \"translate(0,\" + (startY + oneChartWidth / 2) + \")\")\n                        .call(axisX)\n                        .call(g => {\n                            g.attr(\"font-size\", '8px');\n                            g.attr(\"font-family\", ENGFONT);\n                            g.attr(\"font-weight\", 'light')\n\n                            let domainD = g.selectAll(\".domain\").attr(\"d\");\n                            domainD = domainD.replace(\"M-6\", \"M-\" + (6 * chartSize.width / 640))\n                            domainD = domainD.replace(\"H-6\", \"H-\" + (6 * chartSize.width / 640))\n                            g.selectAll(\".domain\").attr(\"d\", domainD).attr(\"stroke-width\", tickWidth);\n                            g.selectAll(\".tick\")\n                                .selectAll(\"line\")\n                                .attr(\"stroke\", COLOR_AXIS)\n                                .attr(\"stroke-width\", tickWidth)\n                                .attr(\"y2\", 5);\n\n                            g.selectAll(\"text\")\n                                .attr(\"y\", 10)\n                        });\n\n\n                    // add the y Axis\n                    let yAxisLayer = svg.append(\"g\").attr(\"class\", \"yAxis\")\n                    yAxisLayer.attr(\"transform\", \"translate(\" + startX + \",0)\")\n                        .call(d3.axisLeft(y).ticks(5).tickFormat(function (d) {\n                            if ((d / 1000000) >= 1) {\n                                d = d / 1000000 + \"M\";\n                            } else if ((d / 1000) >= 1) {\n                                d = d / 1000 + \"K\";\n                            }\n                            return d;\n                        }))\n                        .call(g => {\n                            g.attr(\"font-size\", '8px')\n                            g.attr(\"font-weight\", 'light')\n                            g.attr(\"font-family\", ENGFONT)\n                            let domainD = g.selectAll(\".domain\").attr(\"d\");\n                            domainD = domainD.replace(\"M-6\", \"M-\" + (6 * chartSize.width / 640))\n                            domainD = domainD.replace(\"H-6\", \"H-\" + (6 * chartSize.width / 640))\n                            g.selectAll(\".domain\").attr(\"d\", domainD).attr(\"stroke-width\", tickWidth);\n                            g.selectAll(\".tick\")\n                                .select(\"line\")\n                                .attr(\"stroke\", COLOR_AXIS)\n                                .attr(\"stroke-width\", tickWidth)\n                                .attr(\"x2\", -5);\n\n                            g.selectAll(\"text\")\n                                .attr(\"x\", -10);\n                        })\n\n                    yAxisLayer.append(\"text\")\n                        .attr(\"transform\", \"rotate(-90)\")\n                        .attr(\"y\", -35)\n                        .attr(\"x\", 0 - startY - 45)\n                        .style(\"text-anchor\", \"middle\")\n                        .style(\"font-size\", \"10px\")\n                        .attr(\"font-weight\", \"heavy\")\n                        .attr(\"fill\", SERIES_COLORS[i])\n                        .text(cutTitle(focusMeasure[i].field))\n                } else {\n                    let x = d3.scaleLinear()\n                        .range([startX, startX + oneChartWidth / 2])\n                    let y = d3.scaleLinear()\n                        .range([startY + oneChartWidth / 2, startY]);\n                    x.domain(d3.extent([].concat(\n                        // lower boundary minus margin\n                        data.map(function (d) { return d[focusMeasure[i].field] * 0.95 }),\n                        // upper boundary add margin\n                        data.map(function (d) { return d[focusMeasure[i].field] * 1.05 })\n                    )));\n                    y.domain(d3.extent([].concat(\n                        // lower boundary minus margin\n                        data.map(function (d) { return d[focusMeasure[j].field] * 0.95 }),\n                        // upper boundary add margin\n                        data.map(function (d) { return d[focusMeasure[j].field] * 1.05 })\n                    )));\n                    // Scale the range of the data in the domains\n\n                    let cx = means[i]\n                    let cy = means[j]\n                    let xmin = mins[i]\n                    let ymin = mins[j]\n                    let xmax = maxs[i]\n                    let ymax = maxs[j]\n                    let index, rx, ry, rad\n                    if ((i === 0 && j === 1) || (i === 1 && j === 0)) {\n                        index = 0\n                    } else if ((i === 0 && j === 2) || (i === 2 && j === 0)) {\n                        index = 1\n                    } else if ((i === 1 && j === 2) || (i === 2 && j === 1)) {\n                        index = 2\n                    }\n                    if (i < j) {\n                        rx = rxs[index]\n                        ry = rys[index]\n                        rad = -rads[index]\n                    } else {\n                        rx = rys[index]\n                        ry = rxs[index]\n                        rad = rads[index] - 180\n                    }\n\n                    let g = svg.append(\"g\")\n                    g.selectAll(\"circle\")\n                        .data(data)\n                        .enter()\n                        .append(\"circle\")\n                        .attr(\"cx\", function (d) {\n                            return x(d[focusMeasure[i].field]);\n                        })\n                        .attr(\"cy\", function (d) {\n                            return y(d[focusMeasure[j].field]);\n                        })\n                        .attr(\"r\", '2.5px')\n                        .attr('fill', COLOR_CIRCLE);\n\n                    let xAxisLayer = svg.append(\"g\").attr(\"class\", \"xAxis\")\n                    xAxisLayer.attr(\"transform\", \"translate(0,\" + (startY + oneChartWidth / 2) + \")\")\n                        .call(d3.axisBottom(x).ticks(3).tickFormat(function (d) {\n                            if ((d / 1000000) >= 1) {\n                                d = d / 1000000 + \"M\";\n                            } else if ((d / 1000) >= 1) {\n                                d = d / 1000 + \"K\";\n                            }\n                            return d;\n                        }))\n                        .call(g => {\n                            g.attr(\"font-size\", '8px');\n                            g.attr(\"font-family\", ENGFONT);\n                            g.attr(\"font-weight\", 'light')\n\n                            let domainD = g.selectAll(\".domain\").attr(\"d\");\n                            domainD = domainD.replace(\"M-6\", \"M-\" + (6 * chartSize.width / 640))\n                            domainD = domainD.replace(\"H-6\", \"H-\" + (6 * chartSize.width / 640))\n                            g.selectAll(\".domain\").attr(\"d\", domainD).attr(\"stroke-width\", tickWidth);\n                            g.selectAll(\".tick\")\n                                .selectAll(\"line\")\n                                .attr(\"stroke\", COLOR_AXIS)\n                                .attr(\"stroke-width\", tickWidth)\n                                .attr(\"y2\", 5);\n\n                            g.selectAll(\"text\")\n                                .attr(\"y\", 10)\n                        });\n\n\n                    // add the y Axis\n                    let yAxisLayer = svg.append(\"g\").attr(\"class\", \"yAxis\")\n                    yAxisLayer.attr(\"transform\", \"translate(\" + startX + \",0)\")\n                        .call(d3.axisLeft(y).ticks(5).tickFormat(function (d) {\n                            if ((d / 1000000) >= 1) {\n                                d = d / 1000000 + \"M\";\n                            } else if ((d / 1000) >= 1) {\n                                d = d / 1000 + \"K\";\n                            }\n                            return d;\n                        }))\n                        .call(g => {\n                            g.attr(\"font-size\", '8px')\n                            g.attr(\"font-weight\", 'light')\n                            g.attr(\"font-family\", ENGFONT)\n                            let domainD = g.selectAll(\".domain\").attr(\"d\");\n                            domainD = domainD.replace(\"M-6\", \"M-\" + (6 * chartSize.width / 640))\n                            domainD = domainD.replace(\"H-6\", \"H-\" + (6 * chartSize.width / 640))\n                            g.selectAll(\".domain\").attr(\"d\", domainD).attr(\"stroke-width\", tickWidth);\n                            g.selectAll(\".tick\")\n                                .select(\"line\")\n                                .attr(\"stroke\", COLOR_AXIS)\n                                .attr(\"stroke-width\", tickWidth)\n                                .attr(\"x2\", -5);\n\n                            g.selectAll(\"text\")\n                                .attr(\"x\", -10);\n                        })\n\n                    let title = xAxisLayer.append(\"text\")\n                        .attr(\"y\", 30)\n                        .attr(\"x\", startX + 45)\n                        .style(\"text-anchor\", \"middle\")\n                        .style(\"font-size\", \"10px\")\n                        .attr(\"fill\", SERIES_COLORS[i])\n                        .text(cutTitle(focusMeasure[i].field))\n\n                    title = yAxisLayer.append(\"text\")\n                        .attr(\"transform\", \"rotate(-90)\")\n                        .attr(\"y\", -35)\n                        .attr(\"x\", 0 - startY - 45)\n                        .style(\"text-anchor\", \"middle\")\n                        .style(\"font-size\", \"10px\")\n                        .attr(\"fill\", SERIES_COLORS[j])\n                        .text(cutTitle(focusMeasure[j].field))\n                }\n            }\n        }\n\n        return svg;\n\n    }\n}\n\nlet getSizeBySize = (size, chartSize, hasSeries = false, moreThan6 = false) => {\n    let tickSize, annotationSize, tickWidth, dotR, strokeWidth;\n\n    switch (size) {\n        case \"small\":\n            tickSize = 10;\n            annotationSize = 16;\n            tickWidth = 2;\n            dotR = 5;\n            strokeWidth = 2;\n            break;\n        case \"middle\":\n            tickSize = 13;\n            annotationSize = 20;\n            tickWidth = 2;\n            dotR = 5;\n            strokeWidth = 3;\n            break;\n        case \"wide\":\n            tickSize = 16;\n            annotationSize = 26;\n            dotR = 7;\n            tickWidth = 2;\n            strokeWidth = 3;\n            break;\n        case \"large\":\n        default:\n            tickSize = 20;\n            annotationSize = 40;\n            tickWidth = 2;\n            dotR = 10;\n            strokeWidth = 3;\n            break;\n    }\n    const chartMargin = {\n        \"small\": {\n            \"top\": 15,\n            \"right\": 20,\n            \"bottom\": 15,\n            \"left\": 20\n        },\n        \"middle\": {\n            \"top\": 15,\n            \"right\": 20,\n            \"bottom\": 15,\n            \"left\": 20\n        },\n        \"wide\": {\n            \"top\": 15,\n            \"right\": 20,\n            \"bottom\": 15,\n            \"left\": 20\n        },\n        \"large\": {\n            \"top\": 15,\n            \"right\": 20,\n            \"bottom\": 15,\n            \"left\": 20\n        }\n    };\n    let margin = chartMargin[size];\n    return { chartSize: chartSize, margin: margin, tickSize: tickSize, annotationSize: annotationSize, tickWidth, dotR, strokeWidth }\n}\n\nconst cutTitle = (title) => {\n    if (title.length > 16) {\n        return title.slice(0, 16) + \"...\"\n    } else {\n        return title\n    }\n}\n\nexport default MultivariateDistribution;","import * as d3 from \"d3\";\nimport Chart from \"../../chart\";\nimport { uuid } from \"../constant/uuid\";\nimport { parseTime, formatTick, formatTicksCount } from '../constant/timeConstant'\nimport { tooltipContainerId } from \"../constant/getContainer\";\nimport { getPosition } from \"../constant/getPosition\";\nconst ENGFONT = \"OPPOSans\";\nconst COLOR_REGULAR = \"#6C8EF2\";\nconst COLOR_FREQUENT = \"#FFC111\";\nconst COLOR_GRID = \"#E6E6E6\";\nconst COLOR_TOOLTIP_DARK = \"#3E3A39\";\nconst COLOR_TOOLTIP_LIGHT = \"#FCFBE7\"\nconst COLOR_AXIS = \"#000000\";\nconst TICK_WIDTH = 2;\n\nclass FrequentPattern extends Chart {\n    constructor() {\n        super();\n        this._x = \"\";\n        this._y = \"\";\n        this.tooltipId = uuid()\n\n    }\n    display() {\n        /**\n        * The main drawing function\n        */\n        //---------------parse fact-------------------------\n        let factResult = this.parseFact()\n        let data = factResult._data\n        let measure = factResult._measure\n        let breakdown = factResult._breakdown\n        let focus = factResult._focus\n        let measureName = factResult._measureName\n        if (focus.length === 0) return\n        if (breakdown[1] && breakdown[1].field) return;\n\n        //---------------init chart size--------------------\n        let chartResult = this.setChartStandard()\n        let chartSize = chartResult._chartSize\n        let width = chartResult._width\n        let height = chartResult._height\n        let margin = chartResult._margin\n\n        //------------------init---------------------------\n        let containerSelector = tooltipContainerId\n        //init svg\n        let svg = this.initSvg(chartSize, margin)\n        //init layer\n        let lineLayer = svg.append(\"g\").attr(\"class\", \"lineLayer\")\n        let tooltipLayer = svg.append(\"g\").attr(\"class\", \"tooltip\");\n\n        //------------------draw x axis-------------------\n\n        /**\n         * Draw the X axis\n         */\n        // set the ranges\n        let x = d3.scaleTime().range([0, width])\n        // Scale the range of the data in the domains\n        x.domain(d3.extent(data, function (d) { return parseTime(d[breakdown[0].field]); }));\n        // add the x Axis\n        let format_TicksCount = formatTicksCount(data[0][breakdown[0].field]);\n        let tick_format = formatTick(data[0][breakdown[0].field]);\n        let axisX = d3.axisBottom(x).tickFormat(tick_format)\n        if (format_TicksCount === d3.timeYear) {\n            axisX.ticks(format_TicksCount)\n        }\n\n        /**\n         * Draw the Y axis\n         */\n        // .padding(0.1);\n        let y = d3.scaleLinear()\n            .range([height - 20, 0]);\n\n        y.domain(d3.extent([].concat(\n            // lower boundary minus margin\n            data.map(function (d) { return d[measure[0].field] * 0.95 }),\n            // upper boundary add margin\n            data.map(function (d) { return d[measure[0].field] * 1.05 })\n        )));\n\n        //------------------draw original line------------\n        let originLineResult = this.drawBackLine(x, y, data, lineLayer, breakdown, measureName, chartSize)\n        let rawPath = originLineResult._rawPath\n        let lineGen = originLineResult._lineGen\n\n        //-----------------draw frequent pattern insight---\n        let tooltipPathList = this.drawFrequentPattern(x, y, data, breakdown, focus, measureName, tooltipLayer, height, axisX, lineGen)\n        if (this._showTooltip) {\n            renderDetailValue(containerSelector, rawPath, x, y, height, data, breakdown, measureName, tick_format, tooltipLayer)\n            renderTooltip(this.tooltipId, containerSelector, tick_format, data, breakdown, tooltipPathList, focus)\n        }\n\n        // draw the x axis\n        svg.append(\"g\")\n            .attr(\"class\", \"xAxis\")\n            .attr(\"transform\", \"translate(0,\" + (height - 20) + \")\")\n            .call(axisX)\n            .call(g => {\n                g.attr(\"font-size\", \"10px\");\n                g.attr(\"font-family\", ENGFONT);\n                g.attr(\"font-weight\", \"lighter\")\n\n                let domainD = g.selectAll(\".domain\").attr(\"d\");\n                domainD = domainD.replace(\"6V\", (6 * chartSize.height / 320) + \"V\")\n                domainD = domainD.replace(\"V6\", \"V\" + (6 * chartSize.height / 320))\n                g.selectAll(\".domain\").attr(\"d\", domainD).attr(\"stroke-width\", TICK_WIDTH);\n                g.selectAll(\".tick\")\n                    .selectAll(\"line\")\n                    .attr(\"stroke\", COLOR_AXIS)\n                    .attr(\"stroke-width\", TICK_WIDTH)\n                    .attr(\"y2\", 5);\n\n                g.selectAll(\"text\")\n                    .attr(\"y\", 10)\n                // .attr(\"transform\", \"rotate(-20)\")\n                // .attr(\"style\", \"text-anchor: end\")\n            });\n\n        // add the y Axis\n        svg.append(\"g\")\n            .attr(\"class\", \"yAxis\")\n            // .attr(\"transform\", `translate(,0)`)\n            .call(d3.axisLeft(y).ticks(5).tickFormat(function (d) {\n                if ((d / 1000000) >= 1) {\n                    d = d / 1000000 + \"M\";\n                } else if ((d / 1000) >= 1) {\n                    d = d / 1000 + \"K\";\n                }\n                return d;\n            }))\n            .call(g => {\n                g.attr(\"font-size\", \"10px\")\n                g.attr(\"font-weight\", \"lighter\")\n                g.attr(\"font-family\", ENGFONT)\n                let domainD = g.selectAll(\".domain\").attr(\"d\");\n                domainD = domainD.replace(\"M-6\", \"M-\" + (6 * chartSize.width / 640))\n                domainD = domainD.replace(\"H-6\", \"H-\" + (6 * chartSize.width / 640))\n                g.selectAll(\".domain\").attr(\"d\", domainD).attr(\"stroke-width\", TICK_WIDTH);\n                g.selectAll(\".tick\")\n                    .select(\"line\")\n                    .attr(\"stroke\", COLOR_AXIS)\n                    .attr(\"stroke-width\", TICK_WIDTH)\n                    .attr(\"x2\", -5);\n\n                g.selectAll(\"text\")\n                    .attr(\"x\", -10);\n            })\n\n        return svg;\n    }\n    parseFact() {\n        /**\n         * Parse fact json\n         * return:The contents of each field in fact\n         */\n        let factData = this.factdata()\n        let measure = this.measure();\n        let breakdown = this.breakdown();\n        let focus = this.focus();\n        // set data\n        factData = factData.sort((a, b) => parseTime(a[breakdown[0].field]) - parseTime(b[breakdown[0].field]))\n        let data = factData;\n        let measureName = measure[0].aggregate === \"count\" ? \"COUNT\" : measure[0].field\n        return { _data: data, _measure: measure, _breakdown: breakdown, _focus: focus, _measureName: measureName }\n    }\n    setChartStandard() {\n        /** \n         * calculate size of the chart\n         * return chart size parameters\n         */\n        // set the dimensions and margins of the graph\n        let chartSize = { width: 600, height: 280 }\n        let margin = {\n            \"top\": 15,\n            \"right\": 20,\n            \"bottom\": 15,\n            \"left\": 20\n        }\n        let width = chartSize.width - margin.left - margin.right,\n            height = chartSize.height - margin.top - margin.bottom;\n        return { _width: width, _height: height, _chartSize: chartSize, _margin: margin }\n    }\n    initSvg(chartSize, margin) {\n        /**\n         * Initialize SVG based on the drawing area size\n         * return :svg \n         */\n        let svg = d3.select(this.container())\n            .append(\"svg\")\n            .attr(\"width\", chartSize.width)\n            .attr(\"height\", chartSize.height)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + (margin.left + 10) + \",\" + margin.top + \")\")\n            .attr(\"font-family\", ENGFONT);\n        return svg\n    }\n\n    drawBackLine(x, y, data, lineLayer, breakdown, measureName, chartSize) {\n        /**\n         * draw series line and back grid\n         */\n        lineLayer.append(\"g\").selectAll(\"line.line\")\n            .data(y.ticks(5)).enter().append(\"line\")\n            .attr(\"x1\", 0)\n            .attr(\"x2\", chartSize.width)\n            .attr(\"y1\", function (d) { return y(d) })\n            .attr(\"y2\", function (d) { return y(d) })\n            .attr(\"stroke\", COLOR_GRID)\n            .attr(\"stroke-width\", \"2px\")\n\n        let lineGen = d3.line().curve(d3.curveMonotoneX)\n            .x(function (d) {\n                return x(parseTime(d[breakdown[0].field]));\n            })\n            .y(function (d) {\n                return y(d[measureName]);\n            })\n        let rawPath = lineLayer.append(\"path\")\n            .attr(\"d\", lineGen(data))\n            .attr(\"stroke\", COLOR_REGULAR)\n            .attr(\"stroke-width\", \"2px\")\n            .attr(\"fill\", \"none\")\n        return { _rawPath: rawPath, _lineGen: lineGen }\n    }\n    drawFrequentPattern(x, y, data, breakdown, focus, measureName, tooltipLayer, height, axisX, lineGen) {\n        /**\n         * draw frequent-pattern insight\n         */\n        let tickValues = [];\n        let tooltipPathList = [];\n\n        for (let pattern of focus[0].patterns) {\n            let xLeft = x(parseTime(data[pattern.start][breakdown[0].field]));\n            let xRight = x(parseTime(data[pattern.end - 1][breakdown[0].field]));\n            // let yBottom = d3.max(data.slice(pattern.start, pattern.end + 1),\n            //     function (d) { return y(d[measureName]) })\n            let yTop = d3.min(data.slice(pattern.start, pattern.end + 1),\n                function (d) { return y(d[measureName]) })\n\n            tooltipLayer.append(\"line\")\n                .attr(\"x1\", xLeft)\n                .attr(\"y1\", y(data[pattern.start][measureName]))\n                .attr(\"x2\", xLeft)\n                .attr(\"y2\", height - 20)\n                .attr(\"stroke-width\", \"2px\")\n                .attr(\"stroke\", \"black\")\n                .attr(\"stroke-dasharray\", \"6, 3\");\n            tooltipLayer.append(\"line\")\n                .attr(\"x1\", xRight)\n                .attr(\"y1\", y(data[pattern.end][measureName]))\n                .attr(\"x2\", xRight)\n                .attr(\"y2\", height - 20)\n                .attr(\"stroke-width\", \"2px\")\n                .attr(\"stroke\", \"black\")\n                .attr(\"stroke-dasharray\", \"6, 3\");\n\n            tooltipPathList.push(\n                tooltipLayer.append(\"path\")\n                    .attr(\"d\", lineGen(data.slice(pattern.start, pattern.end + 1)))\n                    .attr(\"stroke\", COLOR_FREQUENT)\n                    .attr(\"stroke-width\", \"3px\")\n                    .attr(\"fill\", \"none\"))\n\n            let tooltip = tooltipLayer.append(\"text\")\n                .attr(\"font-size\", \"14px\")\n                .attr(\"font-family\", ENGFONT)\n                .attr(\"font-weight\", \"bold\")\n                .attr(\"fill\", COLOR_FREQUENT);\n            tooltip.append(\"tspan\")\n                .text(pattern.name)\n                .attr(\"dy\", tooltip.selectAll(\"tspan\").node().getBBox().height * 0.9);\n            let textWidth = tooltip.node().getBBox().width;\n            let textHeight = tooltip.node().getBBox().height;\n            tooltip.attr(\"width\", textWidth)\n                .attr(\"height\", textHeight)\n                .attr(\"x\", (xLeft + xRight - textWidth + 10) / 2)\n                .attr(\"y\", yTop - textHeight - 10);\n\n            tickValues.push(parseTime(data[pattern.start][breakdown[0].field]))\n            tickValues.push(parseTime(data[pattern.end][breakdown[0].field]))\n        }\n        axisX.tickValues(tickValues)\n        return tooltipPathList\n\n    }\n}\n\nlet renderTooltip = (tooltipId, containerSelector, tick_format, data, breakdown,\n    tooltipPathList, focus) => {\n    let hoverTooltip = d3.select(containerSelector)\n        .append(\"div\")\n        .attr(\"id\", \"hover-tooltip\")\n        .style(\"z-index\", 2000)\n        .style(\"width\", \"200px\")\n        .style(\"height\", \"115px\")\n        .style(\"opacity\", 0)\n        .style(\"position\", \"absolute\")\n        .style(\"pointer-events\", \"none\")\n        .style(\"padding-left\", \"10px\")\n    let hoverTooltipTitle = hoverTooltip.append(\"div\")\n        .style(\"align-items\", \"center\")\n        .style(\"height\", \"15px\")\n        .style(\"width\", \"100px\")\n        .style(\"border\", `2px solid ${COLOR_TOOLTIP_DARK}`)\n        .style(\"border-radius\", \"4px 4px 0px 0px\")\n        .style(\"padding-left\", \"5px\")\n        .style(\"padding-right\", \"5px\")\n        .style(\"background\", COLOR_TOOLTIP_DARK)\n        .style(\"font\", `8px ${ENGFONT}`)\n        .style(\"font-weight\", \"bold\")\n        .style(\"color\", COLOR_TOOLTIP_LIGHT)\n        .style(\"text-overflow\", \"ellipsis\")\n        .style(\"overflow\", \"hidden\")\n        .style(\"white-space\", \"nowrap\")\n\n    let hoverTooltipContent = hoverTooltip.append(\"div\")\n        .style(\"width\", \"200px\")\n        .style(\"height\", \"100px\")\n        .style(\"border\", `2px solid ${COLOR_TOOLTIP_DARK}`)\n        .style(\"border-radius\", \"0px 4px 4px 4px\")\n        .style(\"background\", COLOR_TOOLTIP_LIGHT)\n    hoverTooltipContent.append(\"span\")\n        .style(\"position\", \"absolute\")\n        .style(\"left\", \"-10px\")\n        .style(\"top\", \"60px\")\n        .style(\"border-width\", \"10px\")\n        .style(\"border-style\", \"dashed solid dashed dashed\")\n        .style(\"border-color\", `transparent ${COLOR_TOOLTIP_DARK} transparent transparent`)\n        .style(\"font-size\", 0)\n        .style(\"line-height\", 0)\n    hoverTooltipContent.append(\"em\")\n        .style(\"position\", \"absolute\")\n        .style(\"left\", \"-4px\")\n        .style(\"top\", \"62px\")\n        .style(\"border-width\", \"8px\")\n        .style(\"border-style\", \"dashed solid dashed dashed\")\n        .style(\"border-color\", `transparent ${COLOR_TOOLTIP_LIGHT} transparent transparent`)\n        .style(\"font-size\", 0)\n        .style(\"line-height\", 0)\n    hoverTooltipContent.append(\"div\")\n        .attr(\"id\", \"tooltip-chart\" + tooltipId)\n    // console.log(\"tooltip-chart\"+tooltipId)\n\n    let tooltipX = d3.scaleLinear()\n        .range([0, 195])\n    let tooltipY = d3.scaleLinear()\n        .range([90, 0]);\n    let tooltipLenGen = d3.line().curve(d3.curveMonotoneX)\n        .x(function (d) {\n            return tooltipX(d.x);\n        })\n        .y(function (d) {\n            return tooltipY(d.y);\n        })\n\n    for (let i = 0; i < tooltipPathList.length; i++) {\n        let pattern = focus[0]['patterns'][i]\n        let tooltipPath = tooltipPathList[i]\n        let tooltipData = []\n        let tooltipAvgData = []\n        for (let i = 0; i < pattern.normalized.length; i++) {\n            tooltipData.push({ x: i, y: pattern.normalized[i] })\n            tooltipAvgData.push({ x: i, y: focus[0].average[i] })\n        }\n        tooltipX.domain([0, pattern.normalized.length - 1]);\n        tooltipY.domain(d3.extent([].concat(\n            // lower boundary minus margin\n            tooltipData.map(function (d) { return d.y * 0.9 }),\n            // upper boundary add margin\n            tooltipData.map(function (d) { return d.y * 1.1 })\n        )));\n        tooltipPath\n            .on(\"mouseover\", function (d) {\n                hoverTooltip.transition()\n                    .duration(200)\n                    .style(\"opacity\", .9)\n            })\n            .on(\"mouseout\", function (d) {\n                hoverTooltip.transition()\n                    .duration(500)\n                    .style(\"opacity\", 0)\n            })\n            .on(\"mousemove\", function (d) {\n                let result = getPosition()\n                let title = tick_format(parseTime(data[pattern.start][breakdown[0].field])) + \"-\" +\n                    tick_format(parseTime(data[pattern.end][breakdown[0].field]))\n                hoverTooltip.style(\"left\", (result.posX + 30) + \"px\")\n                    .style(\"top\", (result.posY - 50) + \"px\")\n                // no need to render chart\n                if (d3.select(\"#tooltip-chart\" + tooltipId).node() === null) return\n                let previousSvg = d3.select(\"#tooltip-chart\" + tooltipId).node().getElementsByTagName(\"svg\")[0]\n                if (previousSvg && previousSvg.getAttribute(\"class\") === title) {\n                    return\n                }\n\n                // render chart\n                hoverTooltipTitle.html(title)\n                d3.select(\"#tooltip-chart\" + tooltipId).selectAll(\"*\").remove()\n                let tooltipLayer = d3.select(\"#tooltip-chart\" + tooltipId)\n                    .append(\"svg\")\n                    .attr(\"class\", title)\n                    .attr(\"width\", \"200\")\n                    .attr(\"height\", \"100\")\n                    .append(\"g\")\n                tooltipLayer.append(\"path\")\n                    .attr(\"d\", tooltipLenGen(tooltipData))\n                    .attr(\"stroke\", \"#FFC111\")\n                    .attr(\"stroke-width\", \"3px\")\n                    .attr(\"fill\", \"none\")\n                tooltipLayer.append(\"path\")\n                    .attr(\"d\", tooltipLenGen(tooltipAvgData))\n                    .attr(\"stroke\", \"#D2CFFD\")\n                    .attr(\"stroke-width\", \"3px\")\n                    .attr(\"fill\", \"none\")\n\n                let legendLayer = tooltipLayer.append(\"g\")\n                    .style(\"font-size\", \"6px\")\n                    .style(\"font-weight\", \"bold\")\n                    .style(\"font-family\", ENGFONT)\n                    .style(\"color\", COLOR_TOOLTIP_DARK)\n                legendLayer.append(\"rect\")\n                    .style(\"width\", \"15px\")\n                    .style(\"height\", \"5px\")\n                    .style(\"fill\", \"#FFC111\")\n                    .style(\"x\", \"6px\")\n                    .style(\"y\", \"6px\")\n                legendLayer.append(\"rect\")\n                    .style(\"width\", \"15px\")\n                    .style(\"height\", \"5px\")\n                    .style(\"fill\", \"#D2CFFD\")\n                    .style(\"x\", \"6px\")\n                    .style(\"y\", \"89px\")\n                legendLayer.append(\"text\")\n                    .attr(\"x\", \"25px\") // 6 + 15 + 4\n                    .attr(\"y\", \"10px\")\n                    .text(\"Selected\")\n                legendLayer.append(\"text\")\n                    .attr(\"x\", \"25px\") // 6 + 15 + 4\n                    .attr(\"y\", \"93px\")\n                    .text(\"Avg.\")\n            })\n    }\n}\n\nlet renderDetailValue = (containerSelector, rawPath, x, y, height,\n    data, breakdown, measureName, tick_format, tooltipLayer) => {\n    let detailValueTooltip = d3.select(containerSelector)\n        .append(\"div\")\n        .attr(\"id\", \"value-tooltip\")\n        .style(\"z-index\", 2000)\n        .style(\"width\", \"fit-content\")\n        .style(\"height\", \"40px\")\n        .style(\"opacity\", 0)\n        .style(\"position\", \"absolute\")\n        .style(\"pointer-events\", \"none\")\n        .style(\"border-radius\", \"4px\")\n        .style(\"background\", \"#FFFFFF\")\n        .style(\"box-shadow\", \"0 0 5px #888888\")\n        .style(\"padding\", \"5px\")\n    let detailValueTitle = detailValueTooltip.append(\"span\")\n        .style(\"font\", `9px ${ENGFONT}`)\n        .style(\"font-weight\", \"bold\")\n        .style(\"display\", \"block\")\n        .style(\"color\", \"#000000\")\n    let detailValueContent = detailValueTooltip.append(\"svg\")\n        .attr(\"width\", \"95px\")\n        .attr(\"height\", \"30px\")\n    let detailValueColor = detailValueContent.append(\"circle\")\n        .attr(\"r\", 4)\n        .attr(\"cx\", \"5px\")\n        .attr(\"cy\", \"12px\")\n    let detailValueText = detailValueContent.append(\"text\")\n        .style(\"font\", `8px ${ENGFONT}`)\n        .style(\"color\", \"#000000\")\n        .attr(\"x\", \"14px\")\n        .attr(\"y\", \"14px\")\n\n    rawPath.on(\"mouseover\", function (d) {\n        detailValueTooltip.transition()\n            .duration(200)\n            .style(\"opacity\", .9)\n        detailValue.transition()\n            .duration(200)\n            .style(\"opacity\", 1)\n    })\n        .on(\"mouseout\", function (d) {\n            // If the mouse is exactly on the data point, \n            // then the mouse will on the circle instead of the path\n            // So here we should keep the tooltip shown when the mouse is still on the circle\n            let currentElement = document.elementFromPoint(d3.event.pageX, d3.event.pageY)\n            if (currentElement !== detailValueCircle.node()) {\n                detailValueTooltip.transition()\n                    .duration(500)\n                    .style(\"opacity\", 0)\n                detailValue.transition()\n                    .duration(500)\n                    .style(\"opacity\", 0)\n            }\n        })\n        .on(\"mousemove\", function (d) {\n            let result = getPosition()\n            let x0 = x.invert(d3.mouse(this)[0])\n            let currentIndex = bisectDate(data, x0, 1)\n            let time0 = parseTime(data[currentIndex - 1][breakdown[0].field])\n            let time1 = parseTime(data[currentIndex][breakdown[0].field])\n            let currentTime = x0 - time0 > time1 - x0 ? time1 : time0\n            let currentValue = currentTime === time0 ? data[currentIndex - 1][measureName] : data[currentIndex][measureName]\n            let title = tick_format(currentTime)\n            detailValueTooltip.style(\"left\", (result.posX + 30) + \"px\")\n                .style(\"top\", (result.posY + 20) + \"px\")\n            detailValueTitle.html(title)\n            detailValueColor.style(\"fill\", COLOR_REGULAR)\n            detailValueText.html(measureName + \": \" + currentValue.toFixed(2))\n\n            detailValueLine.attr(\"x1\", x(currentTime))\n            detailValueLine.attr(\"x2\", x(currentTime))\n            detailValueCircle.attr(\"cx\", x(currentTime))\n            detailValueCircle.attr(\"cy\", y(currentValue))\n            detailValueCircle.attr(\"stroke\", COLOR_REGULAR)\n        })\n\n    let bisectDate = d3.bisector(function (d) { return parseTime(d[breakdown[0].field]) }).left\n    let detailValue = tooltipLayer.append(\"g\")\n        .style(\"opacity\", 0)\n    let detailValueLine = detailValue.append(\"line\")\n        .attr(\"y1\", height - 20)\n        .attr(\"y2\", 0)\n        .attr(\"stroke-width\", \"2px\")\n        .attr(\"stroke\", COLOR_GRID)\n        .attr(\"stroke-dasharray\", \"6, 3\")\n    let detailValueCircle = detailValue.append(\"circle\")\n        .attr(\"r\", 3)\n        .attr(\"fill\", \"#FFFFFF\")\n        .attr(\"stroke-width\", \"2\")\n        .style(\"box-shadow\", \"0 0 5px #888888\")\n        .on(\"mouseover\", function (d) {\n            // FIXME: This is a nit\n            // Even mouse is not on the path, the tooltip will still be shown \n            // but the error area is small\n            detailValueTooltip.transition()\n                .duration(200)\n                .style(\"opacity\", .9)\n            detailValue.transition()\n                .duration(200)\n                .style(\"opacity\", 1)\n        }).on(\"mouseout\", function (d) {\n            // If the mouse is exactly on the data point, \n            // then the mouse will on the circle instead of the path\n            // So here we should hide all the tooltip when moving mouse out of the circle\n            detailValueTooltip.transition()\n                .duration(500)\n                .style(\"opacity\", 0)\n            detailValue.transition()\n                .duration(500)\n                .style(\"opacity\", 0)\n        })\n}\n\nexport default FrequentPattern;","import * as d3 from 'd3';\nimport Chart from '../../chart';\n\nconst ENGFONT = \"OPPOSans\";\nconst COLOR_CLUSTER = \"#74C8F8\";\nconst COLOR_OUTLIER = \"#F72D35\"\nconst COLOR_BG_LINE = \"#AFAFAF\"\nconst SERIES_COLORS = [\"#6C8EF2\", \"#E1944E\", \"#8B65BA\"]\n\n\nclass Clustering extends Chart {\n    constructor() {\n        super();\n        this._x = '';\n        this._y = '';\n    }\n\n    display() {\n        let factData = this.factdata()\n        let breakdown = this.breakdown();\n        let focus = this.focus();\n        // set data\n        factData = factData.sort((a, b) => parseTime(a[breakdown[0].field]) - parseTime(b[breakdown[0].field]))\n\n        let data = factData\n        if (focus.length === 0) return\n\n        // set the dimensions and margins of the graph\n        let chartSize = { width: 314, height: 216 }\n        let margin = {\n            \"top\": 15,\n            \"right\": 20,\n            \"bottom\": 15,\n            \"left\": 20\n        }\n\n        let width = chartSize.width - margin.left - margin.right,\n            height = chartSize.height - margin.top - margin.bottom;\n\n        let containerSelector = this.container()\n        let svg = d3.select(this.container())\n            .append(\"svg\")\n            .attr(\"width\", chartSize.width)\n            .attr(\"height\", chartSize.height)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + (margin.left + 10) + \",\" + margin.top + \")\")\n            .attr(\"font-family\", ENGFONT);\n\n        // set the ranges\n        let x = d3.scaleLinear()\n            .range([0, width])\n        // .padding(0.1);\n        let y = d3.scaleLinear()\n            .range([height, 10]);\n\n        let scatterData = []\n        let clusterCounter = 1\n        let outlierCounter = -1\n        for (let i = 0; i < focus[0][\"cluster\"].length; i++) {\n            for (let point of focus[0][\"cluster\"][i][\"position\"]) {\n                scatterData.push({\n                    \"x\": point[0],\n                    \"y\": point[1],\n                    \"symbol\": clusterCounter\n                })\n            }\n            clusterCounter++\n        }\n        for (let i = 0; i < focus[0][\"outlier\"].length; i++) {\n            for (let point of focus[0][\"outlier\"][i][\"position\"]) {\n                scatterData.push({\n                    \"x\": point[0],\n                    \"y\": point[1],\n                    \"symbol\": outlierCounter\n                })\n            }\n            outlierCounter--\n        }\n\n        // Scale the range of the data in the domains\n        x.domain(d3.extent(scatterData, function (d) { return d.x; }));\n        y.domain(d3.extent(scatterData, function (d) { return d.y; }))\n\n\n        let symbolList = d3.symbols.map(s => d3.symbol().size(18).type(s)())\n        svg.append(\"g\")\n            .selectAll(\"path\")\n            .data(scatterData)\n            .join(\"path\")\n            .attr(\"transform\", d => `translate(${x(d.x)}, ${y(d.y)})`)\n            .attr(\"fill\", d => d.symbol > 0 ? COLOR_CLUSTER : COLOR_OUTLIER)\n            .attr(\"d\", d => d.symbol > 0 ? symbolList[d.symbol % symbolList.length] : symbolList[0])\n\n        let tooltipLayer = svg.append(\"g\")\n        // draw outline of each cluster\n        let valueline = d3.line()\n            .x(function (d) { return d[0]; })\n            .y(function (d) { return d[1]; })\n            .curve(d3.curveCatmullRomClosed)\n        for (let i = 1; i < clusterCounter; i++) {\n            let positions = scatterData.filter(function (d) { return d.symbol === i })\n                .map(function (d) { return [x(d.x), y(d.y)] })\n            if (positions.length > 2) {\n                let polygon = d3.polygonHull(positions)\n                let centroid = d3.polygonCentroid(polygon)\n                tooltipLayer.append(\"g\")\n                    .attr(\"transform\", \"translate(\" + centroid[0] + \",\" + centroid[1] + \") scale(2)\")\n                    .append(\"path\")\n                    .attr(\"d\", () => {\n                        return valueline(polygon.map(function (point) {\n                            return [point[0] - centroid[0], point[1] - centroid[1]]\n                        }))\n                    })\n                    .attr(\"stroke\", \"#000000\")\n                    .attr(\"stroke-width\", \"0.5px\")\n                    .attr(\"fill\", \"none\")\n            }\n        }\n\n        // draw tooltip of each outlier\n        for (let i = -1; i > outlierCounter; i--) {\n            let position = scatterData.filter(function (d) { return d.symbol === i })[0]\n            let p_x = x(position[\"x\"])\n            let p_y = y(position[\"y\"])\n            let outlierText = tooltipLayer.append(\"text\")\n                .attr(\"font-size\", \"10px\")\n                .attr(\"font-family\", ENGFONT)\n                .attr(\"font-weight\", \"bold\")\n                .attr(\"fill\", \"#000000\")\n                .attr(\"y\", p_y + 5)\n                .text(`Outlier ${-i}`)\n            let textWidth = outlierText.node().getBBox().width\n            let textSpan, lineSpan1, lineSpan2\n            if (p_x > width / 2) {\n                if (p_x + 20 > width) {\n                    textSpan = -20 - textWidth\n                    lineSpan1 = -17\n                    lineSpan2 = -8\n                } else {\n                    textSpan = 20\n                    lineSpan1 = 17\n                    lineSpan2 = 8\n                }\n            } else {\n                if (p_x - textWidth - 20 < 0) {\n                    textSpan = 20\n                    lineSpan1 = 17\n                    lineSpan2 = 8\n                } else {\n                    textSpan = -20 - textWidth\n                    lineSpan1 = -17\n                    lineSpan2 = -8\n                }\n            }\n            outlierText.attr(\"x\", p_x + textSpan)\n            tooltipLayer.append(\"line\")\n                .attr(\"x1\", p_x + lineSpan1)\n                .attr(\"x2\", p_x + lineSpan2)\n                .attr(\"y1\", p_y)\n                .attr(\"y2\", p_y)\n                .attr(\"stroke\", \"#000000\")\n                .attr(\"stroke-width\", \"1px\")\n        }\n\n        let tableContainer = d3.select(containerSelector).append(\"div\")\n            .style(\"position\", \"absolute\")\n            .style(\"left\", \"318px\")\n            .style(\"top\", \"10px\")\n            .style(\"font-size\", \"8px\")\n            .style(\"font-family\", ENGFONT)\n            .attr(\"id\", \"overviewTable\")\n\n        let overviewTableContainer = d3.select(containerSelector).append(\"div\")\n            .style(\"position\", \"absolute\")\n            .style(\"left\", \"10px\")\n            .style(\"top\", \"220\")\n            .style(\"font-size\", \"8px\")\n            .style(\"font-family\", ENGFONT)\n        if (focus[0][\"cluster\"].length > 0) {\n            updateOverviewTable(1, overviewTableContainer, symbolList, focus, data, breakdown)\n        }\n\n        // draw cluster table\n        let clusterTable = tableContainer.append(\"table\")\n            .style(\"border\", \"1px solid #000000\")\n            .style(\"border-collapse\", \"collapse\")\n            .style(\"border-spacing\", 0)\n            .attr(\"width\", \"300px\")\n        let headerTd = clusterTable.append(\"thead\")\n            .style(\"background\", \"#eeee\")\n            .append(\"tr\")\n            .selectAll(\"th\")\n            .data([\"Cluster\", \"Number of series\", \"Similarity in cluster\"])\n            .enter()\n            .append(\"th\")\n            .style(\"padding\", \"5px 15px\")\n            .text(function (d) {\n                return d\n            })\n        let tdWidth = headerTd.node().getBoundingClientRect().width + 30 // 30: padding\n        let clusterRows = clusterTable.append(\"tbody\")\n        for (let i = 1; i < clusterCounter; i++) {\n            let row = clusterRows.append(\"tr\")\n            let clusterTd = row.append(\"td\")\n            let clusterUnit = clusterTd\n                .append(\"svg\")\n                .attr(\"width\", tdWidth)\n                .attr(\"height\", 12)\n                .append(\"g\")\n                .attr(\"id\", i)\n            let clusterName = clusterUnit.append(\"text\")\n                .attr(\"font-size\", \"8\")\n                .attr(\"font-family\", ENGFONT)\n                .attr(\"fill\", \"#000000\")\n                .text(`Cluster ${i}`)\n            let textWidth = clusterName.node().getBBox().width\n            clusterUnit.append(\"path\")\n                .attr(\"transform\", `translate(${textWidth + 8}, -3)`)\n                .attr(\"d\", symbolList[i % symbolList.length])\n                .attr(\"fill\", COLOR_CLUSTER)\n            textWidth = clusterUnit.node().getBBox().width\n            let textHeight = clusterUnit.node().getBBox().height\n            clusterUnit.attr(\"transform\", `translate(${tdWidth / 2 - textWidth / 2}, ${textHeight})`)\n                .on(\"click\", function (d, i) {\n                    updateOverviewTable(d3.select(this).attr(\"id\"), overviewTableContainer, symbolList, focus, data, breakdown)\n                })\n            row.append(\"td\")\n                .text(`${focus[0][\"cluster\"][i - 1][\"position\"].length}`)\n                .style(\"text-align\", \"center\")\n            clusterUnit = row.append(\"td\")\n                .append(\"svg\")\n                .attr(\"width\", tdWidth)\n                .attr(\"height\", 12)\n                .append(\"g\")\n            clusterUnit.append(\"rect\")\n                .attr(\"x\", 0)\n                .attr(\"y\", 2)\n                .attr(\"width\", 70)\n                .attr(\"height\", 10)\n                .attr(\"fill\", \"#f3f3f3\")\n            clusterUnit.append(\"rect\")\n                .attr(\"x\", 0)\n                .attr(\"y\", 2)\n                .attr(\"width\", 70 * focus[0][\"cluster\"][i - 1][\"score\"])\n                .attr(\"height\", 10)\n                .attr(\"fill\", COLOR_CLUSTER)\n            clusterUnit.append(\"text\")\n                .attr(\"x\", 75)\n                .attr(\"y\", 10)\n                .text(focus[0][\"cluster\"][i - 1][\"score\"].toFixed(2))\n        }\n\n        // draw outlier table\n        tableContainer = d3.select(containerSelector).append(\"div\")\n            .style(\"position\", \"absolute\")\n            .style(\"left\", \"318px\")\n            .style(\"top\", \"108px\")\n            .style(\"font-size\", \"8px\")\n            .style(\"font-family\", ENGFONT)\n        let outlierTable = tableContainer.append(\"table\")\n            .style(\"border\", \"1px solid #000000\")\n            .style(\"border-collapse\", \"collapse\")\n            .style(\"border-spacing\", 0)\n            .attr(\"width\", \"300px\")\n        headerTd = outlierTable.append(\"thead\")\n            .style(\"background\", \"#eeee\")\n            .append(\"tr\")\n            .selectAll(\"th\")\n            .data([\"Outlier\", \"Anomaly score\"])\n            .enter()\n            .append(\"th\")\n            .style(\"padding\", \"3px 15px\")\n            .text(function (d) {\n                return d\n            })\n        tdWidth = headerTd.node().getBoundingClientRect().width + 30 // 30: padding\n        let outlierRows = outlierTable.append(\"tbody\")\n        for (let i = -1; i > outlierCounter; i--) {\n            let row = outlierRows.append(\"tr\")\n            let outlierTd = row.append(\"td\")\n            let outlierUnit = outlierTd\n                .append(\"svg\")\n                .attr(\"width\", tdWidth)\n                .attr(\"height\", \"12\")\n                .append(\"g\")\n            let outlierName = outlierUnit.append(\"text\")\n                .attr(\"font-size\", \"8\")\n                .attr(\"font-family\", ENGFONT)\n                .attr(\"fill\", \"#000000\")\n                .text(`Outlier ${-i}`)\n            let textWidth = outlierName.node().getBBox().width\n            outlierUnit.append(\"path\")\n                .attr(\"transform\", `translate(${textWidth + 8}, -3)`)\n                .attr(\"d\", symbolList[0])\n                .attr(\"fill\", COLOR_OUTLIER)\n            textWidth = outlierUnit.node().getBBox().width\n            let textHeight = outlierName.node().getBBox().height\n            outlierUnit.attr(\"transform\", `translate(${tdWidth / 2 - textWidth / 2}, ${textHeight})`)\n            outlierUnit = row.append(\"td\")\n                .append(\"svg\")\n                .attr(\"width\", tdWidth)\n                .attr(\"height\", 12)\n                .append(\"g\")\n                .attr(\"transform\", `translate(25, 0)`)\n            outlierUnit.append(\"rect\")\n                .attr(\"x\", 0)\n                .attr(\"y\", 2)\n                .attr(\"width\", 70)\n                .attr(\"height\", 10)\n                .attr(\"fill\", \"#f3f3f3\")\n            outlierUnit.append(\"rect\")\n                .attr(\"x\", 0)\n                .attr(\"y\", 2)\n                .attr(\"width\", 70 * focus[0][\"outlier\"][-i - 1][\"score\"])\n                .attr(\"height\", 10)\n                .attr(\"fill\", COLOR_OUTLIER)\n            outlierUnit.append(\"text\")\n                .attr(\"x\", 75)\n                .attr(\"y\", 10)\n                .text(focus[0][\"outlier\"][-i - 1][\"score\"].toFixed(2))\n        }\n\n        return svg;\n    }\n}\n\nconst updateOverviewTable = (clusterNumber, tableContainer, symbolList, focus, data, breakdown) => {\n    // draw overview table\n    tableContainer.selectAll(\"*\").remove()\n    let overviewTable = tableContainer.append(\"table\")\n        .style(\"border\", \"1px solid #000000\")\n        .style(\"border-collapse\", \"collapse\")\n        .style(\"border-spacing\", 0)\n        .attr(\"width\", \"600px\")\n    let overviewTitleUnit = overviewTable.append(\"thead\")\n        .style(\"background\", \"#eeee\")\n        .style(\"text-align\", \"left\")\n        .append(\"tr\")\n        .append(\"th\")\n        .style(\"padding\", \"3px 15px\")\n        .attr(\"colspan\", 2)\n        .append(\"svg\")\n        .attr(\"width\", 100)\n        .attr(\"height\", 12)\n        .append(\"g\")\n    let overviewTitle = overviewTitleUnit.append(\"text\")\n        .attr(\"font-size\", \"8\")\n        .attr(\"font-family\", ENGFONT)\n        .attr(\"fill\", \"#000000\")\n        .text(`Overview: Cluster ${clusterNumber}`)\n    let textWidth = overviewTitle.node().getBBox().width\n    overviewTitleUnit.append(\"path\")\n        .attr(\"transform\", `translate(${textWidth + 8}, -3)`)\n        .attr(\"d\", symbolList[clusterNumber])\n        .attr(\"fill\", COLOR_CLUSTER)\n    textWidth = overviewTitleUnit.node().getBBox().width\n    let textHeight = overviewTitle.node().getBBox().height\n    overviewTitleUnit.attr(\"transform\", `translate(5, ${textHeight})`)\n    let overviewRows = overviewTable.append(\"tbody\")\n    for (let i = 0; i < focus[0][\"variable\"].length; i++) {\n        let variableName = focus[0][\"variable\"][i][\"name\"]\n        let row = overviewRows.append(\"tr\")\n        // draw variable name\n        let overviewTd = row.append(\"td\")\n            .style(\"border\", \"1px solid #000000\")\n            .style(\"width\", \"50px\")\n        let overviewUnit = overviewTd\n            .append(\"svg\")\n            .attr(\"width\", 50)\n            .attr(\"height\", 30)\n            .append(\"g\")\n        let title = overviewUnit.append(\"text\")\n            .style(\"font-size\", \"8px\")\n            .text(variableName)\n        overviewUnit.append(\"rect\")\n            .attr(\"x\", title.node().getBBox().x)\n            .attr(\"y\", title.node().getBBox().y)\n            .attr(\"width\", title.node().getBBox().width)\n            .attr(\"height\", title.node().getBBox().height)\n            .attr(\"fill\", SERIES_COLORS[i % SERIES_COLORS.length])\n        let textWidth = title.node().getBBox().width\n        title.node().remove()\n        overviewUnit.append(\"text\")\n            .style(\"font-size\", \"8px\")\n            .text(variableName)\n        overviewUnit.attr(\"transform\", `translate(${25 - textWidth / 2}, 18)`)\n\n        // draw variable line\n        overviewTd = row.append(\"td\")\n            .style(\"border\", \"1px solid #000000\")\n            .style(\"width\", \"550px\")\n        overviewUnit = overviewTd\n            .append(\"svg\")\n            .attr(\"width\", 550)\n            .attr(\"height\", 30)\n            .append(\"g\")\n        // 1. series not in this cluster\n        let seriesInClusterIndex = new Map()\n        for (let series of focus[0][\"cluster\"][clusterNumber - 1][\"member\"]) {\n            seriesInClusterIndex.set(series[variableName], 1)\n        }\n        let lineX = d3.scaleTime()\n            .range([0, 550])\n        lineX.domain(d3.extent(data, function (d) { return parseTime(d[breakdown[0].field]); }))\n        let lineY = d3.scaleLinear()\n            .range([30, 0]);\n        for (let series of focus[0][\"variable\"][i][\"member\"]) {\n            if (!seriesInClusterIndex.has(series)) {\n                lineY.domain(d3.extent([].concat(data.map(function (d) { return d[series] }))))\n                let lineGen = d3.line().curve(d3.curveMonotoneX)\n                    .x(function (d) {\n                        return lineX(parseTime(d[breakdown[0].field]));\n                    })\n                    .y(function (d) {\n                        return lineY(d[series]);\n                    })\n                overviewUnit.append(\"path\")\n                    .attr(\"d\", lineGen(data))\n                    .attr(\"stroke\", COLOR_BG_LINE)\n                    .attr(\"stroke-width\", \"1px\")\n                    .attr(\"opacity\", \"20%\")\n                    .attr(\"fill\", \"none\")\n            }\n        }\n        for (let series of seriesInClusterIndex.keys()) {\n            lineY.domain(d3.extent([].concat(data.map(function (d) { return d[series] }))))\n            let lineGen = d3.line().curve(d3.curveMonotoneX)\n                .x(function (d) {\n                    return lineX(parseTime(d[breakdown[0].field]));\n                })\n                .y(function (d) {\n                    return lineY(d[series]);\n                })\n            overviewUnit.append(\"path\")\n                .attr(\"d\", lineGen(data))\n                .attr(\"stroke\", COLOR_BG_LINE)\n                .attr(\"stroke-width\", \"1px\")\n                .attr(\"opacity\", \"80%\")\n                .attr(\"fill\", \"none\")\n        }\n        lineY.domain(d3.extent([].concat(data.map(function (d) { return d[focus[0][\"cluster\"][clusterNumber - 1][\"representation\"][variableName]] }))))\n        let lineGen = d3.line().curve(d3.curveMonotoneX)\n            .x(function (d) {\n                return lineX(parseTime(d[breakdown[0].field]));\n            })\n            .y(function (d) {\n                return lineY(d[focus[0][\"cluster\"][clusterNumber - 1][\"representation\"][variableName]]);\n            })\n        overviewUnit.append(\"path\")\n            .attr(\"d\", lineGen(data))\n            .attr(\"stroke\", SERIES_COLORS[i])\n            .attr(\"stroke-width\", \"1px\")\n            .attr(\"fill\", \"none\")\n    }\n}\n\nconst parseTime = (date) => {\n    if (d3.timeParse(\"%Y-%m-%d\")(date))\n        return d3.timeParse(\"%Y-%m-%d\")(date);\n    else if (d3.timeParse(\"%Y/%m/%d\")(date))\n        return d3.timeParse(\"%Y/%m/%d\")(date);\n    else if (d3.timeParse(\"%Y-%m\")(date))\n        return d3.timeParse(\"%Y-%m\")(date);\n    else if (d3.timeParse(\"%Y/%m\")(date))\n        return d3.timeParse(\"%Y/%m\")(date);\n    else if (d3.timeParse(\"%Y\")(date))\n        return d3.timeParse(\"%Y\")(date);\n    else if (d3.timeParse(\"%Y-%m-%dT%H:%M:%S.%fZ\")(date))\n        return d3.timeParse(\"%Y-%m-%dT%H:%M:%S.%fZ\")(date)\n    else return date\n}\n\nexport default Clustering;","import * as d3 from 'd3';\r\nimport Chart from '../../chart';\r\n\r\nconst ENGFONT = \"OPPOSans\";\r\nconst COLOR_REGULAR = \"#6C8EF2\";\r\nconst COLOR_CONFIDENCE = \"#E4E4E4\";\r\nconst TRANSPARENCY_CONFIDENCE = 0.7;\r\nconst COLOR_GRID = \"#E6E6E6\";\r\nconst COLOR_AXIS = \"#000000\";\r\n\r\nclass Forecasting extends Chart {\r\n    constructor() {\r\n        super();\r\n        this._x = '';\r\n        this._y = '';\r\n    }\r\n\r\n    display() {\r\n        let factData = this.factdata();\r\n        let measure = this.measure();\r\n        let breakdown = this.breakdown();\r\n        let focus = this.focus();\r\n\r\n        // set data\r\n        factData = factData.sort((a, b) => parseTime(a[breakdown[0].field]) - parseTime(b[breakdown[0].field]))\r\n        let measureName = measure[0].aggregate === 'count' ? \"COUNT\" : measure[0].field\r\n\r\n        // set the dimensions and margins of the graph\r\n        let chartSize = { width: 600, height: 280 }\r\n        let margin = {\r\n            \"top\": 15,\r\n            \"right\": 20,\r\n            \"bottom\": 15,\r\n            \"left\": 20\r\n        }\r\n        let tickWidth = 2\r\n\r\n        let width = chartSize.width - margin.left - margin.right,\r\n            height = chartSize.height - margin.top - margin.bottom;\r\n\r\n        let containerSelector = this.container();\r\n        let svg = d3.select(containerSelector)\r\n            .append(\"svg\")\r\n            .attr(\"width\", chartSize.width)\r\n            .attr(\"height\", chartSize.height)\r\n            .append(\"g\")\r\n            .attr(\"transform\", \"translate(\" + (margin.left + 10) + \",\" + margin.top + \")\")\r\n            .attr(\"font-family\", ENGFONT);\r\n\r\n        // set the ranges\r\n        let x = d3.scaleTime()\r\n            .range([0, width - 20])\r\n        // .padding(0.1);\r\n        let y = d3.scaleLinear()\r\n            .range([height - 20, 0]);\r\n\r\n        let pred = []\r\n        let timeDelta = parseTime(factData[1][breakdown[0].field]) - parseTime(factData[0][breakdown[0].field])\r\n        for (let i = 1; i <= focus[0].value.length; i++) {\r\n            let current = {}\r\n            current[breakdown[0].field] = new Date(parseTime(factData[factData.length - 1][breakdown[0].field]).getTime() + timeDelta * i)\r\n            current['value'] = focus[0].value[i - 1]\r\n            current['up'] = focus[0].up[i - 1]\r\n            current['low'] = focus[0].low[i - 1]\r\n            pred.push(current)\r\n        }\r\n        // Scale the range of the data in the domains\r\n        x.domain(d3.extent([parseTime(factData[0][breakdown[0].field]), pred[pred.length - 1][breakdown[0].field]]));\r\n        y.domain(d3.extent([].concat(\r\n            // lower boundary minus margin\r\n            factData.map(function (d) { return d[measure[0].field] * 0.85 }),\r\n            // upper boundary add margin\r\n            factData.map(function (d) { return d[measure[0].field] * 1.15 })\r\n        )));\r\n\r\n        // add the x Axis\r\n        let format_TicksCount = formatTicksCount(factData[0][breakdown[0].field]);\r\n        let tick_format = formatTick(factData[0][breakdown[0].field]);\r\n        let axisX = d3.axisBottom(x).tickFormat(tick_format)\r\n        if (format_TicksCount === d3.timeYear) {\r\n            axisX.ticks(format_TicksCount)\r\n        }\r\n\r\n        let areaGen = d3.area()\r\n            .x(function (d) {\r\n                return x(d[breakdown[0].field]);\r\n            })\r\n            .y0(function (d) {\r\n                return y(d['low']);\r\n            })\r\n            .y1(function (d) {\r\n                return y(d['up']);\r\n            })\r\n        svg.append('g').selectAll('path.area')\r\n            .data(pred)\r\n            .enter()\r\n            .append('path')\r\n            .attr('class', 'area')\r\n            .attr('d', areaGen(pred))\r\n            .attr('fill', COLOR_CONFIDENCE)\r\n            .attr('opacity', TRANSPARENCY_CONFIDENCE)\r\n\r\n\r\n        let lineLayer = svg.append(\"g\").attr('class', 'lineLayer')\r\n\r\n        lineLayer.append('g').selectAll('line.line')\r\n            .data(y.ticks(5)).enter().append('line')\r\n            .attr('x1', 0)\r\n            .attr('x2', width - 20)\r\n            .attr('y1', function (d) { return y(d) })\r\n            .attr('y2', function (d) { return y(d) })\r\n            .attr('stroke', COLOR_GRID)\r\n            .attr('stroke-width', '2px')\r\n\r\n        let lineGen = d3.line().curve(d3.curveMonotoneX)\r\n            .x(function (d) {\r\n                return x(parseTime(d[breakdown[0].field]));\r\n            })\r\n            .y(function (d) {\r\n                return y(d[measureName]);\r\n            })\r\n        let lineGenPred = d3.line().curve(d3.curveMonotoneX)\r\n            .x(function (d) {\r\n                return x(d[breakdown[0].field]);\r\n            })\r\n            .y(function (d) {\r\n                return y(d['value']);\r\n            })\r\n\r\n        lineLayer.append('path')\r\n            .attr('d', lineGenPred(pred))\r\n            .attr('stroke', COLOR_REGULAR)\r\n            .attr('stroke-width', '3px')\r\n            .attr('fill', 'none')\r\n            .attr('stroke-dasharray', '8px')\r\n\r\n        console.log(pred)\r\n        let rawPath = lineLayer.append('path')\r\n            .attr('d', lineGen(factData))\r\n            .attr('stroke', COLOR_REGULAR)\r\n            .attr('stroke-width', '3px')\r\n            .attr('fill', 'none')\r\n\r\n        svg.append(\"line\")\r\n            .attr(\"x1\", x(pred[0][breakdown[0].field]))\r\n            .attr(\"y1\", height - 20)\r\n            .attr(\"x2\", x(pred[0][breakdown[0].field]))\r\n            .attr(\"y2\", y(pred[0]['value']))\r\n            .attr(\"stroke\", \"black\")\r\n            .attr(\"stroke-width\", \"1px\")\r\n            .attr(\"stroke-dasharray\", \"2px\")\r\n\r\n        let tickValues = [];\r\n        tickValues.push(parseTime(factData[0][breakdown[0].field]))\r\n        tickValues.push(pred[0][breakdown[0].field])\r\n        tickValues.push(pred[pred.length - 1][breakdown[0].field])\r\n        axisX.tickValues(tickValues)\r\n\r\n        let tooltipLayer = svg.append(\"g\").attr(\"class\", \"tooltip\");\r\n\r\n        renderDetailValue(containerSelector, rawPath, x, y, height, factData, breakdown, measureName, tick_format, tooltipLayer)\r\n\r\n        svg.append(\"g\")\r\n            .attr(\"class\", \"xAxis\")\r\n            .attr(\"transform\", \"translate(0,\" + (height - 20) + \")\")\r\n            .call(axisX)\r\n            .call(g => {\r\n                g.attr(\"font-size\", '10px');\r\n                g.attr(\"font-family\", ENGFONT);\r\n                g.attr(\"font-weight\", 'light')\r\n\r\n                let domainD = g.selectAll(\".domain\").attr(\"d\");\r\n                domainD = domainD.replace(\"6V\", (6 * chartSize.height / 320) + \"V\")\r\n                domainD = domainD.replace(\"V6\", \"V\" + (6 * chartSize.height / 320))\r\n                g.selectAll(\".domain\").attr(\"d\", domainD).attr(\"stroke-width\", tickWidth);\r\n                g.selectAll(\".tick\")\r\n                    .selectAll(\"line\")\r\n                    .attr(\"stroke\", COLOR_AXIS)\r\n                    .attr(\"stroke-width\", tickWidth)\r\n                    .attr(\"y2\", 5);\r\n\r\n                g.selectAll(\"text\")\r\n                    .attr(\"y\", 10)\r\n                // .attr(\"transform\", 'rotate(-20)')\r\n                // .attr(\"style\", 'text-anchor: end')\r\n            });\r\n\r\n        // add the y Axis\r\n        svg.append(\"g\")\r\n            .attr(\"class\", \"yAxis\")\r\n            // .attr(\"transform\", `translate(,0)`)\r\n            .call(d3.axisLeft(y).ticks(5).tickFormat(function (d) {\r\n                if ((d / 1000000) >= 1) {\r\n                    d = d / 1000000 + \"M\";\r\n                } else if ((d / 1000) >= 1) {\r\n                    d = d / 1000 + \"K\";\r\n                }\r\n                return d;\r\n            }))\r\n            .call(g => {\r\n                g.attr(\"font-size\", '10px')\r\n                g.attr(\"font-weight\", 'light')\r\n                g.attr(\"font-family\", ENGFONT)\r\n                let domainD = g.selectAll(\".domain\").attr(\"d\");\r\n                domainD = domainD.replace(\"M-6\", \"M-\" + (6 * chartSize.width / 640))\r\n                domainD = domainD.replace(\"H-6\", \"H-\" + (6 * chartSize.width / 640))\r\n                g.selectAll(\".domain\").attr(\"d\", domainD).attr(\"stroke-width\", tickWidth);\r\n                g.selectAll(\".tick\")\r\n                    .select(\"line\")\r\n                    .attr(\"stroke\", COLOR_AXIS)\r\n                    .attr(\"stroke-width\", tickWidth)\r\n                    .attr(\"x2\", -5);\r\n\r\n                g.selectAll(\"text\")\r\n                    .attr(\"x\", -10);\r\n            })\r\n        return svg;\r\n    }\r\n}\r\n\r\nlet renderDetailValue = (containerSelector, rawPath, x, y, height,\r\n    data, breakdown, measureName, tick_format, tooltipLayer) => {\r\n    let detailValueTooltip = d3.select(containerSelector)\r\n        .append(\"div\")\r\n        .style(\"width\", \"95px\")\r\n        .style(\"height\", \"40px\")\r\n        .style(\"opacity\", 0)\r\n        .style(\"position\", \"absolute\")\r\n        .style(\"pointer-events\", \"none\")\r\n        .style(\"border-radius\", \"4px\")\r\n        .style(\"background\", \"#FFFFFF\")\r\n        .style(\"box-shadow\", \"0 0 5px #888888\")\r\n        .style(\"padding\", \"5px\")\r\n    let detailValueTitle = detailValueTooltip.append(\"span\")\r\n        .style(\"font\", `9px ${ENGFONT}`)\r\n        .style(\"font-weight\", \"bold\")\r\n        .style(\"display\", \"block\")\r\n        .style(\"color\", \"#000000\")\r\n    let detailValueContent = detailValueTooltip.append(\"svg\")\r\n        .attr(\"width\", \"95px\")\r\n        .attr(\"height\", \"30px\")\r\n    let detailValueColor = detailValueContent.append(\"circle\")\r\n        .attr(\"r\", 4)\r\n        .attr(\"cx\", \"5px\")\r\n        .attr(\"cy\", \"12px\")\r\n    let detailValueText = detailValueContent.append(\"text\")\r\n        .style(\"font\", `8px ${ENGFONT}`)\r\n        .style(\"color\", \"#000000\")\r\n        .attr(\"x\", \"14px\")\r\n        .attr(\"y\", \"14px\")\r\n\r\n    rawPath.on(\"mouseover\", function (d) {\r\n        detailValueTooltip.transition()\r\n            .duration(200)\r\n            .style(\"opacity\", .9)\r\n        detailValue.transition()\r\n            .duration(200)\r\n            .style(\"opacity\", 1)\r\n    })\r\n        .on(\"mouseout\", function (d) {\r\n            // If the mouse is exactly on the data point, \r\n            // then the mouse will on the circle instead of the path\r\n            // So here we should keep the tooltip shown when the mouse is still on the circle\r\n            let currentElement = document.elementFromPoint(d3.event.pageX, d3.event.pageY)\r\n            if (currentElement !== detailValueCircle.node()) {\r\n                detailValueTooltip.transition()\r\n                    .duration(500)\r\n                    .style(\"opacity\", 0)\r\n                detailValue.transition()\r\n                    .duration(500)\r\n                    .style(\"opacity\", 0)\r\n            }\r\n        })\r\n        .on(\"mousemove\", function (d) {\r\n            let x0 = x.invert(d3.mouse(this)[0])\r\n            let currentIndex = bisectDate(data, x0, 1)\r\n            let time0 = parseTime(data[currentIndex - 1][breakdown[0].field])\r\n            let time1 = parseTime(data[currentIndex][breakdown[0].field])\r\n            let currentTime = x0 - time0 > time1 - x0 ? time1 : time0\r\n            let currentValue = currentTime === time0 ? data[currentIndex - 1][measureName] : data[currentIndex][measureName]\r\n            let title = tick_format(currentTime)\r\n            detailValueTooltip.style(\"left\", (d3.mouse(this)[0] + 30) + \"px\")\r\n                .style(\"top\", (d3.mouse(this)[1] + 20) + \"px\")\r\n            detailValueTitle.html(title)\r\n            detailValueColor.style(\"fill\", COLOR_REGULAR)\r\n            detailValueText.html(measureName + \": \" + currentValue)\r\n\r\n            detailValueLine.attr(\"x1\", x(currentTime))\r\n            detailValueLine.attr(\"x2\", x(currentTime))\r\n            detailValueCircle.attr(\"cx\", x(currentTime))\r\n            detailValueCircle.attr(\"cy\", y(currentValue))\r\n            detailValueCircle.attr(\"stroke\", COLOR_REGULAR)\r\n        })\r\n\r\n    let bisectDate = d3.bisector(function (d) { return parseTime(d[breakdown[0].field]) }).left\r\n    let detailValue = tooltipLayer.append(\"g\")\r\n        .style(\"opacity\", 0)\r\n    let detailValueLine = detailValue.append(\"line\")\r\n        .attr(\"y1\", height - 20)\r\n        .attr(\"y2\", 0)\r\n        .attr(\"stroke-width\", \"2px\")\r\n        .attr(\"stroke\", COLOR_GRID)\r\n        .attr(\"stroke-dasharray\", \"6, 3\")\r\n    let detailValueCircle = detailValue.append(\"circle\")\r\n        .attr(\"r\", 3)\r\n        .attr(\"fill\", \"#FFFFFF\")\r\n        .attr(\"stroke-width\", \"2\")\r\n        .style(\"box-shadow\", \"0 0 5px #888888\")\r\n        .on(\"mouseover\", function (d) {\r\n            // FIXME: This is a nit\r\n            // Even mouse is not on the path, the tooltip will still be shown \r\n            // but the error area is small\r\n            detailValueTooltip.transition()\r\n                .duration(200)\r\n                .style(\"opacity\", .9)\r\n            detailValue.transition()\r\n                .duration(200)\r\n                .style(\"opacity\", 1)\r\n        }).on(\"mouseout\", function (d) {\r\n            // If the mouse is exactly on the data point, \r\n            // then the mouse will on the circle instead of the path\r\n            // So here we should hide all the tooltip when moving mouse out of the circle\r\n            detailValueTooltip.transition()\r\n                .duration(500)\r\n                .style(\"opacity\", 0)\r\n            detailValue.transition()\r\n                .duration(500)\r\n                .style(\"opacity\", 0)\r\n        })\r\n}\r\n\r\nconst parseTime = (date) => {\r\n    if (d3.timeParse(\"%Y-%m-%d\")(date))\r\n        return d3.timeParse(\"%Y-%m-%d\")(date);\r\n    else if (d3.timeParse(\"%Y/%m/%d\")(date))\r\n        return d3.timeParse(\"%Y/%m/%d\")(date);\r\n    else if (d3.timeParse(\"%Y-%m\")(date))\r\n        return d3.timeParse(\"%Y-%m\")(date);\r\n    else if (d3.timeParse(\"%Y/%m\")(date))\r\n        return d3.timeParse(\"%Y/%m\")(date);\r\n    else if (d3.timeParse(\"%Y\")(date))\r\n        return d3.timeParse(\"%Y\")(date);\r\n    else if (d3.timeParse(\"%Y-%m-%dT%H:%M:%S.%fZ\")(date))\r\n        return d3.timeParse(\"%Y-%m-%dT%H:%M:%S.%fZ\")(date)\r\n    else return date\r\n}\r\nconst formatTick = (date) => {\r\n    if (d3.timeParse(\"%Y-%m-%d\")(date))\r\n        return d3.timeFormat(\"%Y-%-m-%-d\");\r\n    else if (d3.timeParse(\"%Y/%m/%d\")(date))\r\n        return d3.timeFormat(\"%Y/%-m/%-d\")\r\n    else if (d3.timeParse(\"%Y-%m\")(date))\r\n        return d3.timeFormat(\"%Y-%m\")\r\n    else if (d3.timeParse(\"%Y/%m\")(date))\r\n        return d3.timeFormat(\"%Y/%m\")\r\n    else if (d3.timeParse(\"%Y\")(date))\r\n        return d3.timeFormat(\"%Y\")\r\n    else if (d3.timeParse(\"%Y-%m-%dT%H:%M:%S.%fZ\")(date))\r\n        return d3.timeFormat(\"%m/%d %H\")\r\n    else\r\n        return \"\"\r\n}\r\n\r\nconst formatTicksCount = (date) => {\r\n    if (d3.timeParse(\"%Y-%m-%d\")(date))\r\n        return d3.timeDay\r\n    else if (d3.timeParse(\"%Y/%m/%d\")(date))\r\n        return d3.timeDay\r\n    else if (d3.timeParse(\"%Y-%m\")(date))\r\n        return d3.timeMonth\r\n    else if (d3.timeParse(\"%Y/%m\")(date))\r\n        return d3.timeMonth\r\n    else if (d3.timeParse(\"%Y\")(date))\r\n        return d3.timeYear\r\n}\r\n\r\n\r\nexport default Forecasting;","import * as d3 from \"d3\";\nimport Chart from \"../../chart\";\nimport { tooltipContainerId } from \"../constant/getContainer\";\nimport { getPosition } from \"../constant/getPosition\";\nimport { parseTime, formatTick, formatTicksCount } from '../constant/timeConstant'\nconst ENGFONT = \"OPPOSans\";\nconst COLOR_REGULAR = \"#808080\";\nconst COLOR_CONF = \"#E4E4E4\";\nconst COLOR_OUTLIER = \"#F72D35\"\nconst COLOR_GRID = \"#E6E6E6\";\nconst COLOR_AXIS = \"#000000\";\n\nclass UnivariateOutlier extends Chart {\n    constructor() {\n        super();\n        this._x = \"\";\n        this._y = \"\";\n    }\n\n    display() {\n\n        let factData = this.factdata()\n        let measure = this.measure();\n        let breakdown = this.breakdown();\n        let focus = this.focus();\n        // set data\n        factData = factData.sort((a, b) => parseTime(a[breakdown[0].field]) - parseTime(b[breakdown[0].field]))\n\n        let data = factData\n        let measureName = measure[0].aggregate === \"count\" ? \"COUNT\" : measure[0].field\n        if (focus.length === 0) return\n\n        // set the dimensions and margins of the graph\n        let chartSize = { width: 600, height: 280 }\n        let margin = {\n            \"top\": 15,\n            \"right\": 20,\n            \"bottom\": 15,\n            \"left\": 20\n        }\n        let tickSize = 10\n        let tickWidth = 2\n        let width = chartSize.width - margin.left - margin.right,\n            height = chartSize.height - margin.top - margin.bottom;\n\n        let containerSelector = tooltipContainerId\n        let svg = d3.select(this.container())\n            .append(\"svg\")\n            .attr(\"width\", chartSize.width)\n            .attr(\"height\", chartSize.height)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + (margin.left + 10) + \",\" + margin.top + \")\")\n            .attr(\"font-family\", ENGFONT);\n\n        // set the ranges\n        let x = d3.scaleTime()\n            .range([0, width - 10])\n        // .padding(0.1);\n        let y = d3.scaleLinear()\n            // 20 = 5(tick) + 5(margin) + 10(text)\n            .range([height - 20, 0]);\n\n        // Scale the range of the data in the domains\n        x.domain(d3.extent(data, function (d) { return parseTime(d[breakdown[0].field]); }));\n        y.domain(d3.extent([].concat(\n            data.map(function (d) { return d[measure[0].field] }),\n            // lower.map(function (d) { return d* 0.95 }),\n            // heigher.map(function (d) { return d* 1.05}),\n            // lower boundary minus margin\n            data.map(function (d) { return focus[0]['lower'] * 0.95 }),\n            // upper boundary add margin\n            data.map(function (d) { return focus[0]['upper'] * 1.05 })\n        )));\n\n        // add the x Axis\n        let format_TicksCount = formatTicksCount(data[0][breakdown[0].field]);\n        let tick_format = formatTick(data[0][breakdown[0].field]);\n        let axisX = d3.axisBottom(x).tickFormat(tick_format)\n        if (format_TicksCount === d3.timeYear) {\n            axisX.ticks(format_TicksCount)\n        }\n\n        let lineLayer = svg.append(\"g\").attr(\"class\", \"lineLayer\")\n\n        lineLayer.append(\"g\").selectAll(\"line.line\")\n            .data(y.ticks(5)).enter().append(\"line\")\n            .attr(\"x1\", 0)\n            .attr(\"x2\", chartSize.width)\n            .attr(\"y1\", function (d) { return y(d) })\n            .attr(\"y2\", function (d) { return y(d) })\n            .attr(\"stroke\", COLOR_GRID)\n            .attr(\"stroke-width\", \"2px\")\n\n        // draw confidence interval first as background\n        let conf_data = []\n        for (let i = 0; i < focus[0]['lower'].length; i++) {\n            conf_data.push({\n                'time': data[i][breakdown[0].field],\n                'lower': focus[0]['lower'][i],\n                'upper': focus[0]['upper'][i]\n            })\n        }\n        let conf_int = d3.area().curve(d3.curveMonotoneX)\n            .x(function (d) { return x(parseTime(d['time'])) })\n            .y0(function (d) { return y(d['lower']) })\n            .y1(function (d) { return y(d['upper']) })\n        lineLayer.append(\"path\")\n            .attr(\"stroke\", COLOR_CONF)\n            .attr(\"fill\", COLOR_CONF)\n            .attr(\"opacity\", 0.7)\n            .attr(\"d\", conf_int(conf_data))\n\n        let lineGen = d3.line().curve(d3.curveMonotoneX)\n            .x(function (d) {\n                return x(parseTime(d[breakdown[0].field]));\n            })\n            .y(function (d) {\n                return y(d[measureName]);\n            })\n        let forecastLineGen = d3.line().curve(d3.curveMonotoneX)\n            .x(function (d) {\n                return x(parseTime(d.x));\n            })\n            .y(function (d) {\n                return y(d.y);\n            })\n        let rawPath = lineLayer.append(\"path\")\n            .attr(\"d\", lineGen(data))\n            .attr(\"stroke\", COLOR_REGULAR)\n            .attr(\"stroke-width\", \"3px\")\n            .attr(\"fill\", \"none\")\n\n        let tooltipLayer = svg.append(\"g\").attr(\"class\", \"tooltip\");\n        let tickValues = [];\n        for (let outlier of focus) {\n            let outlierX, outlierY, up, start, end\n            if (outlier.scope[0] !== outlier.scope[1]) {\n                start = Math.max(0, outlier.scope[0] - 1)\n                end = Math.min(data.length - 1, outlier.scope[1] + 1)\n\n                let startX = x(parseTime(data[start][breakdown[0].field]))\n                let endX = x(parseTime(data[end][breakdown[0].field]))\n\n                outlierX = (startX + endX) / 2\n                let middle = Math.floor((start + end) / 2)\n                if (data[middle][measureName] < focus[0]['lower'][middle]) {\n                    outlierY = d3.max(data.slice(start, end + 1),\n                        function (d) { return y(d[measureName]) })\n                    up = false\n                } else {\n                    // else if (data[middle][measureName] > data[middle][measure[0].upper]) {\n                    outlierY = d3.min(data.slice(start, end + 1),\n                        function (d) { return y(d[measureName]) })\n                    up = true\n                }\n\n                tooltipLayer.append(\"line\")\n                    .attr(\"x1\", startX)\n                    .attr(\"y1\", y(data[start][measureName]))\n                    .attr(\"x2\", startX)\n                    .attr(\"y2\", height - 20)\n                    .attr(\"stroke\", \"black\")\n                    .attr(\"stroke-dasharray\", \"6, 3\");\n                tooltipLayer.append(\"line\")\n                    .attr(\"x1\", endX)\n                    .attr(\"y1\", y(data[end][measureName]))\n                    .attr(\"x2\", endX)\n                    .attr(\"y2\", height - 20)\n                    .attr(\"stroke\", \"black\")\n                    .attr(\"stroke-dasharray\", \"6, 3\");\n                tickValues.push(parseTime(data[start][breakdown[0].field]))\n                tickValues.push(parseTime(data[end][breakdown[0].field]))\n            } else {\n                start = Math.max(0, outlier.start - 1)\n                end = Math.min(data.length, outlier.scope[1] + 1)\n                outlierX = x(parseTime(data[outlier.scope[0]][breakdown[0].field]))\n                outlierY = y(data[outlier.scope[0]][measureName])\n                if (data[outlier.scope[0]][measureName] < focus[0]['lower'][outlier.scope[0]]) {\n                    up = false\n                } else {\n                    // else if (data[outlier.start][measureName] > data[outlier.start][measure[0].upper]) {\n                    up = true\n                }\n\n                tooltipLayer.append(\"line\")\n                    .attr(\"x1\", outlierX)\n                    .attr(\"y1\", outlierY)\n                    .attr(\"x2\", outlierX)\n                    .attr(\"y2\", height - 20)\n                    .attr(\"stroke\", \"black\")\n                    .attr(\"stroke-dasharray\", \"6, 3\");\n                tooltipLayer.append(\"circle\").attr(\"class\", \"focusDot\")\n                    .attr(\"cx\", outlierX)\n                    .attr(\"cy\", outlierY)\n                    .attr(\"r\", \"4px\")\n                    .attr(\"stroke\", COLOR_OUTLIER)\n                    .attr(\"fill\", COLOR_OUTLIER)\n                tickValues.push(parseTime(data[outlier.scope[0]][breakdown[0].field]))\n            }\n            let forecastPts = []\n            let ptIndex = start\n            if (outlier.scope[0] !== 0) {\n                forecastPts.push({\n                    x: data[ptIndex][breakdown[0].field],\n                    y: data[ptIndex][measureName]\n                })\n                ptIndex += 1\n            }\n            for (; ptIndex < end; ptIndex++) {\n                forecastPts.push({\n                    x: data[ptIndex][breakdown[0].field],\n                    y: focus[0]['forecast'][ptIndex]\n                })\n            }\n            if (outlier.scope[1] !== data.length - 1) {\n                forecastPts.push({\n                    x: data[ptIndex][breakdown[0].field],\n                    y: data[ptIndex][measureName]\n                })\n            } else {\n                forecastPts.push({\n                    x: data[ptIndex][breakdown[0].field],\n                    y: focus[0]['forecast'][ptIndex]\n                })\n            }\n\n            tooltipLayer.append(\"path\")\n                .attr(\"d\", forecastLineGen(forecastPts))\n                .attr(\"stroke\", \"#B1B1B1\")\n                .attr(\"stroke-width\", \"3px\")\n                .attr(\"stroke-dasharray\", \"6, 3\")\n                .attr(\"fill\", \"none\")\n            tooltipLayer.append(\"path\")\n                .attr(\"d\", lineGen(data.slice(start, end + 1)))\n                .attr(\"stroke\", COLOR_OUTLIER)\n                .attr(\"stroke-width\", \"5px\")\n                .attr(\"fill\", \"none\")\n\n            let tooltip = tooltipLayer.append(\"g\")\n            let tooltipText = tooltip.append(\"text\")\n                .attr(\"font-size\", \"10px\")\n                .attr(\"font-family\", ENGFONT)\n                .attr(\"stroke\", COLOR_OUTLIER)\n            tooltipText.append(\"tspan\")\n                .text(\"Anomaly score: \" + outlier.score.toFixed(2))\n                .attr(\"dy\", tooltipText.selectAll(\"tspan\").node().getBBox().height * 0.9)\n            let textWidth = tooltip.node().getBBox().width;\n            let textHeight = tooltip.node().getBBox().height;\n            let textY = outlierY\n            if (up) {\n                textY -= (textHeight + 8)\n            } else {\n                textY += 8\n            }\n\n            tooltip.append(\"image\")\n                .attr(\"xlink:href\", \"./alert.svg\")\n                .attr(\"width\", \"15px\")\n                .attr(\"height\", \"13px\")\n                .attr(\"x\", (outlierX - (textWidth + 17) / 2))\n                .attr(\"y\", textY + 2);\n            tooltipText.attr(\"width\", textWidth)\n                .attr(\"height\", textHeight)\n                .attr(\"x\", (outlierX - (textWidth + 17) / 2) + 17)\n                .attr(\"y\", textY);\n\n        }\n        axisX.tickValues(tickValues)\n\n        if (this._showTooltip) {\n            renderDetailValue(containerSelector, rawPath, x, y, height,\n                data, breakdown, measureName, tick_format, tooltipLayer)\n        }\n        svg.append(\"g\")\n            .attr(\"class\", \"xAxis\")\n            .attr(\"transform\", \"translate(0,\" + (height - 20) + \")\")\n            .call(axisX)\n            .attr(\"font-family\", ENGFONT)\n            .call(g => {\n                g.attr(\"font-size\", tickSize);\n                g.attr(\"font-family\", ENGFONT);\n\n                let domainD = g.selectAll(\".domain\").attr(\"d\");\n                domainD = domainD.replace(\"6V\", (6 * chartSize.height / 320) + \"V\")\n                domainD = domainD.replace(\"V6\", \"V\" + (6 * chartSize.height / 320))\n                g.selectAll(\".domain\").attr(\"d\", domainD).attr(\"stroke-width\", tickWidth);\n                g.selectAll(\".tick\")\n                    .selectAll(\"line\")\n                    .attr(\"stroke\", COLOR_AXIS)\n                    .attr(\"stroke-width\", tickWidth)\n                    .attr(\"y2\", 6 * chartSize.height / 320);\n\n                g.selectAll(\"text\")\n                    .attr(\"y\", 9 * chartSize.height / 320);\n            });\n\n        // add the y Axis\n        svg.append(\"g\")\n            .attr(\"class\", \"yAxis\")\n            .call(d3.axisLeft(y).ticks(5).tickFormat(function (d) {\n                if ((d / 1000000) >= 1) {\n                    d = d / 1000000 + \"M\";\n                } else if ((d / 1000) >= 1) {\n                    d = d / 1000 + \"K\";\n                }\n                return d;\n            }))\n            .call(g => {\n                g.attr(\"font-size\", \"10px\")\n                g.attr(\"font-weight\", \"light\")\n                g.attr(\"font-family\", ENGFONT)\n\n                let domainD = g.selectAll(\".domain\").attr(\"d\");\n                domainD = domainD.replace(\"M-6\", \"M-\" + (6 * chartSize.width / 640))\n                domainD = domainD.replace(\"H-6\", \"H-\" + (6 * chartSize.width / 640))\n                g.selectAll(\".domain\").attr(\"d\", domainD).attr(\"stroke-width\", tickWidth);\n                g.selectAll(\".tick\")\n                    .select(\"line\")\n                    .attr(\"stroke\", COLOR_AXIS)\n                    .attr(\"stroke-width\", tickWidth)\n                    .attr(\"x2\", -6 * chartSize.width / 640);\n\n                g.selectAll(\"text\")\n                    .attr(\"x\", -9 * chartSize.width / 640);\n            });\n\n        return svg;\n    }\n\n}\n\n\nlet getSizeBySize = (size, chartSize, fact, hasSeries = false, moreThan6 = false) => {\n    let tickSize, annotationSize, tickWidth, dotR, strokeWidth;\n\n    switch (size) {\n        case \"small\":\n            tickSize = 10;\n            annotationSize = 16;\n            tickWidth = 2;\n            dotR = 5;\n            strokeWidth = 2;\n            break;\n        case \"middle\":\n            tickSize = 10;\n            annotationSize = 20;\n            tickWidth = 2;\n            dotR = 5;\n            strokeWidth = 3;\n            break;\n        case \"wide\":\n            tickSize = 10;\n            annotationSize = 26;\n            dotR = 7;\n            tickWidth = 2;\n            strokeWidth = 3;\n            break;\n        case \"large\":\n        default:\n            tickSize = 10;\n            annotationSize = 40;\n            tickWidth = 2;\n            dotR = 10;\n            strokeWidth = 3;\n            break;\n    }\n    const chartMargin = {\n        \"small\": {\n            \"top\": 15,\n            \"right\": 20,\n            \"bottom\": 15,\n            \"left\": 20\n        },\n        \"middle\": {\n            \"top\": 15,\n            \"right\": 20,\n            \"bottom\": 15,\n            \"left\": 20\n        },\n        \"wide\": {\n            \"top\": 15,\n            \"right\": 20,\n            \"bottom\": 15,\n            \"left\": 20\n        },\n        \"large\": {\n            \"top\": 15,\n            \"right\": 20,\n            \"bottom\": 15,\n            \"left\": 20\n        }\n    };\n    let margin = chartMargin[size];\n    return { chartSize: chartSize, margin: margin, tickSize: tickSize, annotationSize: annotationSize, tickWidth, dotR, strokeWidth }\n}\n\nlet renderDetailValue = (containerSelector, rawPath, x, y, height,\n    data, breakdown, measureName, tick_format, tooltipLayer) => {\n    let detailValueTooltip = d3.select(containerSelector)\n        .append(\"div\")\n        .attr(\"id\", \"value-tooltip\")\n        .style(\"z-index\", 2000)\n        .style(\"width\", \"fit-content\")\n        .style(\"height\", \"40px\")\n        .style(\"opacity\", 0)\n        .style(\"position\", \"absolute\")\n        .style(\"pointer-events\", \"none\")\n        .style(\"border-radius\", \"4px\")\n        .style(\"background\", \"#FFFFFF\")\n        .style(\"box-shadow\", \"0 0 5px #888888\")\n        .style(\"padding\", \"5px\")\n    let detailValueTitle = detailValueTooltip.append(\"span\")\n        .style(\"font\", `9px ${ENGFONT}`)\n        .style(\"font-weight\", \"bold\")\n        .style(\"display\", \"block\")\n        .style(\"color\", \"#000000\")\n\n\n\n    let detailValueContent = detailValueTooltip.append(\"svg\")\n        .attr(\"width\", \"95px\")\n        .attr(\"height\", \"30px\")\n        .style(\"display\", \"block\")\n        .style(\"word-break\", \"normal\")\n        .style(\"word-warp\", \"break-word\")\n        .style(\"overflow\", \"hidden\")\n\n    let detailValueColor = detailValueContent.append(\"circle\")\n        .attr(\"r\", 4)\n        .attr(\"cx\", \"5px\")\n        .attr(\"cy\", \"12px\")\n    let detailValueText = detailValueContent.append(\"text\")\n        .style(\"font\", `8px ${ENGFONT}`)\n        .style(\"color\", \"#000000\")\n        .attr(\"x\", \"14px\")\n        .attr(\"y\", \"14px\")\n\n    rawPath.on(\"mouseover\", function (d) {\n        detailValueTooltip.transition()\n            .duration(200)\n            .style(\"opacity\", .9)\n        detailValue.transition()\n            .duration(200)\n            .style(\"opacity\", 1)\n    })\n        .on(\"mouseout\", function (d) {\n            // If the mouse is exactly on the data point, \n            // then the mouse will on the circle instead of the path\n            // So here we should keep the tooltip shown when the mouse is still on the circle\n            let currentElement = document.elementFromPoint(d3.event.pageX, d3.event.pageY)\n            if (currentElement !== detailValueCircle.node()) {\n                detailValueTooltip.transition()\n                    .duration(500)\n                    .style(\"opacity\", 0)\n                detailValue.transition()\n                    .duration(500)\n                    .style(\"opacity\", 0)\n            }\n        })\n        .on(\"mousemove\", function (d) {\n            let result = getPosition()\n            let x0 = x.invert(d3.mouse(this)[0])\n            let currentIndex = bisectDate(data, x0, 1)\n            let time0 = parseTime(data[currentIndex - 1][breakdown[0].field])\n            let time1 = parseTime(data[currentIndex][breakdown[0].field])\n            let currentTime = x0 - time0 > time1 - x0 ? time1 : time0\n            let currentValue = currentTime === time0 ? data[currentIndex - 1][measureName] : data[currentIndex][measureName]\n            let title = tick_format(currentTime)\n            detailValueTooltip.style(\"left\", (result.posX + 30) + \"px\")\n                .style(\"top\", (result.posY + 20) + \"px\")\n            detailValueTitle.html(title)\n            detailValueColor.style(\"fill\", COLOR_REGULAR)\n            detailValueText.html(measureName + \": \" + currentValue.toFixed(2))\n\n            detailValueLine.attr(\"x1\", x(currentTime))\n            detailValueLine.attr(\"x2\", x(currentTime))\n            detailValueCircle.attr(\"cx\", x(currentTime))\n            detailValueCircle.attr(\"cy\", y(currentValue))\n            detailValueCircle.attr(\"stroke\", COLOR_REGULAR)\n        })\n\n    let bisectDate = d3.bisector(function (d) { return parseTime(d[breakdown[0].field]) }).left\n    let detailValue = tooltipLayer.append(\"g\")\n        .style(\"opacity\", 0)\n    let detailValueLine = detailValue.append(\"line\")\n        .attr(\"y1\", height - 20)\n        .attr(\"y2\", 0)\n        .attr(\"stroke-width\", \"2px\")\n        .attr(\"stroke\", COLOR_GRID)\n        .attr(\"stroke-dasharray\", \"6, 3\")\n    let detailValueCircle = detailValue.append(\"circle\")\n        .attr(\"r\", 3)\n        .attr(\"fill\", \"#FFFFFF\")\n        .attr(\"stroke-width\", \"2\")\n        .style(\"box-shadow\", \"0 0 5px #888888\")\n        .on(\"mouseover\", function (d) {\n            // FIXME: This is a nit\n            // Even mouse is not on the path, the tooltip will still be shown \n            // but the error area is small\n            detailValueTooltip.transition()\n                .duration(200)\n                .style(\"opacity\", .9)\n            detailValue.transition()\n                .duration(200)\n                .style(\"opacity\", 1)\n        }).on(\"mouseout\", function (d) {\n            // If the mouse is exactly on the data point, \n            // then the mouse will on the circle instead of the path\n            // So here we should hide all the tooltip when moving mouse out of the circle\n            detailValueTooltip.transition()\n                .duration(500)\n                .style(\"opacity\", 0)\n            detailValue.transition()\n                .duration(500)\n                .style(\"opacity\", 0)\n        })\n}\n\n// const parseTime = (date) => {\n//     if (d3.timeParse(\"%Y-%m-%d\")(date))\n//         return d3.timeParse(\"%Y-%m-%d\")(date);\n//     else if (d3.timeParse(\"%Y/%m/%d\")(date))\n//         return d3.timeParse(\"%Y/%m/%d\")(date);\n//     else if (d3.timeParse(\"%Y-%m\")(date))\n//         return d3.timeParse(\"%Y-%m\")(date);\n//     else if (d3.timeParse(\"%Y/%m\")(date))\n//         return d3.timeParse(\"%Y/%m\")(date);\n//     else if (d3.timeParse(\"%Y\")(date))\n//         return d3.timeParse(\"%Y\")(date);\n//     else if (d3.timeParse(\"%Y-%m-%dT%H:%M:%S.%fZ\")(date))\n//         return d3.timeParse(\"%Y-%m-%dT%H:%M:%S.%fZ\")(date)\n//     else if (d3.timeParse(\"%Y-%m-%d %H:%M:%S\")(date))\n//         return d3.timeParse(\"%Y-%m-%d %H:%M:%S\")(date)\n//     else return date\n// }\n// const formatTick = (date) => {\n//     if (d3.timeParse(\"%Y-%m-%d\")(date))\n//         return d3.timeFormat(\"%Y-%-m-%-d\");\n//     else if (d3.timeParse(\"%Y/%m/%d\")(date))\n//         return d3.timeFormat(\"%Y/%-m/%-d\")\n//     else if (d3.timeParse(\"%Y-%m\")(date))\n//         return d3.timeFormat(\"%Y-%m\")\n//     else if (d3.timeParse(\"%Y/%m\")(date))\n//         return d3.timeFormat(\"%Y/%m\")\n//     else if (d3.timeParse(\"%Y\")(date))\n//         return d3.timeFormat(\"%Y\")\n//     else if (d3.timeParse(\"%Y-%m-%dT%H:%M:%S.%fZ\")(date))\n//         return d3.timeFormat(\"%Y/%m/%d/%H\")\n//     else if (d3.timeParse(\"%Y-%m-%d %H:%M:%S\")(date))\n//         return d3.timeFormat(\"%Y/%m/%d %H:%M:%S\")\n\n//     else\n//         return \"\"\n// }\n\n// const formatTicksCount = (date) => {\n//     if (d3.timeParse(\"%Y-%m-%d\")(date))\n//         return d3.timeDay\n//     else if (d3.timeParse(\"%Y/%m/%d\")(date))\n//         return d3.timeDay\n//     else if (d3.timeParse(\"%Y-%m\")(date))\n//         return d3.timeMonth\n//     else if (d3.timeParse(\"%Y/%m\")(date))\n//         return d3.timeMonth\n//     else if (d3.timeParse(\"%Y\")(date))\n//         return d3.timeYear\n// }\n\nexport default UnivariateOutlier;","import * as d3 from 'd3';\nimport Chart from '../../chart';\nimport { parseTime, formatTick } from '../constant/timeConstant'\nimport { getPosition } from '../constant/getPosition';\nimport { tooltipContainerId } from '../constant/getContainer';\n\nconst ENGFONT = \"OPPOSans\";\nconst COLOR_AXIS = \"#000000\";\nconst COLOR_GRID = \"#E6E6E6\";\nconst COLOR_TOOLTIP_DARK = \"#3E3A39\";\nconst COLOR_TOOLTIP_LIGHT = \"#FCFBE7\";\n// const SERIES_COLORS = [\"#6C8EF2\",\"#8B65BA\",\"#4B8384\",\"#E1944E\" ,\"#5EA211\"]\nconst SERIES_COLORS = [\"#6C8EF2\", \"#92551D\", \"#8B65BA\", \"#4B8384\", \"#5EA211\"]\nconst BLOCK_COLOR = { 'baseline': '#d2cffd', 'Compare': '#f5bf27' };\nconst BASELINE_SERIES_COLOR = \"#5B8EF9\"\nconst TITLE_BLOCK = '#000000'\nconst COLOR_LEGEND = { 'max': '#ffc136', 'min': '#ffffff' }\nconst TICK_VALUE = { 'tickSize': 10, 'tickWidth': 2 }\n\nclass Similarity extends Chart {\n    constructor(props) {\n        super(props);\n        this._x = '';\n        this._y = '';\n        this.props = props\n    }\n    display() {\n        /**\n         * The main drawing function\n         */\n        //---------------parse fact-------------------------\n        let factResult = this.parsrFact()\n        let data = factResult.data\n        let measure = factResult.measure\n        let breakdown = factResult.breakdown\n        let focus = factResult.focus\n        let subspace = factResult.subspace\n        if (focus.length === 0) return\n\n        //---------------init chart size--------------------\n        let chartResult = this.setChartStandard(measure, focus)\n        let chartSize = chartResult._chartSize\n        let width = chartResult._width\n        let height = chartResult._height\n        let margin = chartResult._margin\n\n        //------------------init---------------------------\n        //get container\n        // let containerSelector = this.container()\n        let containerSelector = tooltipContainerId\n        //init svg\n        let svg = this.initSvg(chartSize, margin)\n        //draw legend\n        this.drawLegend(svg, width)\n\n        //------------------draw x axis-------------------\n        let xAxisResult = this.drawXAxis(svg, data, breakdown, width, height, chartSize)\n        let x = xAxisResult._x\n        let tick_format = xAxisResult._tick_format\n\n        //-----------------Sets the layers for drawing------------------------\n        let lineLayer = svg.append(\"g\").attr('class', 'lineLayer')\n        let yAxisLayer = svg.append(\"g\").attr(\"class\", \"yAxis\")\n        let simiBlockLayer = svg.append('g').attr('class', 'simiblock')\n        let oneYLength = (height - 20 + 15) / measure.length\n        //--------------------set series color--------------------------------\n        let seriesColor = this.setSeriesColor(measure)\n        let tooltipPathList = [];\n        let tooltipPathData = [];\n        //--------------calculater max and min value of Base Line--------------\n        let baseLineMaxMin, baseStart, baseEnd, baseLineField;\n        focus.forEach(function (item, index) {\n            if (item.value[0].text === \"Base Line\") {\n                baseStart = item.value[0].start\n                baseEnd = item.value[0].end\n                baseLineField = item.field\n                baseLineMaxMin = d3.extent(data.slice(baseStart, baseEnd + 1), function (d) { return d[baseLineField] })\n            }\n        })\n\n        //------------Draw all time series data-------------------------------\n        for (let i = 0; i < measure.length; i++) {\n            let currentMeasureName = measure[i].field\n            //draw y axis\n            let y = this.drawYAxis(data, yAxisLayer, chartSize, oneYLength, currentMeasureName, seriesColor, i)\n            //draw back grid\n            let lineGen = this.drawBackLine(lineLayer, data, x, y, chartSize, breakdown, currentMeasureName, seriesColor)\n            //set simi block transparency\n            let backColor = d3.scaleLinear().domain([0, 1]).range([0.001, 0.5])\n            //draw similarity part\n            this.drawSimiPart(subspace, data, x, oneYLength, focus, breakdown, measure, simiBlockLayer, tooltipPathList, tooltipPathData, baseLineMaxMin, lineGen, seriesColor, backColor, currentMeasureName, i)\n\n        }\n        if (this._showTooltip) {\n            renderTooltip(this.tooltipId, containerSelector, tooltipPathList, tooltipPathData, data, breakdown, tick_format, { \"field\": baseLineField, \"start\": baseStart, \"end\": baseEnd }, seriesColor)\n        }\n        return svg;\n    }\n\n    parsrFact() {\n        /**\n         * Parse fact json\n         * return:The contents of each field in fact\n         */\n        let factData = this.factdata()\n        let measure = this.measure();\n        let breakdown = this.breakdown();\n        let focus = this.focus();\n        let subspace = this.subspace();\n        // set data\n        factData = factData.sort((a, b) => parseTime(a[breakdown[0].field]) - parseTime(b[breakdown[0].field]))\n        let data = factData\n        return { data: data, measure: measure, breakdown: breakdown, focus: focus, subspace: subspace }\n    }\n\n    setChartStandard(measure, focus) {\n        /** \n         * calculate size of the chart\n         * return chart size parameters\n         */\n        // set the dimensions and margins of the graph\n        let chartSize = { width: 600, height: 360 }\n        let margin = {\n            \"top\": 15,\n            \"right\": 20,\n            \"bottom\": 15,\n            \"left\": 20\n        }\n        let width = chartSize.width - margin.left - margin.right,\n            height = chartSize.height - margin.top - margin.bottom;\n        return { _width: width, _height: height, _chartSize: chartSize, _margin: margin }\n    }\n\n    initSvg(chartSize, margin) {\n        /**\n         * Initialize SVG based on the drawing area size\n         * return :svg \n         */\n        let svg = d3.select(this.container())\n            .append(\"svg\")\n            .attr(\"width\", chartSize.width)\n            .attr(\"height\", chartSize.height)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + (margin.left + 10) + \",\" + margin.top + \")\")\n            .attr(\"font-family\", ENGFONT);\n        return svg\n    }\n\n    drawLegend(svg, width) {\n        /**\n         * Draw a legend in SVG(Located in the upper right corner of SVG)\n         */\n        //set scale\n        let linear = d3.scaleLinear().domain([400, width - 70]).range([0, 1])\n        //Set the legend gradient color\n        let compute = d3.interpolate(COLOR_LEGEND['max'], COLOR_LEGEND['min'])\n        //draw legend rect\n        svg.selectAll(\"rect\")\n            .data(d3.range(400, width - 70, 1))\n            .enter()\n            .append(\"rect\")\n            .attr(\"x\", function (d, i) {\n                return i + 400;\n            })\n            .attr(\"y\", function (d, i) {\n                return -10;\n            })\n            .attr(\"width\", 1.1)\n            .attr(\"height\", 8)\n            .style(\"stroke\", function (d) {\n                return compute(linear(d))\n            })\n            .style(\"fill\", function (d) {\n                return compute(linear(d));\n            });\n        //text:100,Color maximum value\n        svg.append(\"text\")\n            .attr(\"y\", -2)\n            .attr(\"x\", 400)\n            .style(\"text-anchor\", \"start\")\n            .style(\"font-size\", \"8px\")\n            .text('100')\n        //text:0,Color minmum value\n        svg.append(\"text\")\n            .attr(\"y\", -2)\n            .attr(\"x\", width - 70)\n            .style(\"text-anchor\", \"start\")\n            .style(\"font-size\", \"8px\")\n            .text('0')\n        //text:Similarity Score\n        svg.append(\"text\")\n            .attr(\"y\", -2)\n            .attr(\"x\", width - 60 + 7)\n            .style(\"text-anchor\", \"start\")\n            .style(\"font-size\", \"8px\")\n            .text('Similarity Score')\n    }\n\n    drawXAxis(svg, data, breakdown, width, height, chartSize) {\n        /**\n         * Draw the X axis\n         */\n        let tick_format = formatTick(data[0][breakdown[0].field]);\n        // set the ranges\n        let x = d3.scaleTime()\n            .domain(d3.extent(data, function (d) { return parseTime(d[breakdown[0].field]); }))\n            .range([30, width - 10])\n        // Scale the range of the data in the domains\n        let axisX = d3.axisBottom(x).ticks(5).tickFormat(d3.timeFormat(\"%Y/%m/%d/%H\"))\n        svg.append(\"g\")\n            .attr(\"class\", \"xAxis\")\n            .attr(\"transform\", \"translate(0,\" + (height - 20) + \")\")\n            .call(axisX)\n            .attr(\"font-family\", ENGFONT)\n            .call(g => {\n                g.attr(\"font-size\", TICK_VALUE.tickSize);\n                g.attr(\"font-family\", ENGFONT);\n                let domainD = g.selectAll(\".domain\").attr(\"d\");\n                domainD = domainD.replace(\"6V\", (6 * chartSize.height / 320) + \"V\")\n                domainD = domainD.replace(\"V6\", \"V\" + (6 * chartSize.height / 320))\n                g.selectAll(\".domain\").attr(\"d\", domainD).attr(\"stroke-width\", TICK_VALUE.tickWidth);\n                g.selectAll(\".tick\")\n                    .selectAll(\"line\")\n                    .attr(\"stroke\", COLOR_AXIS)\n                    .attr(\"stroke-width\", TICK_VALUE.tickWidth)\n                    .attr(\"y2\", 6 * chartSize.height / 320);\n\n                g.selectAll(\"text\")\n                    .attr(\"y\", 9 * chartSize.height / 320);\n            })\n            .call(axisX)\n        return { _x: x, _tick_format: tick_format }\n    }\n    drawYAxis(data, yAxisLayer, chartSize, oneYLength, currentMeasureName, seriesColor, i) {\n        /**\n         * Draw the Y axis\n         */\n        let y = d3.scaleLinear().range([oneYLength * (i + 1) - 15, oneYLength * i])\n        y.domain(d3.extent([].concat(\n            // lower boundary minus margin\n            data.map(function (d) { return d[currentMeasureName] * 0.95 }),\n            // upper boundary add margin\n            data.map(function (d) { return d[currentMeasureName] * 1.05 })\n        )));\n        yAxisLayer.append(\"g\")\n            .attr(\"transform\", \"translate(30, 0)\")\n            .call(d3.axisLeft(y).ticks(5).tickFormat(function (d) {\n                if ((d / 1000000) >= 1) {\n                    d = d / 1000000 + \"M\";\n                } else if ((d / 1000) >= 1) {\n                    d = d / 1000 + \"K\";\n                }\n                return d;\n            }))\n            .call(g => {\n                g.attr(\"font-size\", '10px')\n                g.attr(\"font-weight\", 'light')\n                g.attr(\"font-family\", ENGFONT)\n                let domainD = g.selectAll(\".domain\").attr(\"d\");\n                domainD = domainD.replace(\"M-6\", \"M-\" + (6 * chartSize.width / 640))\n                domainD = domainD.replace(\"H-6\", \"H-\" + (6 * chartSize.width / 640))\n                g.selectAll(\".domain\").attr(\"d\", domainD).attr(\"stroke-width\", TICK_VALUE.tickWidth);\n                g.selectAll(\".tick\")\n                    .select(\"line\")\n                    .attr(\"stroke\", COLOR_AXIS)\n                    .attr(\"stroke-width\", TICK_VALUE.tickWidth)\n                    .attr(\"x2\", -6 * chartSize.width / 640);\n\n                g.selectAll(\"text\")\n                    .attr(\"x\", -9 * chartSize.width / 640);\n            });\n        // add y axis label\n        let title = yAxisLayer.append(\"text\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", -5)\n            .attr(\"x\", 0 - (oneYLength * (2 * i + 1) - 15) / 2)\n            .style(\"text-anchor\", \"middle\")\n            .style(\"font-size\", \"10px\")\n            .text(currentMeasureName)\n        yAxisLayer.append(\"rect\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .style(\"text-anchor\", \"middle\")\n            .attr(\"x\", title.node().getBBox().x)\n            .attr(\"y\", title.node().getBBox().y)\n            .attr(\"width\", title.node().getBBox().width + 2)\n            .attr(\"height\", title.node().getBBox().height)\n            .attr(\"fill\", seriesColor[currentMeasureName])\n        title.node().remove()\n        yAxisLayer.append(\"text\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", -5)\n            .attr(\"x\", 0 - (oneYLength * (2 * i + 1) - 15) / 2)\n            .style(\"text-anchor\", \"middle\")\n            .style(\"font-size\", \"10px\")\n            .text(currentMeasureName)\n        return y\n    }\n\n    setSeriesColor(measure) {\n        /**\n         * set series color\n         */\n        let seriesColor = {}\n        for (let i = 0; i < measure.length; i++) {\n            seriesColor[measure[i].field] = SERIES_COLORS[i % SERIES_COLORS.length]\n        }\n        return seriesColor\n    }\n\n    drawBackLine(lineLayer, data, x, y, chartSize, breakdown, currentMeasureName, seriesColor) {\n        /**\n         * draw series line and back grid\n         */\n        //draw Grid\n        lineLayer.append('g').selectAll('line.line')\n            .data(y.ticks(5)).enter().append('line')\n            .attr('x1', 30)\n            .attr('x2', chartSize.width)\n            .attr('y1', function (d) { return y(d) })\n            .attr('y2', function (d) { return y(d) })\n            .attr('stroke', COLOR_GRID)\n            .attr('stroke-width', '2px')\n        //draw series\n        let lineGen = d3.line().curve(d3.curveMonotoneX)\n            .x(function (d) {\n                return x(parseTime(d[breakdown[0].field]));\n            })\n            .y(function (d) {\n                return y(d[currentMeasureName]);\n            })\n        lineLayer.append('path')\n            .attr('d', lineGen(data))\n            .attr('stroke', seriesColor[currentMeasureName])\n            .attr('stroke-width', '2px')\n            .attr('fill', 'none')\n        return lineGen\n    }\n\n    drawSimiPart(subspace, data, x, oneYLength, focus, breakdown, measure, simiBlockLayer, tooltipPathList, tooltipPathData, baseLineMaxMin, lineGen, seriesColor, backColor, currentMeasureName, i) {\n        /**\n         * draw similarity block\n         */\n        for (let similarity_slice of focus) {\n            if (similarity_slice.field === currentMeasureName) {\n                let value = similarity_slice.value\n                for (let item of value) {\n                    //Locate the similarity part\n                    let start = Math.max(0, item.start)\n                    let end = Math.min(data.length - 1, item.end + 1)\n\n                    //Draw similarity background box boundary rect\n                    let tooltipPath = simiBlockLayer.append(\"rect\")\n                        .attr(\"x\", x(parseTime(data[start][breakdown[0].field])))\n                        .attr(\"y\", oneYLength * i)\n                        .attr(\"width\", x(parseTime(data[end][breakdown[0].field])) - x(parseTime(data[start][breakdown[0].field])))\n                        .attr(\"height\", oneYLength - 15)\n                        .attr(\"fill\", BLOCK_COLOR[similarity_slice.tag])\n                        .attr(\"fill-opacity\", function () {\n                            if (similarity_slice.tag === 'baseline') {\n                                return 0.4\n                            } else {\n                                return backColor(item.similarity_value)\n                            }\n                        })\n                    //If it is not baseline, the Tooltip small box appears\n                    if (similarity_slice.tag !== \"baseline\") {\n                        //Find the maximum and minimum values for this section for the tooltip\n                        let minmax = d3.extent(data.slice(start, end + 1), function (d) { return d[currentMeasureName]; })\n                        tooltipPathList.push(tooltipPath)\n                        //Compare the minimum and maximum values to the baseline and pass them to the tooltip\n                        tooltipPathData.push(\n                            {\n                                \"field\": similarity_slice.field,\n                                \"start\": start,\n                                \"end\": end,\n                                \"ymax\": minmax[1] > baseLineMaxMin[1] ? minmax[1] : baseLineMaxMin[1],\n                                \"ymin\": minmax[0] < baseLineMaxMin[0] ? minmax[0] : baseLineMaxMin[0],\n                                \"similarity_value\": item.similarity_value\n                            })\n                    }\n                    //Draw a similarity line\n                    simiBlockLayer.append(\"path\")\n                        .attr(\"d\", lineGen(data.slice(start, end + 1)))\n                        .attr(\"stroke\", seriesColor[measure[i].field])\n                        .attr(\"stroke-width\", \"2px\")\n                        .attr(\"fill\", \"none\")\n\n                    //Draw the line to the left of the Similarity background box boundary rect\n                    simiBlockLayer.append(\"rect\")\n                        .attr(\"x\", x(parseTime(data[start][breakdown[0].field])))\n                        .attr(\"y\", oneYLength * i)\n                        .attr(\"width\", 1)\n                        .attr(\"height\", oneYLength - 15)\n                        .attr(\"fill\", BLOCK_COLOR[similarity_slice.tag])\n\n                    //Draw the line to the right of the Similarity background box boundary rect\n                    simiBlockLayer.append(\"rect\")\n                        .attr(\"x\", x(parseTime(data[end][breakdown[0].field])) - 1)\n                        .attr(\"y\", oneYLength * i)\n                        .attr(\"width\", 1)\n                        .attr(\"height\", oneYLength - 15)\n                        .attr(\"fill\", BLOCK_COLOR[similarity_slice.tag])\n\n                    //Add a simi block title\n                    simiBlockLayer.append(\"text\")\n                        .attr(\"x\", x(parseTime(data[start][breakdown[0].field])) + 5)\n                        .attr(\"y\", oneYLength * i + 7 + 5)\n                        .attr(\"fill\", TITLE_BLOCK)\n                        .style(\"font-size\", \"7px\")\n                        .style(\"font-family\", ENGFONT)\n                        .style(\"font-weight\", \"bold\")\n                        .text(item.text)\n                }\n            }\n        }\n    }\n\n}\nlet renderTooltip = (tooltipId, containerSelector, tooltipPathList, tooltipPathData, data, breakdown, tick_format, baseline_local, seriesColor) => {\n    //外部的整个div\n    let hoverTooltip = d3.select(containerSelector)\n        .append(\"div\")\n        .attr(\"id\", \"hover-tooltip\")\n        .style(\"z-index\", 2000)\n        .style(\"width\", \"200px\")\n        .style(\"height\", \"115px\")\n        .style(\"opacity\", 0)\n        .style(\"position\", \"absolute\")\n        .style(\"pointer-events\", \"none\")\n        .style(\"padding-left\", \"10px\")\n    //大框界里面的标题栏\n    let hoverTooltipTitle = hoverTooltip.append(\"div\")\n        .style(\"display\", \"flex\")\n        .style(\"align-items\", \"center\")\n        .style(\"height\", \"15px\")\n        .style(\"border\", `2px solid ${COLOR_TOOLTIP_DARK}`)\n        .style(\"border-radius\", \"4px 4px 0px 0px\")\n        .style(\"padding-left\", \"5px\")\n        .style(\"padding-right\", \"5px\")\n        .style(\"background\", COLOR_TOOLTIP_DARK)\n        .style(\"font\", `7px ${ENGFONT}`)\n        .style(\"font-weight\", \"bold\")\n        .style(\"color\", COLOR_TOOLTIP_LIGHT)\n        .style(\"text-overflow\", \"ellipsis\")\n        .style(\"overflow\", \"hidden\")\n        .style(\"white-space\", \"nowrap\")\n    //大框界下面的绘图栏\n    let hoverTooltipContent = hoverTooltip.append(\"div\")\n        .style(\"width\", \"200px\")\n        .style(\"height\", \"100px\")\n        .style(\"border\", `2px solid ${COLOR_TOOLTIP_DARK}`)\n        .style(\"border-radius\", \"0px 4px 4px 4px\")\n        .style(\"background\", COLOR_TOOLTIP_LIGHT)\n\n    //左侧的指向性箭头\n    hoverTooltipContent.append(\"span\")\n        .style(\"position\", \"absolute\")\n        .style(\"left\", \"-10px\")\n        .style(\"top\", \"60px\")\n        .style(\"border-width\", \"10px\")\n        .style(\"border-style\", \"dashed solid dashed dashed\")\n        .style(\"border-color\", `transparent ${COLOR_TOOLTIP_DARK} transparent transparent`)\n        .style(\"font-size\", 0)\n        .style(\"line-height\", 0)\n\n    //左侧指向性箭头内部的白色小三角\n    hoverTooltipContent.append(\"em\")\n        .style(\"position\", \"absolute\")\n        .style(\"left\", \"-4px\")\n        .style(\"top\", \"62px\")\n        .style(\"border-width\", \"8.2px\")\n        .style(\"border-style\", \"dashed solid dashed dashed\")\n        .style(\"border-color\", `transparent ${COLOR_TOOLTIP_LIGHT} transparent transparent`)\n        .style(\"font-size\", 0)\n        .style(\"line-height\", 0)\n    //内部画图区域\n    hoverTooltipContent.append(\"div\")\n        .attr(\"id\", \"tooltip-chart\" + tooltipId)\n\n    for (let i = 0; i < tooltipPathList.length; i++) {\n\n        tooltipPathList[i]\n            .on(\"mouseover\", function (d) {\n                hoverTooltip.transition()\n                    .duration(200)\n                    .style(\"opacity\", .9)\n            })\n            .on(\"mouseout\", function (d) {\n                hoverTooltip.transition()\n                    .duration(500)\n                    .style(\"opacity\", 0)\n            })\n            .on(\"mousemove\", function (d) {\n                let position = getPosition()\n                hoverTooltip.style(\"left\", (position.posX + 30) + \"px\").style(\"top\", (position.posY - 50) + \"px\")\n                let title = tick_format(parseTime(data[tooltipPathData[i].start][breakdown[0].field])) + \"-\" + tick_format(parseTime(data[tooltipPathData[i].end][breakdown[0].field]))\n                hoverTooltipTitle.html(title)\n                //x轴的定义域为：当前选中数据点的顺序\n                let tooltipX = d3.scaleLinear().domain([0, tooltipPathData[i].end - tooltipPathData[i].start]).range([0, 195])\n                let tooltipY = d3.scaleLinear().domain([tooltipPathData[i].ymin * 0.9, tooltipPathData[i].ymax * 1.1]).range([100, 0])\n                let tooltipBaslineGen = d3.line().curve(d3.curveMonotoneX)\n                    .x(function (d, i) {\n                        return tooltipX(i);\n                    })\n                    .y(function (d, i) {\n                        return tooltipY(d[baseline_local.field]);\n                    })\n                let tooltipCompareGen = d3.line().curve(d3.curveMonotoneX)\n                    .x(function (d, i) {\n                        return tooltipX(i);\n                    })\n                    .y(function (d) {\n                        return tooltipY(d[tooltipPathData[i].field]);\n                    })\n                //绘制tooltip上的图形\n                d3.select(\"#tooltip-chart\" + tooltipId).selectAll(\"*\").remove()\n                let tooltipSvg = d3.select(\"#tooltip-chart\" + tooltipId)\n                    .append(\"svg\")\n                    .attr(\"class\", tooltipPathData[i].field)\n                    .attr(\"width\", \"200\")\n                    .attr(\"height\", \"100\")\n                let tooltipLayer = tooltipSvg.append(\"g\")\n                    .attr(\"font-family\", ENGFONT)\n\n                //绘制baseline的折线图\n                tooltipLayer.append(\"path\")\n                    .attr(\"d\", tooltipBaslineGen(data.slice(baseline_local.start, baseline_local.end + 1)))\n                    .attr(\"stroke\", BASELINE_SERIES_COLOR)\n                    .attr(\"stroke-width\", \"2px\")\n                    .attr(\"fill\", \"none\")\n                //绘制与baseline进行比对的序列的折线图\n                tooltipLayer.append(\"path\")\n                    .attr(\"d\", tooltipCompareGen(data.slice(tooltipPathData[i].start, tooltipPathData[i].end + 1)))\n                    .attr(\"stroke\", seriesColor[tooltipPathData[i].field])\n                    .attr(\"stroke-width\", \"2px\")\n                    .attr(\"fill\", \"none\")\n                //绘制baseline图例rect\n                tooltipLayer.append(\"rect\")\n                    .attr(\"x\", 6)\n                    .attr(\"y\", 100 - 5 - 6)\n                    .attr(\"width\", 15)\n                    .attr(\"height\", 5)\n                    .attr(\"fill\", BASELINE_SERIES_COLOR)\n\n                //添加文字\n                //文字\"Base Line\"\n                tooltipLayer.append(\"text\")\n                    .attr(\"x\", 6 + 15 + 6)\n                    .attr(\"y\", 100 - 5 - 2)\n                    .attr(\"fill\", \"#3e3a39\")\n                    .style(\"font-size\", \"6px\")\n                    .style(\"font-family\", ENGFONT)\n                    .style(\"font-weight\", \"bolder\")\n                    .text(\"Base Line\")\n\n                //数字\"similarity\"的值\n                tooltipLayer.append(\"text\")\n                    .attr(\"x\", 6)\n                    .attr(\"y\", 8)\n                    .attr(\"fill\", \"#ffc111\")\n                    .style(\"font-size\", \"7px\")\n                    .style(\"font-family\", ENGFONT)\n                    .style(\"font-weight\", \"bolder\")\n                    .text((tooltipPathData[i].similarity_value * 100).toFixed(2))\n\n                //文字\"Similarity\"\n                tooltipLayer.append(\"text\")\n                    .attr(\"x\", 30)\n                    .attr(\"y\", 8)\n                    .attr(\"fill\", \"#3e3a39\")\n                    .style(\"font-size\", \"7px\")\n                    .style(\"font-family\", ENGFONT)\n                    .style(\"font-weight\", \"bolder\")\n                    .text(\"Similarity\")\n                // add y axis\n                tooltipSvg.append(\"g\")\n                    .attr(\"transform\", \"translate(200, 0)\")\n                    .call(d3.axisLeft(tooltipY).ticks(3).tickFormat(function (d) {\n                        if ((d / 1000000) >= 1) {\n                            d = d / 1000000 + \"M\";\n                        } else if ((d / 1000) >= 1) {\n                            d = d / 1000 + \"K\";\n                        }\n                        return d;\n                    }))\n                    .call(g => {\n                        g.attr(\"font-size\", '6px')\n                        g.attr(\"font-weight\", 'light')\n                        g.attr(\"font-family\", ENGFONT)\n\n                        let domainD = g.selectAll(\".domain\").attr(\"d\");\n                        domainD = domainD.replace(\"M-6\", \"M-\" + (6 * 200 / 640))\n                        domainD = domainD.replace(\"H-6\", \"H-\" + (6 * 200 / 640))\n                        g.selectAll(\".domain\").attr(\"d\", domainD).attr(\"stroke-width\", \"1px\");\n                        g.selectAll(\".tick\")\n                            .select(\"line\")\n                            .attr(\"stroke\", COLOR_AXIS)\n                            .attr(\"stroke-width\", \"1px\")\n                            .attr(\"x2\", -6 * 200 / 640);\n\n                        g.selectAll(\"text\")\n                            .attr(\"x\", -9 * 200 / 640);\n                    });\n            })\n    }\n\n}\n\nexport default Similarity;","import * as d3 from 'd3';\r\nimport { $CombinedState } from 'redux';\r\nimport Chart from '../../chart';\r\nimport { getPosition } from '../constant/getPosition';\r\nimport { parseTime, formatTick, formatTicksCount } from '../constant/timeConstant'\r\nconst ENGFONT = \"OPPOSans\";\r\nconst COLOR_AXIS = \"#000000\";\r\nconst COLOR_GRID = \"#E6E6E6\";\r\nconst SERIES_COLORS = [\"#6C8EF2\", \"#92551D\", \"#8B65BA\", \"#4B8384\", \"#5EA211\"]\r\nconst TICK_VALUE = { 'tickSize': 10, 'tickWidth': 2 }\r\nconst RECOMMEND_COLOR = \"#f5bf27\"\r\nconst SEQENCE_COLOR = \"#f5bf27\"\r\nconst gap = 30\r\nlet drawMultiBlock = false;\r\n\r\nclass Origin extends Chart {\r\n    constructor(props) {\r\n        super(props);\r\n        this._x = '';\r\n        this._y = '';\r\n        this.props = props\r\n    }\r\n    display() {\r\n        /**\r\n         * The main drawing function\r\n         */\r\n        //---------------parse fact-------------------------\r\n        let factResult = this.parsrFact()\r\n        let data = factResult.data\r\n        let measure = factResult.measure\r\n        let breakdown = factResult.breakdown\r\n        let focus = factResult.focus\r\n        //parse focus content\r\n        // this.block=[]\r\n        // this.location=[]\r\n        // if(focus.length>0){\r\n        //     this.location=[focus[0].start,focus[0].end]\r\n        // }\r\n        // for(let i=0;i<focus.length;i++){\r\n        //     this.block.push(focus[i].field)\r\n        // }\r\n\r\n        //---------------init chart size--------------------\r\n        let chartResult = this.setChartStandard(data, measure)\r\n        let chartSize = chartResult._chartSize\r\n        let width = chartResult._width\r\n        let height = chartResult._height\r\n        let margin = chartResult._margin\r\n\r\n        //------------------init---------------------------\r\n        //init svg\r\n        let svg = this.initSvg(chartSize, margin)\r\n\r\n        //------------------draw x axis-------------------\r\n        let xAxisResult = this.drawXAxis(svg, data, breakdown, width, height, chartSize)\r\n        let x = xAxisResult._x\r\n\r\n        //-----------------Sets the layers for drawing------------------------\r\n        let lineLayer = svg.append(\"g\").attr('class', 'lineLayer')\r\n        let yAxisLayer = svg.append(\"g\").attr(\"class\", \"yAxis\")\r\n        let yTextToolitip = svg\r\n            .append(\"div\")\r\n            .attr(\"id\", \"text-tooltip\")\r\n            .style(\"z-index\", 2000)\r\n            .style(\"width\", \"200px\")\r\n            .style(\"height\", \"115px\")\r\n            .style(\"opacity\", 0.9)\r\n            .style(\"position\", \"absolute\")\r\n            .style(\"pointer-events\", \"none\")\r\n            .style(\"padding-left\", \"10px\")\r\n        let oneYLength = (height - 20 + gap) / measure.length\r\n        let simiBlockLayer = svg.append('g').attr('class', 'simiblock')\r\n\r\n        //--------------------set series color--------------------------------\r\n        let seriesColor = this.setSeriesColor(measure)\r\n        //--------------calculater max and min value of Base Line--------------\r\n\r\n        //------------Draw all time series data-------------------------------\r\n        for (let i = 0; i < measure.length; i++) {\r\n            let currentMeasureName = measure[i].field\r\n            //draw y axis\r\n            let y = this.drawYAxis(data, yAxisLayer, yTextToolitip, chartSize, oneYLength, currentMeasureName, seriesColor, i)\r\n            //draw back grid\r\n            let lineGen = this.drawBackLine(lineLayer, data, x, y, width, breakdown, currentMeasureName, seriesColor)\r\n            // //univariate insight\r\n            // if (focus.length === 1) {\r\n            //     this.drawUniFocusPart(data, x, oneYLength, focus, breakdown, measure, simiBlockLayer, lineGen, seriesColor, currentMeasureName, i)\r\n            // }\r\n            // //multivariate insight\r\n            // //绘制一遍block(采用全局变量drawMultiBlock进行控制),循环绘制多遍序列\r\n            // else if (focus.length > 1) {\r\n            //     this.drawMultiFocusPart(data, x, oneYLength * measure.length, focus, breakdown, measure, simiBlockLayer, lineGen, seriesColor, currentMeasureName, i)\r\n            // }\r\n\r\n        }\r\n        if (drawMultiBlock) drawMultiBlock = false;\r\n        return svg;\r\n    }\r\n\r\n    parsrFact() {\r\n        /**\r\n         * Parse fact json\r\n         * return:The contents of each field in fact\r\n         */\r\n        let factData = this.factdata()\r\n        let measure = this.measure();\r\n        let breakdown = this.breakdown();\r\n        let focus = this.focus();\r\n        // set data\r\n        factData = factData.sort((a, b) => parseTime(a[breakdown[0].field]) - parseTime(b[breakdown[0].field]))\r\n        let data = factData\r\n        return { data: data, measure: measure, breakdown: breakdown, focus: focus }\r\n    }\r\n\r\n    setChartStandard(data, measure) {\r\n        /** \r\n         * calculate size of the chart\r\n         * return chart size parameters\r\n         */\r\n        // set the dimensions and margins of the graph\r\n        let chartSize = { width: Math.max(data.length * 2, 1000), height: 120 * measure.length }\r\n        let margin = {\r\n            \"top\": 15,\r\n            \"right\": 50,\r\n            \"bottom\": 15,\r\n            \"left\": 20\r\n        }\r\n        let width = chartSize.width - margin.left - margin.right,\r\n            height = chartSize.height - margin.top - margin.bottom;\r\n        return { _width: width, _height: height, _chartSize: chartSize, _margin: margin }\r\n    }\r\n\r\n    initSvg(chartSize, margin) {\r\n        /**\r\n         * Initialize SVG based on the drawing area size\r\n         * return :svg \r\n         */\r\n        let svg = d3.select(this.container())\r\n            .append(\"svg\")\r\n            .attr(\"width\", chartSize.width)\r\n            .attr(\"height\", chartSize.height)\r\n            .append(\"g\")\r\n            .attr(\"transform\", \"translate(\" + (margin.left + 10) + \",\" + margin.top + \")\")\r\n            .attr(\"font-family\", ENGFONT);\r\n        return svg\r\n    }\r\n\r\n    drawXAxis(svg, data, breakdown, width, height, chartSize) {\r\n        /**\r\n         * Draw the X axis\r\n         */\r\n        // let tick_format = formatTick(data[0][breakdown[0].field]);\r\n        // set the ranges\r\n        let x = d3.scaleTime()\r\n            .domain(d3.extent(data, function (d) { return parseTime(d[breakdown[0].field]); }))\r\n            .range([60, width - 10])\r\n        // Scale the range of the data in the domains\r\n        // let format_TicksCount = formatTicksCount(data[0][breakdown[0].field]);\r\n        let tick_format = formatTick(data[0][breakdown[0].field]);\r\n        let axisX = d3.axisBottom(x).ticks(5).tickFormat(tick_format)\r\n        svg.append(\"g\")\r\n            .attr(\"class\", \"xAxis\")\r\n            .attr(\"transform\", \"translate(0,\" + (height - 20) + \")\")\r\n            .call(axisX)\r\n            .attr(\"font-family\", ENGFONT)\r\n            .call(g => {\r\n                g.attr(\"font-size\", TICK_VALUE.tickSize);\r\n                g.attr(\"font-family\", ENGFONT);\r\n                let domainD = g.selectAll(\".domain\").attr(\"d\");\r\n                domainD = domainD.replace(\"6V\", (6 * chartSize.height / 320) + \"V\")\r\n                domainD = domainD.replace(\"V6\", \"V\" + (6 * chartSize.height / 320))\r\n                g.selectAll(\".domain\").attr(\"d\", domainD).attr(\"stroke-width\", TICK_VALUE.tickWidth);\r\n                g.selectAll(\".tick\")\r\n                    .selectAll(\"line\")\r\n                    .attr(\"stroke\", COLOR_AXIS)\r\n                    .attr(\"stroke-width\", TICK_VALUE.tickWidth)\r\n                    .attr(\"y2\", 6 * chartSize.height / 320);\r\n\r\n                g.selectAll(\"text\")\r\n                    .attr(\"y\", 9 * chartSize.height / 320);\r\n            })\r\n            .call(axisX)\r\n        return { _x: x, _tick_format: tick_format }\r\n    }\r\n    drawYAxis(data, yAxisLayer, yTextToolitip, chartSize, oneYLength, currentMeasureName, seriesColor, i) {\r\n        /**\r\n         * Draw the Y axis\r\n         */\r\n        let y = d3.scaleLinear().range([oneYLength * (i + 1) - gap, oneYLength * i])\r\n        y.domain(d3.extent([].concat(\r\n            // lower boundary minus margin\r\n            data.map(function (d) { return d[currentMeasureName] * 0.95 }),\r\n            // upper boundary add margin\r\n            data.map(function (d) { return d[currentMeasureName] * 1.05 })\r\n        )));\r\n        yAxisLayer.append(\"g\")\r\n            .attr(\"transform\", \"translate(60, 0)\")\r\n            .call(d3.axisLeft(y).ticks(5).tickFormat(function (d) {\r\n                if ((d / 1000000) >= 1) {\r\n                    d = d / 1000000 + \"M\";\r\n                } else if ((d / 1000) >= 1) {\r\n                    d = d / 1000 + \"K\";\r\n                }\r\n                return d;\r\n            }))\r\n            .call(g => {\r\n                g.attr(\"font-size\", '10px')\r\n                g.attr(\"font-weight\", 'light')\r\n                g.attr(\"font-family\", ENGFONT)\r\n                let domainD = g.selectAll(\".domain\").attr(\"d\");\r\n                domainD = domainD.replace(\"M-6\", \"M-\" + (6 * 1))\r\n                domainD = domainD.replace(\"M-6\", \"M-\" + (6 * 1))\r\n                // domainD = domainD.replace(\"M-6\", \"M-\" + (6 * chartSize.width / 640))\r\n                // domainD = domainD.replace(\"H-6\", \"H-\" + (6 * chartSize.width / 640))\r\n                g.selectAll(\".domain\").attr(\"d\", domainD).attr(\"stroke-width\", TICK_VALUE.tickWidth);\r\n                g.selectAll(\".tick\")\r\n                    .select(\"line\")\r\n                    .attr(\"stroke\", COLOR_AXIS)\r\n                    .attr(\"stroke-width\", TICK_VALUE.tickWidth)\r\n                    .attr(\"x2\", -6);\r\n                // .attr(\"x2\", -6 * chartSize.width / 640);\r\n\r\n                g.selectAll(\"text\")\r\n                    // .attr(\"x\", -9 * chartSize.width / 640);\r\n                    .attr(\"x\", -9);\r\n            });\r\n        let yText = currentMeasureName\r\n        if (currentMeasureName.length > 15) {\r\n            yText = yText.substr(0, 15) + '...'\r\n        }\r\n        yAxisLayer.append(\"text\")\r\n            .attr(\"transform\", \"rotate(-90)\")\r\n            .attr(\"y\", 20)\r\n            .attr(\"x\", 0 - (oneYLength * (2 * i + 1) - gap) / 2)\r\n            .style(\"text-anchor\", \"middle\")\r\n            .style(\"font-size\", \"12px\")\r\n            .style(\"font-weight\", \"bold\")\r\n            .style(\"fill\", seriesColor[currentMeasureName])\r\n            .style(\"text-decoration\", \"underline\")\r\n            .style(\"cursor\", \"pointer\")\r\n            .text(yText)\r\n            .on('mouseover', function (d, i) {\r\n                yTextToolitip.html(currentMeasureName)\r\n                yTextToolitip.transition()\r\n                    .duration(200)\r\n                    .style(\"opacity\", .9)\r\n\r\n            })\r\n            .on(\"mouseout\", function (d) {\r\n                yTextToolitip.transition()\r\n                    .duration(500)\r\n                    .style(\"opacity\", 0)\r\n            })\r\n            .on(\"mousemove\", function (d) {\r\n                let position = getPosition()\r\n                yTextToolitip.style(\"left\", (position.posX + 30) + \"px\").style(\"top\", (position.posY - 50) + \"px\")\r\n            })\r\n\r\n        return y\r\n    }\r\n    drawUniFocusPart(data, x, oneYLength, focus, breakdown, measure, simiBlockLayer, lineGen, seriesColor, currentMeasureName, i) {\r\n        /**\r\n         * draw uni focus block\r\n         */\r\n        let pointer = this.props;\r\n        for (let similarity_slice of focus) {\r\n            if (similarity_slice.field === currentMeasureName) {\r\n                let value = similarity_slice.value\r\n                for (let item of value) {\r\n                    //Locate the similarity part\r\n                    let start = Math.max(0, item.start - 1)\r\n                    let end = Math.min(data.length - 1, item.end + 1)\r\n\r\n                    //Draw similarity background box boundary rect\r\n                    simiBlockLayer.append(\"rect\")\r\n                        .attr(\"x\", x(parseTime(data[start][breakdown[0].field])))\r\n                        .attr(\"y\", oneYLength * i)\r\n                        .attr(\"width\", x(parseTime(data[end][breakdown[0].field])) - x(parseTime(data[start][breakdown[0].field])))\r\n                        .attr(\"height\", oneYLength - 30)\r\n                        .attr(\"fill\", function () {\r\n                            if (pointer.spec.chart.id === \"origin-recommend\") return RECOMMEND_COLOR\r\n                            else return SEQENCE_COLOR\r\n                        }\r\n                        )\r\n                        .attr(\"fill-opacity\", 0.2)\r\n                        .attr(\"cursor\", \"pointer\")\r\n                        .attr(\"id\", currentMeasureName + \"-\" + item.start + \"-\" + item.end)\r\n                        .attr(\"class\", \"insight-block false\")\r\n                        .on(\"mouseover\", function () {\r\n                            d3.select(this)\r\n                                .transition()\r\n                                .duration(500)\r\n                                .attr(\"fill-opacity\", 0.5)\r\n                        })\r\n                        .on(\"mouseout\", function () {\r\n                            d3.select(this)\r\n                                .transition()\r\n                                .duration(500)\r\n                                .attr(\"fill-opacity\", 0.2)\r\n                        })\r\n                        .on(\"click\", function () {\r\n                            // d3.select(this)\r\n                            // .attr(\"class\",\"insight-block true\")\r\n                            if (!pointer.isPopInsightCard) {\r\n                                pointer.setPopInsightCardState(true)\r\n                            }\r\n                        })\r\n                    //Draw a similarity line\r\n                    simiBlockLayer.append(\"path\")\r\n                        .attr(\"d\", lineGen(data.slice(start, end + 1)))\r\n                        .attr(\"stroke\", seriesColor[measure[i].field])\r\n                        .attr(\"stroke-width\", \"2px\")\r\n                        .attr(\"fill\", \"none\")\r\n\r\n                    //Draw the line to the left of the Similarity background box boundary rect\r\n                    simiBlockLayer.append(\"rect\")\r\n                        .attr(\"x\", x(parseTime(data[start][breakdown[0].field])))\r\n                        .attr(\"y\", oneYLength * i)\r\n                        .attr(\"width\", 1)\r\n                        .attr(\"height\", oneYLength - 30)\r\n                        .attr(\"fill\", RECOMMEND_COLOR)\r\n\r\n                    //Draw the line to the right of the Similarity background box boundary rect\r\n                    simiBlockLayer.append(\"rect\")\r\n                        .attr(\"x\", x(parseTime(data[end][breakdown[0].field])) - 1)\r\n                        .attr(\"y\", oneYLength * i)\r\n                        .attr(\"width\", 1)\r\n                        .attr(\"height\", oneYLength - 30)\r\n                        .attr(\"fill\", RECOMMEND_COLOR)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    drawMultiFocusPart(data, x, blockHeight, focus, breakdown, measure, simiBlockLayer, lineGen, seriesColor, currentMeasureName, i) {\r\n        let pointer = this.props;\r\n        for (let content of focus) {\r\n            if (content.field === currentMeasureName) {\r\n                let item = content.value[0]\r\n                //Locate the similarity part\r\n                let start = Math.max(0, item.start - 1)\r\n                let end = Math.min(data.length - 1, item.end + 1)\r\n                //only draw background rect once\r\n                if (!drawMultiBlock) {\r\n                    //Draw similarity background box boundary rect\r\n                    simiBlockLayer.append(\"rect\")\r\n                        .attr(\"x\", x(parseTime(data[start][breakdown[0].field])))\r\n                        .attr(\"y\", 0)\r\n                        .attr(\"width\", x(parseTime(data[end][breakdown[0].field])) - x(parseTime(data[start][breakdown[0].field])))\r\n                        .attr(\"height\", blockHeight - 30)\r\n                        .attr(\"fill\", function () {\r\n                            if (pointer.spec.chart.id === \"origin-recommend\") return RECOMMEND_COLOR\r\n                            else return SEQENCE_COLOR\r\n                        })\r\n                        .attr(\"fill-opacity\", 0.2)\r\n                        .attr(\"cursor\", \"pointer\")\r\n                        .attr(\"id\", currentMeasureName + \"-\" + item.start + \"-\" + item.end)\r\n                        .attr(\"class\", \"insight-block false\")\r\n                        .on(\"mouseover\", function () {\r\n                            d3.select(this)\r\n                                .transition()\r\n                                .duration(500)\r\n                                .attr(\"fill-opacity\", 0.5)\r\n                        })\r\n                        .on(\"mouseout\", function () {\r\n                            d3.select(this)\r\n                                .transition()\r\n                                .duration(500)\r\n                                .attr(\"fill-opacity\", 0.2)\r\n                        })\r\n                        .on(\"click\", function () {\r\n                            if (!pointer.isPopInsightCard) {\r\n                                pointer.setPopInsightCardState(true)\r\n                            }\r\n                        })\r\n                }\r\n                //Draw a similarity line\r\n                simiBlockLayer.append(\"path\")\r\n                    .attr(\"d\", lineGen(data.slice(start, end + 1)))\r\n                    .attr(\"stroke\", seriesColor[measure[i].field])\r\n                    .attr(\"stroke-width\", \"2px\")\r\n                    .attr(\"fill\", \"none\")\r\n                if (!drawMultiBlock) {\r\n                    //Draw the line to the left of the Similarity background box boundary rect\r\n                    simiBlockLayer.append(\"rect\")\r\n                        .attr(\"x\", x(parseTime(data[start][breakdown[0].field])))\r\n                        .attr(\"y\", 0)\r\n                        .attr(\"width\", 1)\r\n                        .attr(\"height\", blockHeight - 30)\r\n                        .attr(\"fill\", RECOMMEND_COLOR)\r\n                        .attr(\"fill-opacity\", 0.4)\r\n\r\n                    //Draw the line to the right of the Similarity background box boundary rect\r\n                    simiBlockLayer.append(\"rect\")\r\n                        .attr(\"x\", x(parseTime(data[end][breakdown[0].field])) - 1)\r\n                        .attr(\"y\", 0)\r\n                        .attr(\"width\", 1)\r\n                        .attr(\"height\", blockHeight - 30)\r\n                        .attr(\"fill\", RECOMMEND_COLOR)\r\n                        .attr(\"fill-opacity\", 0.4)\r\n\r\n                }\r\n            }\r\n        }\r\n        if (!drawMultiBlock) drawMultiBlock = true;\r\n    }\r\n    setSeriesColor(measure) {\r\n        /**\r\n         * set series color\r\n         */\r\n        let seriesColor = {}\r\n        for (let i = 0; i < measure.length; i++) {\r\n            seriesColor[measure[i].field] = SERIES_COLORS[i % SERIES_COLORS.length]\r\n        }\r\n        return seriesColor\r\n    }\r\n\r\n    drawBackLine(lineLayer, data, x, y, width, breakdown, currentMeasureName, seriesColor) {\r\n        /**\r\n         * draw series line and back grid\r\n         */\r\n        //draw Grid\r\n        lineLayer.append('g').selectAll('line.line')\r\n            .data(y.ticks(5)).enter().append('line')\r\n            .attr('x1', 60)\r\n            .attr('x2', width - 10)\r\n            .attr('y1', function (d) { return y(d) })\r\n            .attr('y2', function (d) { return y(d) })\r\n            .attr('stroke', COLOR_GRID)\r\n            .attr('stroke-width', '2px')\r\n        //draw series\r\n        let lineGen = d3.line().curve(d3.curveMonotoneX)\r\n            .x(function (d) {\r\n                return x(parseTime(d[breakdown[0].field]));\r\n            })\r\n            .y(function (d) {\r\n                return y(d[currentMeasureName]);\r\n            })\r\n        lineLayer.append('path')\r\n            .attr('d', lineGen(data))\r\n            .attr('stroke', seriesColor[currentMeasureName])\r\n            .attr('stroke-width', '2px')\r\n            .attr('fill', 'none')\r\n        return lineGen\r\n    }\r\n}\r\n\r\nexport default Origin;","import * as d3 from 'd3';\r\nimport Chart from '../../chart';\r\nimport { tooltipContainerId } from \"../constant/getContainer\";\r\nimport { getPosition } from '../constant/getPosition';\r\nimport { parseTime, formatTick, formatTicksCount } from '../constant/timeConstant'\r\n\r\nconst ENGFONT = \"OPPOSans\";\r\nconst COLOR_REGULAR = \"#6C8EF2\";\r\nconst COLOR_GRID = \"#E6E6E6\";\r\nconst COLOR_TEXT = \"#000000\";\r\nconst COLOR_STAR = \"#F5BF27\";\r\nconst COLOR_AXIS = \"#000000\";\r\n\r\nclass Outstanding extends Chart {\r\n    constructor() {\r\n        super();\r\n        this._x = '';\r\n        this._y = '';\r\n    }\r\n\r\n    display() {\r\n\r\n        let factData = this.factdata()\r\n        let measure = this.measure();\r\n        let breakdown = this.breakdown();\r\n        let focus = this.focus();\r\n\r\n        let stars = [];\r\n        for (let i = 0; i < focus.length; i++) {\r\n            let star = factData.filter(d => d[measure[0].field] === factData[focus[i].index][measure[0].field])\r\n            for (let j = 0; j < star.length; j++) {\r\n                stars.push(star[j]);\r\n            }\r\n        }\r\n        let top = [];\r\n        if (stars.length <= 3) {\r\n            top = stars;\r\n        }\r\n        else {\r\n            top = [stars[0], stars[1], stars[2]];\r\n        }\r\n        top.sort((a, b) => parseTime(a[breakdown[0].field]) - parseTime(b[breakdown[0].field]))\r\n\r\n        let data = factData.sort((a, b) => parseTime(a[breakdown[0].field]) - parseTime(b[breakdown[0].field]))\r\n        let measureName = measure[0].aggregate === 'count' ? \"COUNT\" : measure[0].field\r\n\r\n\r\n\r\n        let chartSize = { width: 600, height: 280 }\r\n        // eslint-disable-next-line\r\n        let margin = {\r\n            \"top\": 15,\r\n            \"right\": 20,\r\n            \"bottom\": 15,\r\n            \"left\": 20\r\n        }\r\n        let tickWidth = 2\r\n\r\n        let width = chartSize.width - margin.left - margin.right,\r\n            height = chartSize.height - margin.top - margin.bottom;\r\n\r\n        let containerSelector = tooltipContainerId\r\n        let svg = d3.select(this.container())\r\n            .append(\"svg\")\r\n            .attr(\"width\", chartSize.width)\r\n            .attr(\"height\", chartSize.height)\r\n            .append(\"g\")\r\n            .attr(\"transform\", \"translate(\" + (margin.left + 10) + \",\" + margin.top + \")\")\r\n            .attr(\"font-family\", ENGFONT);\r\n\r\n        // set the ranges\r\n        let x = d3.scaleTime()\r\n            .range([0, width - 20])\r\n        // .padding(0.1);\r\n        let y = d3.scaleLinear()\r\n            .range([height - 20, 0]);\r\n\r\n        // Scale the range of the data in the domains\r\n        x.domain(d3.extent(data, function (d) { return parseTime(d[breakdown[0].field]); }));\r\n        y.domain(d3.extent([].concat(\r\n            // lower boundary minus margin\r\n            data.map(function (d) { return d[measure[0].field] * 0.95 }),\r\n            // upper boundary add margin\r\n            data.map(function (d) { return d[measure[0].field] * 1.05 })\r\n        )));\r\n\r\n        // add the x Axis\r\n        let format_TicksCount = formatTicksCount(data[0][breakdown[0].field]);\r\n        let tick_format = formatTick(data[0][breakdown[0].field]);\r\n        let axisX = d3.axisBottom(x).tickFormat(tick_format)\r\n        if (format_TicksCount === d3.timeYear) {\r\n            axisX.ticks(format_TicksCount)\r\n        }\r\n\r\n        let lineLayer = svg.append(\"g\").attr('class', 'lineLayer')\r\n\r\n        lineLayer.append('g').selectAll('line.line')\r\n            .data(y.ticks(5)).enter().append('line')\r\n            .attr('x1', 0)\r\n            .attr('x2', width - 20)\r\n            .attr('y1', function (d) { return y(d) })\r\n            .attr('y2', function (d) { return y(d) })\r\n            .attr('stroke', COLOR_GRID)\r\n            .attr('stroke-width', '2px')\r\n\r\n        let lineGen = d3.line().curve(d3.curveMonotoneX)\r\n            .x(function (d) {\r\n                return x(parseTime(d[breakdown[0].field]));\r\n            })\r\n            .y(function (d) {\r\n                return y(d[measureName]);\r\n            })\r\n        let rawPath = lineLayer.append('path')\r\n            .attr('d', lineGen(data))\r\n            .attr('stroke', COLOR_REGULAR)\r\n            .attr('stroke-width', '3px')\r\n            .attr('fill', 'none')\r\n\r\n\r\n        let symbolGen = d3.symbol()\r\n            .type(d3.symbolStar)\r\n            .size(16)\r\n\r\n        let tooltipLayer = svg.append('g').attr('class', 'tooltip');\r\n        for (let point of top) {\r\n            svg.append('g')\r\n                .attr('transform', 'translate(' + x(parseTime(point[breakdown[0].field])) + ',' + y(point[measureName]) + ')')\r\n                .append('path')\r\n                .attr('d', symbolGen())\r\n                .attr('fill', COLOR_STAR)\r\n            svg.append(\"line\")\r\n                .attr(\"x1\", x(parseTime(point[breakdown[0].field])))\r\n                .attr(\"y1\", height - 20)\r\n                .attr(\"x2\", x(parseTime(point[breakdown[0].field])))\r\n                .attr(\"y2\", y(point[measureName]))\r\n                .attr(\"stroke\", \"black\")\r\n                .attr(\"stroke-width\", \"1px\")\r\n                .attr(\"stroke-dasharray\", \"2px\")\r\n        }\r\n\r\n        // top-left\r\n        let tooltip = tooltipLayer.append(\"text\")\r\n            .attr(\"font-size\", '10px')\r\n            .attr(\"font-family\", ENGFONT)\r\n            .attr(\"fill\", COLOR_TEXT);\r\n        tooltip.append(\"tspan\")\r\n            .text(Math.round(top[0][measureName] * 100) / 100)\r\n        let textWidth = tooltip.node().getBBox().width;\r\n        let textHeight = tooltip.node().getBBox().height;\r\n        tooltip.attr(\"width\", textWidth)\r\n            .attr(\"height\", textHeight)\r\n            .attr(\"x\", x(parseTime(top[0][breakdown[0].field])) - textWidth * 1.05)\r\n            .attr(\"y\", y(top[0][measureName]) - textHeight / 2);\r\n\r\n        if (top.length > 1) {\r\n            // top-middle\r\n            tooltip = tooltipLayer.append(\"text\")\r\n                .attr(\"font-size\", '10px')\r\n                .attr(\"font-family\", ENGFONT)\r\n                .attr(\"fill\", COLOR_TEXT);\r\n            tooltip.append(\"tspan\")\r\n                .text(Math.round(top[1][measureName] * 100) / 100)\r\n            textWidth = tooltip.node().getBBox().width;\r\n            textHeight = tooltip.node().getBBox().height;\r\n            tooltip.attr(\"width\", textWidth)\r\n                .attr(\"height\", textHeight)\r\n                .attr(\"x\", x(parseTime(top[1][breakdown[0].field])) - textWidth / 2)\r\n                .attr(\"y\", y(top[1][measureName]) - textHeight / 2);\r\n        }\r\n\r\n        if (top.length > 2) {\r\n            // top-right\r\n            tooltip = tooltipLayer.append(\"text\")\r\n                .attr(\"font-size\", '10px')\r\n                .attr(\"font-family\", ENGFONT)\r\n                .attr(\"fill\", COLOR_TEXT);\r\n            tooltip.append(\"tspan\")\r\n                .text(Math.round(top[2][measureName] * 100) / 100)\r\n            textWidth = tooltip.node().getBBox().width;\r\n            textHeight = tooltip.node().getBBox().height;\r\n            tooltip.attr(\"width\", textWidth)\r\n                .attr(\"height\", textHeight)\r\n                .attr(\"x\", x(parseTime(top[2][breakdown[0].field])) + textWidth * 0.05)\r\n                .attr(\"y\", y(top[2][measureName]) - textHeight / 2);\r\n        }\r\n\r\n\r\n        let tickValues = []\r\n        for (let i = 0; i < top.length; i++) {\r\n            tickValues.push(parseTime(top[i][breakdown[0].field]))\r\n        }\r\n        axisX.tickValues(tickValues)\r\n\r\n        if (this._showTooltip) {\r\n            renderDetailValue(containerSelector, rawPath, x, y, height,\r\n                data, breakdown, measureName, tick_format, tooltipLayer)\r\n        }\r\n        svg.append(\"g\")\r\n            .attr(\"class\", \"xAxis\")\r\n            .attr(\"transform\", \"translate(0,\" + (height - 20) + \")\")\r\n            .call(axisX)\r\n            .call(g => {\r\n                g.attr(\"font-size\", '10px');\r\n                g.attr(\"font-family\", ENGFONT);\r\n                g.attr(\"font-weight\", 'light')\r\n\r\n                let domainD = g.selectAll(\".domain\").attr(\"d\");\r\n                domainD = domainD.replace(\"6V\", (6 * chartSize.height / 320) + \"V\")\r\n                domainD = domainD.replace(\"V6\", \"V\" + (6 * chartSize.height / 320))\r\n                g.selectAll(\".domain\").attr(\"d\", domainD).attr(\"stroke-width\", tickWidth);\r\n                g.selectAll(\".tick\")\r\n                    .selectAll(\"line\")\r\n                    // .attr(\"stroke\", Color.AXIS)\r\n                    .attr(\"stroke\", COLOR_AXIS)\r\n                    .attr(\"stroke-width\", tickWidth)\r\n                    .attr(\"y2\", 5);\r\n\r\n                g.selectAll(\"text\")\r\n                    .attr(\"y\", 10)\r\n                    //.attr(\"transform\", 'rotate(-20)')\r\n                    .attr(\"style\", 'text-anchor: end')\r\n            });\r\n\r\n\r\n        // add the y Axis\r\n        svg.append(\"g\")\r\n            .attr(\"class\", \"yAxis\")\r\n            // .attr(\"transform\", `translate(,0)`)\r\n            .call(d3.axisLeft(y).ticks(5).tickFormat(function (d) {\r\n                if ((d / 1000000) >= 1) {\r\n                    d = d / 1000000 + \"M\";\r\n                } else if ((d / 1000) >= 1) {\r\n                    d = d / 1000 + \"K\";\r\n                }\r\n                return d;\r\n            }))\r\n            .call(g => {\r\n                g.attr(\"font-size\", '10px')\r\n                g.attr(\"font-weight\", 'light')\r\n                g.attr(\"font-family\", ENGFONT)\r\n                let domainD = g.selectAll(\".domain\").attr(\"d\");\r\n                domainD = domainD.replace(\"M-6\", \"M-\" + (6 * chartSize.width / 640))\r\n                domainD = domainD.replace(\"H-6\", \"H-\" + (6 * chartSize.width / 640))\r\n                g.selectAll(\".domain\").attr(\"d\", domainD).attr(\"stroke-width\", tickWidth);\r\n                g.selectAll(\".tick\")\r\n                    .select(\"line\")\r\n                    //.attr(\"stroke\", Color.AXIS)\r\n                    .attr(\"stroke\", COLOR_AXIS)\r\n                    .attr(\"stroke-width\", tickWidth)\r\n                    .attr(\"x2\", -5);\r\n\r\n                g.selectAll(\"text\")\r\n                    .attr(\"x\", -10);\r\n            })\r\n        return svg;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nlet renderDetailValue = (containerSelector, rawPath, x, y, height,\r\n    data, breakdown, measureName, tick_format, tooltipLayer) => {\r\n    let detailValueTooltip = d3.select(containerSelector)\r\n        .append(\"div\")\r\n        .attr(\"id\", \"value-tooltip\")\r\n        .style(\"z-index\", 2000)\r\n        .style(\"width\", \"fit-content\")\r\n        .style(\"height\", \"40px\")\r\n        .style(\"opacity\", 0)\r\n        .style(\"position\", \"absolute\")\r\n        .style(\"pointer-events\", \"none\")\r\n        .style(\"border-radius\", \"4px\")\r\n        .style(\"background\", \"#FFFFFF\")\r\n        .style(\"box-shadow\", \"0 0 5px #888888\")\r\n        .style(\"padding\", \"5px\")\r\n    let detailValueTitle = detailValueTooltip.append(\"span\")\r\n        .style(\"font\", `9px ${ENGFONT}`)\r\n        .style(\"font-weight\", \"bold\")\r\n        .style(\"display\", \"block\")\r\n        .style(\"color\", \"#000000\")\r\n    let detailValueContent = detailValueTooltip.append(\"svg\")\r\n        .attr(\"width\", \"95px\")\r\n        .attr(\"height\", \"30px\")\r\n    let detailValueColor = detailValueContent.append(\"circle\")\r\n        .attr(\"r\", 4)\r\n        .attr(\"cx\", \"5px\")\r\n        .attr(\"cy\", \"12px\")\r\n    let detailValueText = detailValueContent.append(\"text\")\r\n        .style(\"font\", `8px ${ENGFONT}`)\r\n        .style(\"color\", \"#000000\")\r\n        .attr(\"x\", \"14px\")\r\n        .attr(\"y\", \"14px\")\r\n\r\n    rawPath.on(\"mouseover\", function (d) {\r\n        detailValueTooltip.transition()\r\n            .duration(200)\r\n            .style(\"opacity\", .9)\r\n        detailValue.transition()\r\n            .duration(200)\r\n            .style(\"opacity\", 1)\r\n    })\r\n        .on(\"mouseout\", function (d) {\r\n            // If the mouse is exactly on the data point, \r\n            // then the mouse will on the circle instead of the path\r\n            // So here we should keep the tooltip shown when the mouse is still on the circle\r\n            let currentElement = document.elementFromPoint(d3.event.pageX, d3.event.pageY)\r\n            if (currentElement !== detailValueCircle.node()) {\r\n                detailValueTooltip.transition()\r\n                    .duration(500)\r\n                    .style(\"opacity\", 0)\r\n                detailValue.transition()\r\n                    .duration(500)\r\n                    .style(\"opacity\", 0)\r\n            }\r\n        })\r\n        .on(\"mousemove\", function (d) {\r\n            let result = getPosition()\r\n            let x0 = x.invert(d3.mouse(this)[0])\r\n            let currentIndex = bisectDate(data, x0, 1)\r\n            let time0 = parseTime(data[currentIndex - 1][breakdown[0].field])\r\n            let time1 = parseTime(data[currentIndex][breakdown[0].field])\r\n            let currentTime = x0 - time0 > time1 - x0 ? time1 : time0\r\n            let currentValue = currentTime === time0 ? data[currentIndex - 1][measureName] : data[currentIndex][measureName]\r\n            let title = tick_format(currentTime)\r\n            detailValueTooltip.style(\"left\", (result.posX + 30) + \"px\")\r\n                .style(\"top\", (result.posY + 20) + \"px\")\r\n            detailValueTitle.html(title)\r\n            detailValueColor.style(\"fill\", COLOR_REGULAR)\r\n            detailValueText.html(measureName + \": \" + currentValue.toFixed(2))\r\n\r\n            detailValueLine.attr(\"x1\", x(currentTime))\r\n            detailValueLine.attr(\"x2\", x(currentTime))\r\n            detailValueCircle.attr(\"cx\", x(currentTime))\r\n            detailValueCircle.attr(\"cy\", y(currentValue))\r\n            detailValueCircle.attr(\"stroke\", COLOR_REGULAR)\r\n        })\r\n\r\n    let bisectDate = d3.bisector(function (d) { return parseTime(d[breakdown[0].field]) }).left\r\n    let detailValue = tooltipLayer.append(\"g\")\r\n        .style(\"opacity\", 0)\r\n    let detailValueLine = detailValue.append(\"line\")\r\n        .attr(\"y1\", height - 20)\r\n        .attr(\"y2\", 0)\r\n        .attr(\"stroke-width\", \"2px\")\r\n        .attr(\"stroke\", COLOR_GRID)\r\n        .attr(\"stroke-dasharray\", \"6, 3\")\r\n    let detailValueCircle = detailValue.append(\"circle\")\r\n        .attr(\"r\", 3)\r\n        .attr(\"fill\", \"#FFFFFF\")\r\n        .attr(\"stroke-width\", \"2\")\r\n        .style(\"box-shadow\", \"0 0 5px #888888\")\r\n        .on(\"mouseover\", function (d) {\r\n            // FIXME: This is a nit\r\n            // Even mouse is not on the path, the tooltip will still be shown \r\n            // but the error area is small\r\n            detailValueTooltip.transition()\r\n                .duration(200)\r\n                .style(\"opacity\", .9)\r\n            detailValue.transition()\r\n                .duration(200)\r\n                .style(\"opacity\", 1)\r\n        }).on(\"mouseout\", function (d) {\r\n            // If the mouse is exactly on the data point, \r\n            // then the mouse will on the circle instead of the path\r\n            // So here we should hide all the tooltip when moving mouse out of the circle\r\n            detailValueTooltip.transition()\r\n                .duration(500)\r\n                .style(\"opacity\", 0)\r\n            detailValue.transition()\r\n                .duration(500)\r\n                .style(\"opacity\", 0)\r\n        })\r\n}\r\n\r\nlet getSizeBySize = (size, chartSize, fact, hasSeries = false, moreThan6 = false) => {\r\n    let tickSize, annotationSize, tickWidth, dotR, strokeWidth;\r\n\r\n    switch (size) {\r\n        case \"small\":\r\n            tickSize = 10;\r\n            annotationSize = 16;\r\n            tickWidth = 2;\r\n            dotR = 5;\r\n            strokeWidth = 2;\r\n            break;\r\n        case \"middle\":\r\n            tickSize = 13;\r\n            annotationSize = 20;\r\n            tickWidth = 2;\r\n            dotR = 5;\r\n            strokeWidth = 3;\r\n            break;\r\n        case \"wide\":\r\n            tickSize = 16;\r\n            annotationSize = 26;\r\n            dotR = 7;\r\n            tickWidth = 2;\r\n            strokeWidth = 3;\r\n            break;\r\n        case \"large\":\r\n        default:\r\n            tickSize = 20;\r\n            annotationSize = 40;\r\n            tickWidth = 2;\r\n            dotR = 10;\r\n            strokeWidth = 3;\r\n            break;\r\n    }\r\n    const chartMargin = {\r\n        \"small\": {\r\n            \"top\": 15,\r\n            \"right\": 20,\r\n            \"bottom\": 15,\r\n            \"left\": 20\r\n        },\r\n        \"middle\": {\r\n            \"top\": 15,\r\n            \"right\": 20,\r\n            \"bottom\": 15,\r\n            \"left\": 20\r\n        },\r\n        \"wide\": {\r\n            \"top\": 15,\r\n            \"right\": 20,\r\n            \"bottom\": 15,\r\n            \"left\": 20\r\n        },\r\n        \"large\": {\r\n            \"top\": 15,\r\n            \"right\": 20,\r\n            \"bottom\": 15,\r\n            \"left\": 20\r\n        }\r\n    };\r\n    let margin = chartMargin[size];\r\n\r\n    return { chartSize: chartSize, margin: margin, tickSize: tickSize, annotationSize: annotationSize, tickWidth, dotR, strokeWidth }\r\n}\r\n\r\nexport default Outstanding;","import * as d3 from \"d3\";\nimport Chart from \"../../chart\";\nimport { parseTime } from '../constant/timeConstant'\n\nconst ENGFONT = \"OPPOSans\";\nconst COLOR_REGULAR = \"#6C8EF2\";\nconst COLOR_GRID = \"#E6E6E6\";\nconst COLOR_AXIS = \"#000000\";\nconst TICK_WIDTH = 2;\n\nclass Autocorrelation extends Chart {\n    constructor() {\n        super();\n        this._x = \"\";\n        this._y = \"\";\n    }\n\n    display() {\n        //parse fact\n        let factResult = this.parseFact()\n        let data = factResult._data\n        let measure = factResult._measure\n        let breakdown = factResult._breakdown\n        let focus = factResult._focus\n        let measureName = factResult._measureName\n        if (focus.length === 0) return\n        if (breakdown[1] && breakdown[1].field) return;\n\n        //init chart size\n        let chartResult = this.setChartStandard()\n        let chartSize = chartResult._chartSize\n        let width = chartResult._width\n        let height = chartResult._height\n        let margin = chartResult._margin\n\n        //init svg\n        let svg = this.initSvg(chartSize, margin)\n        //init layer\n        let lineLayer = svg.append(\"g\").attr(\"class\", \"lineLayer\")\n\n        //draw x axis\n        let xAxisResult = this.drawXAxis(svg, data, breakdown, focus, width, height, chartSize)\n        let x = xAxisResult._x\n\n        //draw y axis\n        let y = this.drawYAxis(svg, data, measure, focus, chartSize, height)\n\n        //draw original line\n        this.drawBackLine(x, y, data, lineLayer, breakdown, measureName, focus, chartSize, height)\n\n        return svg;\n    }\n    parseFact() {\n        /**\n         * Parse fact json\n         * return:The contents of each field in fact\n         */\n        let factData = this.factdata()\n        let measure = this.measure();\n        let breakdown = this.breakdown();\n        let focus = this.focus();\n        // set data\n        factData = factData.sort((a, b) => parseTime(a[breakdown[0].field]) - parseTime(b[breakdown[0].field]))\n        let data = factData;\n        let measureName = measure[0].aggregate === \"count\" ? \"COUNT\" : measure[0].field\n        return { _data: data, _measure: measure, _breakdown: breakdown, _focus: focus, _measureName: measureName }\n    }\n    setChartStandard() {\n        /** \n         * calculate size of the chart\n         * return chart size parameters\n         */\n        // set the dimensions and margins of the graph\n        let chartSize = { width: 600, height: 280 }\n        let margin = {\n            \"top\": 15,\n            \"right\": 20,\n            \"bottom\": 15,\n            \"left\": 20\n        }\n        let width = chartSize.width - margin.left - margin.right,\n            height = chartSize.height - margin.top - margin.bottom;\n        return { _width: width, _height: height, _chartSize: chartSize, _margin: margin }\n    }\n    initSvg(chartSize, margin) {\n        /**\n         * Initialize SVG based on the drawing area size\n         * return :svg \n         */\n        let svg = d3.select(this.container())\n            .append(\"svg\")\n            .attr(\"width\", chartSize.width)\n            .attr(\"height\", chartSize.height)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + (margin.left + 10) + \",\" + margin.top + \")\")\n            .attr(\"font-family\", ENGFONT);\n        return svg\n    }\n    drawXAxis(svg, data, breakdown, focus, width, height, chartSize) {\n        /**\n         * Draw the X axis\n         */\n        // set the ranges\n        let x = d3.scaleLinear().range([0, width])\n        // Scale the range of the data in the domains\n        x.domain([-1, focus[0].correlation.length])\n        // add the x Axis\n        let tickValues = [];\n        for (let i = 0; i < focus[0].correlation.length; i++) {\n            tickValues.push(i);\n        }\n        let axisX = d3.axisBottom(x)\n            .tickValues(tickValues)\n            .ticks(tickValues.length)\n            .tickFormat(d3.format('d'))\n\n        svg.append(\"g\")\n            .attr(\"class\", \"xAxis\")\n            .attr(\"transform\", \"translate(0,\" + (height - 20) + \")\")\n            .call(axisX)\n            .call(g => {\n                g.attr(\"font-size\", \"10px\");\n                g.attr(\"font-family\", ENGFONT);\n                g.attr(\"font-weight\", \"lighter\")\n\n                g.selectAll(\".tick\")\n                    .selectAll(\"line\")\n                    .attr(\"stroke\", COLOR_AXIS)\n                    .attr(\"stroke-width\", TICK_WIDTH)\n                    .attr(\"y2\", 5);\n\n                g.selectAll(\"text\")\n                    .attr(\"y\", 10)\n                // .attr(\"transform\", \"rotate(-20)\")\n                // .attr(\"style\", \"text-anchor: end\")\n            });\n        return { _x: x, _axisX: axisX }\n    }\n    drawYAxis(svg, data, measure, focus, chartSize, height) {\n        /**\n         * Draw the Y axis\n         */\n        // .padding(0.1);\n        let y = d3.scaleLinear()\n            .range([height - 20, 0]);\n\n        y.domain(d3.extent([].concat(\n            // lower boundary minus margin\n            focus[0].correlation.map(function (d) { if (d >= 0) { return d * 0.9 } else { return d * 2.0 } }),\n            // upper boundary add margin\n            focus[0].correlation.map(function (d) { return d * 1.1 })\n        )));\n\n        // add the y Axis\n        svg.append(\"g\")\n            .attr(\"class\", \"yAxis\")\n            // .attr(\"transform\", `translate(,0)`)\n            .call(d3.axisLeft(y).ticks(5).tickFormat(d3.format('.1f')))\n            .call(g => {\n                g.attr(\"font-size\", \"10px\")\n                g.attr(\"font-weight\", \"lighter\")\n                g.attr(\"font-family\", ENGFONT)\n\n                g.selectAll(\".tick\")\n                    .select(\"line\")\n                    .attr(\"stroke\", COLOR_AXIS)\n                    .attr(\"stroke-width\", TICK_WIDTH)\n                    .attr(\"x2\", -5);\n\n                g.selectAll(\"text\")\n                    .attr(\"x\", -10);\n            })\n        //Hide y axis\n        // yAxis.select(\"path\")\n        //      .attr(\"display\", \"none\")\n        // yAxis.selectAll(\".tick line\")\n        //     //  .attr(\"stroke-width\", 0)\n        //     .attr(\"opacity\", 0)\n        return y\n    }\n    drawBackLine(x, y, data, lineLayer, breakdown, measureName, focus, chartSize, height) {\n        /**\n         * draw series line and back grid\n         */\n        lineLayer.append(\"g\").selectAll(\"line.line\")\n            .data(y.ticks(5)).enter().append(\"line\")\n            .attr(\"x1\", 0)\n            .attr(\"x2\", chartSize.width)\n            .attr(\"y1\", function (d) { return y(d) })\n            .attr(\"y2\", function (d) { return y(d) })\n            .attr(\"stroke\", COLOR_GRID)\n            .attr(\"stroke-width\", \"2px\")\n\n        for (let i = 0; i < focus[0].correlation.length; i++) {\n            lineLayer.append(\"circle\")\n                .attr(\"cx\", x(i))\n                .attr(\"cy\", y(focus[0].correlation[i]))\n                .attr(\"r\", 4)\n                .attr(\"fill\", COLOR_REGULAR)\n            lineLayer.append(\"line\")\n                .attr(\"x1\", x(i))\n                .attr(\"y1\", d3.min([y(0), (height - 20)]))\n                .attr(\"x2\", x(i))\n                .attr(\"y2\", y(focus[0].correlation[i]))\n                .attr(\"stroke\", COLOR_REGULAR)\n                .attr(\"stroke-width\", \"2.5px\")\n        }\n        if (d3.min(focus[0].correlation) < 0) {\n            let xLeft = x(-1);\n            let xRight = x(focus[0].correlation.length)\n            lineLayer.append(\"line\")\n                .attr(\"x1\", xLeft)\n                .attr(\"y1\", y(0))\n                .attr(\"x2\", xRight)\n                .attr(\"y2\", y(0))\n                .attr(\"stroke\", \"gray\")\n                .attr(\"stroke-width\", \"2px\")\n                .attr(\"opacity\", 0.8)\n        }\n    }\n\n}\n\nexport default Autocorrelation;","import ChartType from './visualization/charttype';\nimport { Origin, Autocorrelation, Outstanding, MultivariateOutlier, Trend, UnivariateDistribution, Seasonality, MultivariateDistribution, FrequentPattern, Clustering, Forecasting, UnivariateOutlier, Similarity } from './charts';\n\nclass Visualization {\n    constructor(origin) {\n        this._table = [];\n        this._fact = {};\n        this._factdata = [];\n        this._width = 0;\n        this._height = 0;\n        this._type = ChartType.VERTICAL_BAR_CHART;\n        this._duration = 0;\n        this._chart = {};\n        this._caption = \"\";\n        this._showSuggestion = false; // When true, it will show the suggestion that whether the chart supports the data.\n        this._showTooltip = false;\n        this.props = origin.props\n    }\n\n    size() {\n        return this._size;\n    }\n\n    width(value) {\n        if (!value) {\n            return this._width;\n        }\n        this._width = value;\n    }\n\n    height(value) {\n        if (!value) {\n            return this._height;\n        }\n        this._height = value;\n    }\n\n    table(value) {\n        if (!value) {\n            return this._table;\n        }\n        this._table = value;\n    }\n\n    data(value) {\n        if (!value) {\n            return this._factdata;\n        }\n        this._factdata = value;\n    }\n\n    fact(value) {\n        if (!value) {\n            return this._fact;\n        }\n        this._fact = value;\n    }\n\n    chart(value) {\n        if (!value) {\n            return this._chart;\n        }\n        this._chart = value;\n    }\n\n    caption(value) {\n        if (!value) {\n            return this._caption;\n        }\n        this._caption = value;\n    }\n\n    style() {\n        return this._style;\n    }\n\n    showSuggestion() {\n        return this._showSuggestion\n    }\n    showTooltip() {\n        return this._showTooltip\n    }\n\n    load(spec) {\n        this._width = spec.width ? spec.width : 0;\n        this._height = spec.height ? spec.height : 0;\n        this._style = spec.style;\n        this._type = spec.type;\n        this._duration = spec.duration ? spec.duration : 0;\n        this._showSuggestion = spec.showSuggestion ? spec.showSuggestion : false;\n        this._showTooltip = spec.showTooltip ? spec.showTooltip : false;\n        return new Promise((resolve, reject) => {\n            try {\n                let data = this.data();\n                let fact = this.fact();\n                let chart = this._type2chart(spec.type);\n                chart.height(this._height);\n                chart.width(this._width);\n                chart.table(this._table);\n                chart.factdata(data);\n                chart.subspace(fact.subspace);\n                chart.measure(fact.measure);\n                chart.breakdown(fact.breakdown);\n                chart.focus(fact.focus);\n                chart.duration(this._duration);\n                chart.showSuggestion(this._showSuggestion);\n                chart.showTooltip(this._showTooltip);\n                this.chart(chart);\n                resolve(this);\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n\n    update() {\n        return new Promise((resolve, reject) => {\n            try {\n                let data = this.data();\n                let fact = this.fact();\n                this._chart.factdata(data);\n                this._chart.subspace(fact.subspace);\n                this._chart.measure(fact.measure);\n                this._chart.breakdown(fact.breakdown);\n                this._chart.focus(fact.focus);\n                this._chart.duration(this._duration);\n                this._chart.showSuggestion(this._showSuggestion);\n                this._chart.showTooltip(this._showTooltip);\n                resolve(this);\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n\n    _type2chart(type) {\n        switch (type) {\n            case ChartType.MULTIVARIATE_OUTLIER:\n                return new MultivariateOutlier(this.props);\n            case ChartType.UNIVARIATE_DISTRIBUTION:\n                return new UnivariateDistribution(this.props);\n            case ChartType.TREND:\n                return new Trend(this.props);\n            case ChartType.SEASONALITY:\n                return new Seasonality(this.props);\n            case ChartType.MULTIVARIATE_DISTRIBUTION:\n                return new MultivariateDistribution(this.props);\n            case ChartType.FREQUENT_PATTERN:\n                return new FrequentPattern(this.props);\n            case ChartType.CLUSTERING:\n                return new Clustering(this.props);\n            case ChartType.FORECASTING:\n                return new Forecasting(this.props);\n            case ChartType.UNIVARIATE_OUTLIER:\n                return new UnivariateOutlier(this.props);\n            case ChartType.SIMILARITY:\n                return new Similarity(this.props);\n            case ChartType.ORIGIN:\n                return new Origin(this.props);\n            case ChartType.AUTOCORRELATION:\n                return new Autocorrelation(this.props);\n            case ChartType.OUTSTANDING:\n                return new Outstanding(this.props);\n            default: return\n        }\n    }\n}\n\nexport default Visualization;","import * as d3 from 'd3';\n\nclass Display {\n    constructor() {\n        // visualization\n        this._container = \"\";\n        this._paragraph = \"\";\n        this._vis = {};\n    }\n\n    container(value) {\n        this._container = value;\n    }\n\n    paragraph(value) {\n        this._paragraph = value;\n    }\n\n    vis(value) {\n        if (!value) {\n            return this._vis;   \n        }\n        this._vis = value;\n    }\n\n    render() {\n        let vis = this.vis();\n        let chart = vis.chart();\n        chart.container(this._container);\n        let fact = vis.fact();\n        if (chart.duration() === 0) {\n            chart.display(fact.type);\n        } else {\n            chart.animate(fact.type);\n        }\n    }\n\n    update(prefact, nextfact) {\n        let vis = this.vis();\n        let chart = vis.chart();\n        chart.update(prefact, nextfact);\n    }\n\n    showCaption() {\n        let vis = this.vis();\n        d3.select(this._paragraph)\n            .style('font-size','1.5em')\n            .style('text-align','center')\n            .text(vis.caption());\n    }\n}\n\nexport default Display;","import Data from './data';\nimport Fact from './fact';\nimport Visualization from './visualization';\nimport Display from './display';\n\nclass AutoVis {\n    constructor(origin) {\n        this._container = document.createElement(\"div\");\n        this._paragraph = document.createElement(\"p\");\n        this._data = new Data();\n        this._fact = new Fact();\n        this._vis = new Visualization(origin);\n        this._display = new Display();\n        this._spec = {};\n    }\n\n    container(value) {\n        if (!value) {\n            return this._container;\n        }\n        this._container = value;\n    }\n\n    paragraph(value) {\n        if (!value) {\n            return this._paragraph;\n        }\n        this._paragraph = value;\n    }\n\n    load(spec) {\n        this._spec = spec;\n    }\n\n    shouldShowCaption(value) {\n        if (!value) {\n            return this._shouldShowCaption;\n        }\n        this._shouldShowCaption = value;\n    }\n\n    generate() {\n        // STEP 0: parse specification\n        let spec = this._spec;\n        let dataspec = spec.data ? spec.data : {};\n        let factspec = spec.fact ? spec.fact : {};\n        let chartspec = spec.chart ? spec.chart : {};\n\n        // STEP 1: data\n        this._data.load(dataspec)\n            .then((data) => {\n                // STEP 2: fact\n                this._fact.table(data.table());\n                this._fact.schema(data.schema());\n                return this._fact.load(factspec);\n            })\n            .then((fact) => {\n                // STEP 3: generate caption and setup visualization\n                this._vis.table(fact.table());\n                this._vis.data(fact.factdata());\n                this._vis.fact(fact.fact());\n                return this._vis.load(chartspec);\n            })\n            .then((vis) => {\n                // STEP 4: display\n                this._display.container(this.container());\n                this._display.paragraph(this.paragraph());\n                this._display.vis(vis);\n                this._display.render();\n                if (this.shouldShowCaption()) {\n                    this._display.showCaption();\n                }\n            })\n            .catch((reason) => {\n                console.log(reason);\n            })\n    }\n\n}\n\nexport default AutoVis;","import React, { Component } from 'react';\nimport { AutoVis } from './vis';\n\nexport default class Chart extends Component {\n    componentDidMount() {\n        const { id } = this.props.spec.chart;\n        let spec = this.props.spec;\n        let container = id ? `#vischart_${id}` : \"#demo-chart\";\n        this.autovis = new AutoVis(this);\n        this.autovis.container(container);\n        this.autovis.load(spec);\n        this.autovis.generate();\n    }\n\n    componentDidUpdate(preProps) {\n        const { id } = this.props.spec.chart;\n        let spec = this.props.spec;\n        let container = id ? `#vischart_${id}` : \"#demo-chart\";\n        this.autovis = new AutoVis(this);\n        this.autovis.container(container);\n        this.autovis.load(spec);\n        this.autovis.generate();\n    }\n\n    render() {\n        const {width,height}=this.props.spec.chart;\n        // let height = 640, width = 400;\n\n        let a_height=height!==undefined?height:640\n        let a_width=width!==undefined?width:400\n        const { id } = this.props.spec.chart ? this.props.spec.chart : { id: \"demo-chart\" };\n        return (\n            <div id={id ? `vischart_${id}` : 'demo-chart'} style={{ height: a_height, width: a_width, position: \"relative\" }} />\n        )\n    }\n}\n"],"sourceRoot":""}